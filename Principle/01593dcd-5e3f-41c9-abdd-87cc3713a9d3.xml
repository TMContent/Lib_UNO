<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1720696456" Content_Hash="-912473718">
  <Metadata>
    <Id>01593dcd-5e3f-41c9-abdd-87cc3713a9d3</Id>
    <Id_History>560d8121-97bd-400f-a90e-18ad319f8672,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Retrieve Sensitive Data on Demand</Title>
    <Category>Sensitive Data</Category>
    <Phase>Design</Phase>
    <Technology> Any</Technology>
    <Type>Principle</Type>
    <DirectLink>Retrieve Sensitive Data on Demand</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <h1>Description</h1>
  <p>The preferred approach is to retrieve sensitive data on demand when it is needed instead of persisting or caching it in memory. For example, retrieve the encrypted secret when it is needed, decrypt it, use it, and then clear the memory (variable) used to hold the plaintext secret. If performance becomes an issue, consider the following options: </p>
  <ul>
    <li>Cache the encrypted secret. <li>Cache the plaintext secret. </li></li>
  </ul>
  <h3>Cache the Encrypted Secret</h3>
  <p>Retrieve the secret when the application loads and then cache the encrypted secret in memory, decrypting it when the application uses it. Clear the plaintext copy when it is no longer needed. This approach avoids accessing the data store on a per request basis.</p>
  <h3>Cache the Plaintext Secret</h3>
  <p>Avoid the overhead of decrypting the secret multiple times and store a plaintext copy of the secret in memory. This is the least secure approach but offers the optimum performance. Benchmark the other approaches before guessing that the additional performance gain is worth the added security risk.</p>]]></Data>
  </Content>
</TeamMentor_Article>