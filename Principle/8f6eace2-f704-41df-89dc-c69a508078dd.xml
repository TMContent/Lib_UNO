<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1948027873" Content_Hash="-838112574">
  <Metadata>
    <Id>8f6eace2-f704-41df-89dc-c69a508078dd</Id>
    <Id_History>b30e770e-ea27-48ca-8fa3-a753b5307c7e,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Protect Session State from Unauthorized Access</Title>
    <Category>Session Management</Category>
    <Phase>Design</Phase>
    <Technology> Any</Technology>
    <Type>Principle</Type>
    <DirectLink>Protect Session State from Unauthorized Access</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <h1>Description</h1>
  <p>Consider how session state is to be stored. For optimum performance, you can store session state in the Web application's process address space. However, this approach has limited scalability and implications in Web farm scenarios, where requests from the same user cannot be guaranteed to be handled by the same server. In this scenario, an out-of-process state store on a dedicated state server or a persistent state store in a shared database is required. </p>
  <p>You should secure the network link from the Web application to state store using <a class="create" href="http://www.guidancelibrary.com/wikiedit.aspx?topic=Home.IPSec&amp;return=Home.ProtectionSessionState" title="Click here to create this topic">IPSec</a> or SSL to mitigate the risk of eavesdropping. Also consider how the Web application is to be authenticated by the state store. Use Windows authentication where possible to avoid passing plaintext authentication credentials across the network and to benefit from secure Windows account policies.</p>]]></Data>
  </Content>
</TeamMentor_Article>