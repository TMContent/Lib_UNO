<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1847437045" Content_Hash="399346324">
  <Metadata>
    <Id>c97079ac-a2f1-41ca-b078-f98291eb9e57</Id>
    <Id_History>a17168f9-9723-4fe0-81a6-19fc71556d94,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Check at the Gate</Title>
    <Category>Authorization</Category>
    <Phase>Design</Phase>
    <Technology> Any</Technology>
    <Type>Principle</Type>
    <DirectLink>Check at the Gate</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <h1>Description</h1>
  <p>You don't always need to flow a user's security context to the back end for authorization checks. Often, in a distributed system, this is not the best choice. Checking the client at the gate refers to authorizing the user at the first point of authentication (for example, within the Web application on the Web server), and determining which resources and operations (potentially provided by downstream services) the user should be allowed to access. </p>
  <p>If you design solid authentication and authorization strategies at the gate, you can circumvent the need to delegate the original caller's security context all the way through to your application's data tier.</p>]]></Data>
  </Content>
</TeamMentor_Article>