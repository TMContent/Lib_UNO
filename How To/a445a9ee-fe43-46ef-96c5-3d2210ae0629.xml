<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1193676570" Content_Hash="1251207828">
  <Metadata>
    <Id>a445a9ee-fe43-46ef-96c5-3d2210ae0629</Id>
    <Id_History>a445a9ee-fe43-46ef-96c5-3d2210ae0629,6a898efa-253e-436a-b2f1-0fe5486032cd,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>DEL123</Title>
    <Category>Testing</Category>
    <Phase>Test</Phase>
    <Technology>Web Application</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for XML Injection Bugs</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>Applies To:</span>
  </h1>
  <ul>
    <li>
      <span>Web services that use XML communication protocols written in web languages such as ASP, PHP, Java, and similar languages.</span>
      <li>
        <span>Web services that use SOAP communication.</span>
      </li>
    </li>
  </ul>
  <p>
    <b>
      <span>
      </span>
    </b>&amp;nbsp;</p>
  <h1>
    <span>Summary</span>
  </h1>
  <p>
    <span>XML stands for Extensible Markup Language.<span>&amp;nbsp; </span>Similar to HTML, it utilizes tags to store structured data.<span>&amp;nbsp; </span>However, XML is extensible as it allows users to define their own elements in user defined tags.</span>
  </p>
  <p>
    <span>In web software, the two most noticeable uses for XML are: </span>
  </p>
  <ol>
    <li>
      <span>Store structured data as an alternative to a database. </span>
      <li>
        <span>Provide a transaction protocol for business-to-business and business-to-client communications (such as SOAP.)</span>
      </li>
    </li>
  </ol>
  <h3>
    <span>
      <em>Store structured data as an alternative to a database</em>
    </span>
  </h3>
  <p>
    <span>A server stores user names, passwords, and emails in the <b><i>user</i></b> element.<span>&amp;nbsp; </span>It uses a web form to collect user data:</span>
  </p>
  <p>
    <span>
      <img src="|image|clip_image001.png" />
    </span>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <p>
    <span>A user enters the following data and clicks on the <i>Create User</i> button:</span>
  </p>
  <pre>
    <b>
      <span>Username: JohnyC</span>
    </b>
  </pre>
  <pre>
    <b>
      <span>
      </span>
    </b>
    <b>
      <span>Password: qwerty</span>
    </b>
    <span>
    </span>
  </pre>
  <pre>
    <b>
      <span>E-mail: johnyc@examplesite.com</span>
    </b>
  </pre>
  <p>
    <span>The client sends this URL to the server application:</span>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <b>
      <span>http://www.examplesite.com/GetProfile.php?username=JohnyC&amp;password=qwerty &amp;email=JohnyC@examplesite.com</span>
    </b>
  </pre>
  <pre>
    <b>
      <span>
      </span>
    </b>
  </pre>
  <p>
    <span>Once the server receives the URL it creates a <b><i>user</i></b><i>XML</i><i>element</i><i>node:</i></span>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <pre>
    <span>&lt;user&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;username&gt;JohnyC&lt;/username&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;password&gt;qwerty&lt;/password&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;userid&gt;111&lt;userid/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;</span>
  </pre>
  <pre>
    <span>&lt;/user&gt;</span>
  </pre>
  <pre>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>&amp;nbsp;</pre>
  <h3>
    <span>
      <em>Provide a transaction protocol for business-to-business and business-to-client communications (such as SOAP)</em>
    </span>
  </h3>
  <p>
    <span>The second and most used XML benefit is to integrate web services.<span>&amp;nbsp; </span>SOAP is the communication protocol for XML web services.<span>&amp;nbsp; </span>Before XML, systems had to implement Remote Procedure Calls (RPC) to integrate cross platform services on the web.<span>&amp;nbsp; </span>At that time COBRA or DCE were mostly used to achieve integration, but they were too complex.<span>&amp;nbsp;&amp;nbsp; </span>SOAP defined a standard XML communication protocol that was adopted because of its simplicity.<span>&amp;nbsp; </span>As Microsoft released SOAP, they also released a toolkit that translated COM to SOAP, as well as one to translate Java Functions to SOAP.<span>&amp;nbsp;&amp;nbsp; </span></span>
  </p>
  <p>
    <span>The following code shows an XML-based SOAP client that invokes the </span>
    <b>
      <span>sayHello </span>
    </b>
    <span>method on a SOAP server<a style="mso-endnote-id: edn1" title="" href="about:blank#_edn1" name="_ednref1"><span><span><span><span>[i]</span></span></span></span></a>:</span>
  </p>
  <pre>
    <span>Dim x, h</span>
  </pre>
  <pre>
    <span>Set x = CreateObject("MSXML2.DOMDocument")</span>
  </pre>
  <pre>
    <span>x.loadXML "&lt;s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/' </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>xmlns:xsi='http://www.w3.org/1999/XMLSchema-instance' </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>xmlns:xsd='http://www.w3.org/1999/XMLSchema'&gt;&lt;s:Body&gt;&lt;m:sayHello </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>xmlns:m='urn:Example1'&gt;&lt;name xsi:type='xsd:string'&gt;James&lt;/name&gt;&lt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>/m:sayHello&gt;&lt;/s:Body&gt;&lt;/s:Envelope&gt;"</span>
  </pre>
  <pre>
    <span>msgbox x.xml, , "Input SOAP Message"</span>
  </pre>
  <pre>
    <span>Set h = CreateObject("Microsoft.XMLHTTP")</span>
  </pre>
  <pre>
    <span>h.open "POST", "http://localhost:8080"</span>
  </pre>
  <pre>
    <span>h.send (x)</span>
  </pre>
  <pre>
    <span>while h.readyState &lt;&gt; 4</span>
  </pre>
  <pre>
    <span>wend</span>
  </pre>
  <pre>
    <span>msgbox h.responseText,,"Output SOAP Message"</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <p>
    <span>For more information about XML Web Services, refer to theMSDN article on the topic<a style="mso-endnote-id: edn2" title="" href="about:blank#_edn2" name="_ednref2"><span><span><span><span>[ii]</span></span></span></span></a></span>
  </p>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h3>
    <span>
      <em>XML Injection Bugs</em>
    </span>
  </h3>
  <p>
    <span>XML injection means to maliciously feed crafted data to a XML-based web service in order to execute an attack.<span>&amp;nbsp; </span>An XML injection attack varies from adding extra elements in an XML store to tamper with sensitive information to modifying XML store tags to execute cross-site scripting code in a target browser.</span>
  </p>
  <p>
    <span>The following steps are needed to test for XML Injection:</span>
  </p>
  <ol>
    <li>
      <span>Understand XML Injection attack scenarios.</span>
      <li>
        <span>Identify high risk components.</span>
        <li>
          <span>Start testing and exploring.</span>
          <li>
            <span>Tune test cases.</span>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <b>
      <span>Important: </span>
    </b>
    <span>
      <span>&amp;nbsp;&amp;nbsp;</span>It is necessary to differentiate XML injection with <b><i>XPATH</i></b> or <b><i>XQUERY </i></b>bugs.<span>&amp;nbsp; </span>They are similar as they both relate to XML, but the logic involved is fundamentally different and will be discussed in individual articles.</span>
  </p>
  <p>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <h1>
    <span>Step 1:<span>&amp;nbsp; </span>Understand XML Injection attack scenarios</span>
  </h1>
  <p>
    <span>During the first step, you need to understand how an XML injection attack works both in storage and communication.<span>&amp;nbsp; </span>The following two scenarios elaborate on XML injection attacks:</span>
  </p>
  <ul>
    <li>
      <span>Injecting an extra tag to a XML data store.</span>
      <li>
        <span>Executing cross-site scripting attacks by manipulating the CDATA tag.</span>
      </li>
    </li>
  </ul>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h2>
    <span>
      <em>Scenario 1:<span>&amp;nbsp; </span>Injecting an extra tag to a XML data store</em>
    </span>
  </h2>
  <p>
    <span>A bank site exposes a simple web page to create checking accounts. <span>&amp;nbsp;</span>It takes data from a web form like the one above and builds a URL like this one:</span>
  </p>
  <pre>
    <b>
      <span>http://www.examplesite.com/CreateChecking.php?username=JohnyC&amp;password=qwerty&amp;email=JohnyC@examplesite.com</span>
    </b>
  </pre>
  <p>
    <span>&amp;nbsp;</span>
    <span>The bank uses the data in the URL to construct the following XML in its data store:</span>
  </p>
  <pre>
    <span>&lt;user&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;username&gt;JohnyC&lt;/username&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;password&gt;qwerty&lt;/password&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;userid&gt;111&lt;userid/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;account type=”checking”&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;created&gt;02-21-2008&lt;/created&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;number&gt;1249109<span></span>&lt;/number&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;balance&gt;1201&lt;/balance&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;/account&gt; </span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>&lt;/user&gt;</span>
    <span>
    </span>
  </pre>
  <p>
    <span>The bank doesn’t provide a web interface to create saving accounts.<span>&amp;nbsp; </span>In order to open a saving account, clients need to go to the bank and provide additional information.<span>&amp;nbsp; </span>The bank exposes a security vulnerability that allows the attacker to feed malicious data in the web form.<span>&amp;nbsp; </span>The attacker submits the following URL request:</span>
  </p>
  <pre>
    <b>
      <span>http://www.examplesite.com/CreateChecking.php?username=JohnyC&amp;password=qwerty&amp;email=<span>JohnyC@examplesite.com<span>&lt;/mail&gt;&lt;account type="savings"&gt;&lt;created&gt;03-02-2008&lt;/created&gt;&lt;number&gt;12345678&lt;/number&gt;&lt;balance&gt;1000000&lt;/balance&gt;&lt;/account&gt;</span></span><span></span></span>
    </b>
  </pre>
  <p>
    <span>&amp;nbsp;</span>
    <span>When the bank receives this request it doesn’t check for extra tags and builds the following element in its data store:</span>
  </p>
  <pre>
    <span>&lt;user&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;username&gt;JohnyC&lt;/username&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;password&gt;qwerty&lt;/password&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;userid&gt;111&lt;userid/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;mail&gt;<span>JohnyC@examplesite.com&lt;/mail&gt;</span></span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>&lt;account type=</span>
    </span>
    <span>"</span>
    <span>savings</span>
    <span>"</span>
    <span>&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;created&gt;03-02-2008&lt;/created&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;number&gt;12345678&lt;/number&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;balance&gt;1000000&lt;/balance&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;/account&gt;</span>
    <span>
    </span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;account type=”checking”&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;created&gt;02-21-2008&lt;/created&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;number&gt;1249109<span></span>&lt;/number&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;balance&gt;1201&lt;/balance&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;/account&gt; </span>
  </pre>
  <pre>
    <span>&lt;/user&gt;</span>
    <span>
    </span>
  </pre>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>The bug in the bank web application here allows the attacker to remotely create a savings account with a $1000000 balance.</span>
  </p>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Scenario 2:<span>&amp;nbsp; </span>Executing cross-site scripting attacks by manipulating the CDATA tag </em>
    </span>
  </h2>
  <p>
    <span>XML uses the CDATA tag to escape blocks of text that would be otherwise recognized as markup.<span>&amp;nbsp; </span>All data enclosed in between the tags </span>
    <b>
      <span>"&lt;![CDATA[" </span>
    </b>
    <span>and </span>
    <b>
      <span>"]]&gt;" </span>
    </b>
    <span>will not be parsed as markup.<span>&amp;nbsp; </span></span>
  </p>
  <p>
    <span>A vulnerable server uses a file named scenarios.xml to store the title and the data for each scenario:</span>
  </p>
  <pre>
    <span>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span>
  </pre>
  <pre>
    <span>&lt;scenarios&gt;</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>&lt;scenario&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;title&gt;XSS scenario&lt;/title&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;data&gt;&lt;![CDATA[this is not to be parsed &lt;!-- as XML '"&gt;&lt;]]&gt;&lt;/data&gt;</span>
  </pre>
  <pre>
    <span>&lt;/scenario&gt;<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>etc…</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>&lt;/scenarios&gt;</span>
  </pre>
  <p>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <p>
    <span>The application blindly builds a page (scenarios.php) from the XML file using the following code and then sends the page back to the client:</span>
  </p>
  <p>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <pre>
    <span>&lt;? php</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>$objDOM = new DOMDocument(); </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>$objDOM-&gt;load("scenarios.xml"); </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>$scenario = $objDOM-&gt;getElementsByTagName("scenario");</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>foreach( $scenario as $value )</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>{</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>$title<span>&amp;nbsp; </span>= $value-&gt;getElementsByTagName("title")-&gt;item(0)-&gt;nodeValue;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>$data =<span>&amp;nbsp;&amp;nbsp; </span>$value-&gt;getElementsByTagName("data")-&gt;item(0)-&gt;nodeValue;</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>echo "$title:&lt;br&gt;$data&lt;br&gt;";</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>}</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>
    </span>
  </pre>
  <pre>
    <span>?&gt;</span>
  </pre>
  <p>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <p>
    <span>The scenario above will generate the following output:</span>
  </p>
  <pre>
    <span>XSS scenario:<br />this is not be parsed as XML '"&gt;&lt;</span>
  </pre>
  <p>
    <b>
      <span>
        <span>&amp;nbsp; </span>
      </span>
    </b>
    <span>
    </span>
  </p>
  <p>
    <span>Now the attacker gets control of scenarios.xml and modifies the data tag to look like this:<b></b></span>
  </p>
  <pre>
    <span>&lt;scenario&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;title&gt;XSS scenario&lt;/title&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;data&gt;&lt;![CDATA[<span>&lt;script&gt;alert('XSS')&lt;/script&gt;</span>]]&gt;&lt;/data&gt;</span>
  </pre>
  <pre>
    <span>&lt;/scenario&gt;<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
  </pre>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>This will result in the vulnerable application building a page similar to the one below and sending it to the client:</span>
  </p>
  <pre>
    <span>&lt;html&gt;</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>XSS scenario:<span></span></span>
  </pre>
  <pre>
    <span>&lt;script&gt;alert('XSS')&lt;/script&gt;</span>
    <span>
    </span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>&lt;/html&gt;</span>
  </pre>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>That finally results in a cross-site scripting attack because the server doesn’t validate the XML output before sending it back as HTML to the client.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 2:<span>&amp;nbsp; </span>Identify high risk components</span>
  </h1>
  <p>
    <span>The next steps for XML Injection testing are to list all of the places where code builds XML statements from user supplied input; and to understand how and where our application manipulates statements, and how it uses them to modify its data store or to invoke XML web methods.<span>&amp;nbsp; </span>The most common are:</span>
  </p>
  <ul>
    <li>
      <span>Profile-related web pages.</span>
      <li>
        <span>E-Commerce or financial account-related pages.</span>
        <li>
          <span>XML web service interaction methods.</span>
          <li>
            <span>XML-based system-level clients.</span>
            <li>
              <span>Systems that read from XML backend and blindly construct responses to Internet clients.</span>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h2>
    <span>
      <em>Identify all high risk components </em>
    </span>
  </h2>
  <p>
    <span>This subtask consists of indentifying the coding errors that lead to XML injection bugs.<span>&amp;nbsp; </span>XML injection bugs exist for two main reasons.<span>&amp;nbsp; </span>First, when a server-side application directly utilizes user-supplied strings that arrive over the Internet to add into their XML data store or perform other XML-related tasks.<span>&amp;nbsp; </span>The application doesn’t do any sort of data validation on the strings, and therefore allows for injection of XML tags.<span>&amp;nbsp; </span>In the second case, an application is vulnerable if it reads from an XML store and blindly constructs an HTML page to send back to the client.</span>
  </p>
  <p>
    <span>During this subtask, you need to go through all web pages in the application under test and look for any XML interaction.<span>&amp;nbsp; </span>Any page or method that uses XML to transmit data must be listed as a high risk component.<span>&amp;nbsp;&amp;nbsp; </span>Following are some common examples of what you need to look for when reviewing code for XML injection bugs.</span>
  </p>
  <h2>
    <span>
      <em>Identify the usage of XML parsers</em>
    </span>
  </h2>
  <p>
    <span>Server-side applications can choose from a wide variety of XML parsers depending on the language they are written (ASP, PHP, Java, etc.)<span>&amp;nbsp; </span>It is important that you recognize if the application you’re testing uses any of these parsers.<span>&amp;nbsp; </span>If so, it is a clear indication that the application manipulates XML.<span>&amp;nbsp; </span></span>
  </p>
  <ul>
    <li>
      <span>SAXParser (Java)</span>
      <li>
        <span>MSXML (including Microsoft XML DOM Parser)</span>
        <li>
          <span>Xerces (Java, C++, Perl)</span>
          <li>
            <span>Oracle XML Parser</span>
            <li>
              <span>XML Booster</span>
              <li>
                <span>XML::Parser (form Perl)</span>
                <li>
                  <span>XParse</span>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>This short list illustrates that the programmer has different choices when selecting an XML parser.<span>&amp;nbsp; </span>Make sure to look for the presence of any of these.<span>&amp;nbsp; </span>In addition, keep up with the latest XML parsing technology and research for additional parsers that your application might use.</span>
  </p>
  <h2>
    <span>
      <em>Look for code that writes XML from user-supplied input</em>
    </span>
  </h2>
  <p>
    <span>Any code that uses user-supplied input (from web forms, URLs, etc) must be marked as high risk.<span>&amp;nbsp; </span>Below is an example that uses the input parameter from a URL to construct XML:</span>
  </p>
  <pre>
    <span>set xmlDoc=CreateObject("Microsoft.XMLDOM")</span>
  </pre>
  <pre>
    <span>xmlDoc.async="false"</span>
  </pre>
  <pre>
    <span>xmlDoc.load("accounts.xml")</span>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>for each x in xmlDoc.documentElement.childNodes</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>
    </span>
    <span>document.write(x.nodename)</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>document.write(": ")</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>
    </span>
    <span>document.write(x.text)</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp; </span>document.write(<span>Request.QueryString("input")</span>)</span>
  </pre>
  <pre>
    <span>next</span>
  </pre>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Detect applications that use the CDATA tag</em>
    </span>
  </h2>
  <p>
    <span>Look at both the application code and storage XML files to identify the usage of the CDATA tag.<span>&amp;nbsp; </span>Identifying CDATA tags inside XML documents is easy.<span>&amp;nbsp; </span>Just search the contents of all XML documents in your application looking for the string “CDATA”.<span>&amp;nbsp; </span>Then track down the code that uses the data read from this kind of tag.<span>&amp;nbsp; </span>Any component that directly writes the contents of CDATA tags to an HTML response is vulnerable to cross-site scripting attacks through XML injection:</span>
  </p>
  <pre>
    <span>Response.Write(<span>contents from CDATA tag</span>)<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>(ASP)</span>
  </pre>
  <pre>
    <span>echo <span>contents from CDATA tag</span>;<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>(PHP)</span>
  </pre>
  <pre>
    <span>print <span>contents from CDATA tag</span>;<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>(PHP)</span>
  </pre>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h2>
    <span>
      <em>Don’t rely on XML Document Type Definitions (DTDs)</em>
    </span>
  </h2>
  <p>
    <span>Programmers might assume that defining XML tags using DTD<a style="mso-endnote-id: edn3" title="" href="about:blank#_edn3" name="_ednref3"><span><span><span><span>[iii]</span></span></span></span></a> protects them against XML injection attacks.<span>&amp;nbsp; </span>As we will see later on, this is a misconception.<span>&amp;nbsp; </span>Include any document that handles XML (using DTD or not) as a high risk component. </span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h2>
    <span>
      <em>Match High Risk Components with Entry Points</em>
    </span>
  </h2>
  <p>
    <span>Non-validated XML data can come from any application entry point.<span>&amp;nbsp; </span>Make sure to cover all the possible sources of malicious data which might get passed to a client.<span>&amp;nbsp; </span>Common data sources include:</span>
  </p>
  <ul>
    <li>
      <span>Web forms</span>
      <li>
        <span>URL contents</span>
        <li>
          <span>Flash parameters</span>
          <li>
            <span>XML store contents</span>
            <li>
              <span>Web service data</span>
              <li>
                <span>Graphical User Interface</span>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>List the high risk application components (usually web pages such as the ones in the scenarios above) and their related entry points to systematically aid with your testing: </span>
  </p>
  <p>
    <span>
      <br />
      <br />
    </span>
  </p>
  <table>
    <tbody>
      <tr>
        <td>
          <p>
            <b>
              <span>Component</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>Line</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>URL</span>
            </b>
            <span>
            </span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>Form</span>
            </b>
            <span>
            </span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>Flash</span>
            </b>
            <span>
            </span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>DB</span>
            </b>
            <span>
            </span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>Service</span>
            </b>
            <span>
            </span>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <b>
              <span>CreateChecking.php</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>101</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>112</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>165</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <b>
              <span>Response.php</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>1001</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>1116</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <b>
              <span>Present.php</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>234</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>531</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <b>
              <span>showAccount.php</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>432</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>X</span>
          </p>
        </td>
      </tr>
    </tbody>
  </table>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 3:<span>&amp;nbsp; </span>Start Testing and Exploring<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
  </h1>
  <p>
    <span>This step of testing is focused on submitting basic XML injection fuzz strings and observing how the application reacts.<span>&amp;nbsp; </span>Then, we will try to execute two simple XML injection attacks as shown in the previous scenarios:<span>&amp;nbsp; </span>tag injection and CDATA XSS.<span>&amp;nbsp; </span></span>
  </p>
  <p>
    <span>Try all of the tests in this step through the easiest entry point for each high risk component.<span>&amp;nbsp; </span>In step 4 you will tune your test case data to cover the different formats and encoding depending on the remaining entry points.</span>
  </p>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Start with simple fuzz strings</em>
    </span>
  </h2>
  <p>
    <span>Successful XML injection testing depends on whether the tester is able to send XML data that will end up being processed as expected XML. </span>
  </p>
  <p>
    <b>
      <i>
        <span>Closing quotes and tag characters</span>
      </i>
    </b>
  </p>
  <p>
    <span>It is recommend that you start testing with a simple XML string consisting of a single quote, a closing tag character, an opening tag character and a double quote.<span>&amp;nbsp; </span>Try these four characters separately and combined:</span>
  </p>
  <p>
    <span>'</span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>"</span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>&gt;</span>
    </span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
    </span>
    <span>&lt;</span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
    </span>
    <span>(separately)</span>
  </p>
  <p>
    <span>or<span>&amp;nbsp; </span></span>
  </p>
  <p>
    <span>'</span>
    <span>"&gt;&lt;</span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>&gt;</span>
    </span>
    <span>'</span>
    <span>"&lt;</span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>&lt;&gt;</span>
    </span>
    <span>'</span>
    <span>"</span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
    </span>
    <span>(combined)</span>
  </p>
  <p>
    <span>Then, observe how the XML-based server responds.<span>&amp;nbsp; </span>The idea is to modify a valid XML tag such as the first string below, to the second one.<span>&amp;nbsp; </span>Here, set the </span>
    <b>
      <span>$input</span>
    </b>
    <span> variable to a single quote (</span>
    <span>'</span>
    <span>):</span>
  </p>
  <pre>
    <b>
      <span>&lt;node attrib='$input'/&gt;</span>
    </b>
  </pre>
  <pre>
    <b>
      <span>
      </span>
    </b>
  </pre>
  <pre>
    <b>
      <span>&lt;node attrib='<span>'</span>'/&gt;</span>
    </b>
  </pre>
  <pre>
    <b>
      <span>
      </span>
    </b>
  </pre>
  <p>
    <span>Because the <i>node</i> element will now have the <i>attrib</i> attribute set to </span>
    <b>
      <span>''' (</span>
    </b>
    <span>note the extra single quote), it will result in invalid XML.<span>&amp;nbsp; </span>An invalid XML message from the server is a good indication that there are potential XML injection bugs present in the server application.</span>
  </p>
  <pre>
    <span>
    </span>
  </pre>
  <p>
    <b>
      <i>
        <span>Comment strings</span>
      </i>
    </b>
  </p>
  <p>
    <span>Another way to generate invalid XML is to add the start of an XML comment:</span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>xyz&lt;!--</span>
    <span>
    </span>
  </p>
  <p>
    <span>Let’s say that you entered the string above as the <i>username</i>.<span>&amp;nbsp; </span>The resulting XML will now look like this and will end up being invalid:</span>
  </p>
  <pre>
    <span>
    </span>
  </pre>
  <pre>
    <span>&lt;user&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;username&gt;<span>xyz</span></span>
    <span>&lt;!--</span>
    <span>&lt;/username&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;password&gt;qwerty&lt;/password&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;userid&gt;111&lt;userid/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;</span>
  </pre>
  <pre>
    <span>&lt;/user&gt;</span>
  </pre>
  <p>
    <b>
      <i>
        <span>Ampersand (&amp;)</span>
      </i>
    </b>
  </p>
  <p>
    <span>XML uses the ampersand character to refer to another entity in its user-defined XML schema.<span>&amp;nbsp; </span>For example, if the user passes the following string as the <i>username,</i> it will result in the corresponding XML:</span>
  </p>
  <pre>
    <span>&amp;xyz</span>
  </pre>
  <p>
    <span>Results in:</span>
    <span>
    </span>
  </p>
  <pre>
    <span>&lt;user&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;username&gt;<span>&amp;xyz</span>&lt;/username&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;password&gt;qwerty&lt;/password&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;userid&gt;111&lt;userid/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;mail&gt;JohnyC@examplesite.com&lt;/mail&gt;</span>
  </pre>
  <pre>
    <span>&lt;/user&gt;</span>
    <span>&amp;nbsp;</span>
  </pre>
  <p>
    <span>This will attempt to refer to the </span>
    <b>
      <span>&amp;xyz</span>
    </b>
    <span> entity of the XML document.<span>&amp;nbsp;&amp;nbsp; </span>If the document doesn’t contain this entity, then the newly built tag above will result in an invalid XML document.</span>
    <span>
    </span>
  </p>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Learn from error messages to conduct a real attack</em>
    </span>
  </h2>
  <p>
    <span>The purpose of creating invalid XML documents is so that you can start gaining information about the underlying XML format based on error messages they generate.<span>&amp;nbsp; </span>Let’s say you inserted the following fuzz string (<span>‘</span>) in an input field and the server responded with the following error message:</span>
  </p>
  <pre>
    <span>Invalid XML:</span>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>&lt;user name='<span>'</span>'/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;id ='1232'/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;realname='tester'&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;password='ind3$truct'/&gt;</span>
  </pre>
  <pre>
    <span>&lt;user&gt;</span>
  </pre>
  <p>
    <span>Now, consider how you can utilize this information to create an additional, valid user while conserving the structure and format of the original XML document:</span>
  </p>
  <pre>
    <b>
      <span>$input = <span>attacker'&gt;&lt;id ='1234'/&gt;&lt;realname='hacker'&gt;&lt;password='qwerty'/&gt;&lt;/user&gt;</span></span>
    </b>
  </pre>
  <pre>
    <b>
      <span>&lt;user name ='real_user</span>
    </b>
  </pre>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>results in the server creating an extra element:</span>
  </p>
  <pre>
    <span>&lt;user name='attacker'/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;id ='1234'/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;realname='hacker'&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;password='ind3$truct'/&gt;</span>
  </pre>
  <pre>
    <span>&lt;/user&gt;</span>
  </pre>
  <pre>
    <span>&lt;user name='real_user</span>
    <span>'/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;id ='1232'/&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;realname='tester'&gt;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&lt;password='ind3$truct'/&gt;</span>
  </pre>
  <pre>
    <span>&lt;/user&gt;</span>
  </pre>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Try to exploit CDATA tags with Cross-Site Scripting (XSS) attacks</em>
    </span>
  </h2>
  <p>
    <span>To finish this step try to exploit the contents of CDATA tags to see if you can execute an XSS attack.<span>&amp;nbsp; </span>This test is quite straight forward, simply remember that the XML parser extracts all data enclosed in between the tags </span>
    <b>
      <span>"&lt;![CDATA[" </span>
    </b>
    <span>and </span>
    <b>
      <span>"]]&gt;" </span>
    </b>
    <span>to form a new string.<span>&amp;nbsp; </span>For example:</span>
  </p>
  <pre>
    <span>&lt;![CDATA[xyz]]&gt;</span>
  </pre>
  <p>
    <span>Becomes:</span>
  </p>
  <pre>
    <span>xyz</span>
  </pre>
  <p>
    <span>In the same manner:</span>
  </p>
  <pre>
    <span>&lt;![CDATA[&lt;]]&gt;script&lt;![CDATA[&gt;]]&gt;</span>
  </pre>
  <p>
    <span>Becomes:</span>
  </p>
  <pre>
    <span>&lt;script&gt;</span>
  </pre>
  <p>
    <span>Finally</span>
    <span>:</span>
  </p>
  <pre>
    <span>&lt;![CDATA[<span>&lt;script&gt;alert('XSS')&lt;/script&gt;</span>]]&gt;<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
    <span>&amp;nbsp;</span>
  </pre>
  <p>
    <span>Becomes:</span>
  </p>
  <pre>
    <span>&lt;script&gt;alert('XSS')&lt;/script&gt;</span>
    <span>
    </span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <h1>
    <span>Step 4:<span>&amp;nbsp; </span>Tune Test Cases</span>
    <span>
    </span>
  </h1>
  <p>
    <span>During this step you must focus in modifying your test case data to cover all entry points based on the format of each specific entry point.<span>&amp;nbsp; </span>In addition, you must tune your test case data in order to execute additional XML Injection payloads. </span>
    <span>
    </span>
  </p>
  <h2>
    <span>
      <em>Consider string format and encoding according to entry point</em>
    </span>
  </h2>
  <p>
    <b>
      <i>
        <span>Web Forms</span>
      </i>
    </b>
  </p>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
    <span>Web forms are the easiest to test since they commonly allow most ASCII strings.<span>&amp;nbsp; </span>An attacker can try entering this string into an input field, for instance in the web form below:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>
      <img src="|image|clip_image001.png" />
    </span>
  </p>
  <p>
    <span>
    </span>
    <span>An attacker might try to enter this string in the email text field to execute an XML injection attack:</span>
  </p>
  <pre>
    <span>JohnyC@examplesite.com&lt;/mail&gt;&lt;account type=</span>
    <span>"</span>
    <span>savings</span>
    <span>"</span>
    <span>&gt;&lt;created&gt;03-02-2008&lt;/created&gt;&lt;number&gt;12345678&lt;/number&gt;&lt;balance&gt;1000000&lt;/balance&gt;&lt;/account&gt;</span>
  </pre>
  <p>
    <span>It’s possible that client side checks are in place to match the contents of this text field with a valid email format.<span>&amp;nbsp; </span>However, client side checks are easily bypassed by removing them at the attacker’s end.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <b>
      <i>
        <span>URL Contents</span>
      </i>
    </b>
  </p>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
    <span>
      <br />The format of URLs tends to be more complex than that of other input fields.<span>&amp;nbsp; </span>This is due to the need for URLs to contain special or reserved characters, such as spaces, questions marks, single quotes, less than/greater than (&lt;/&gt;) symbols, and ampersands as data, rather than URL directives.<span>&amp;nbsp; </span>The client <i>encodes</i> the URL and then sends it to the server, which decodes it so that the special characters can be processed as data.</span>
  </p>
  <p>
    <span>How the encoding and decoding is done depends on the programming language in use.<span>&amp;nbsp; </span>For example, sometimes the encoding function replaces the blank spaces with a plus (+) sign, or the characters %20, so that:</span>
  </p>
  <pre>
    <span>Joseph Cohen</span>
  </pre>
  <p>
    <span>Becomes:</span>
  </p>
  <pre>
    <span>Joseph<span>+</span>Cohen<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
  </pre>
  <p>
    <span>or</span>
    <b>
      <span>
      </span>
    </b>
  </p>
  <pre>
    <span>Joseph<span>%20</span>Cohen</span>
  </pre>
  <p>
    <span>The most common URL encoding scheme consists of replacing special and reserved characters with a percent sign and then their hexadecimal values (e.g. </span>
    <b>
      <span>%HH</span>
    </b>
    <span>.)<span>&amp;nbsp; </span>Using this encoding scheme the URL seen below will be translated from:</span>
  </p>
  <pre>
    <b>
      <span>http://www.examplesite.com/CreateChecking.php?username=JohnyC&amp;password=qwerty&amp;email=<span>JohnyC@examplesite.com&lt;/mail&gt;&lt;account type="savings"&gt;&lt;created&gt;03-02-2008&lt;/created&gt;&lt;number&gt;12345678&lt;/number&gt;&lt;balance&gt;1000000&lt;/balance&gt;&lt;/account&gt;</span><span></span></span>
    </b>
  </pre>
  <pre>
    <b>
      <span>
      </span>
    </b>
  </pre>
  <pre>
    <span>to: </span>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <b>
      <span>http://www.examplesite.com/CreateChecking.php?username=JohnyC&amp;password=qwerty&amp;email=<span>JohnyC%40examplesite.com%3c%2fmail%3e%3caccount%20type%3d%22savings%22%3e%3ccreated%3e03-02-2008%3c%2fcreated%3e%3cnumber%3e12345678%3c %2fnumber%3e%3cbalance%3e1000000%3c%2fbalance%3e%3c%2faccount%3e</span></span>
    </b>
  </pre>
  <pre>
    <b>
      <span>
      </span>
    </b>
  </pre>
  <p>
    <span>This is because the below characters translate to their hex encoding like this:</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <div>
    <table>
      <tbody>
        <tr>
          <td>
            <p>
              <b>
                <span>space</span>
              </b>
              <span>
              </span>
            </p>
          </td>
          <td>
            <p>
              <span>@</span>
              <span>
              </span>
            </p>
          </td>
          <td>
            <p>
              <b>
                <span>&lt;</span>
                <span>&amp;nbsp;</span>
              </b>
            </p>
          </td>
          <td>
            <p>
              <span>/</span>
              <span>
              </span>
            </p>
          </td>
          <td>
            <p>
              <span>&gt;</span>
              <span>&amp;nbsp;</span>
            </p>
          </td>
          <td>
            <p>
              <span>=</span>
              <span>
              </span>
            </p>
          </td>
          <td>
            <p>
              <b>
                <span>"</span>
              </b>
              <span>
              </span>
            </p>
          </td>
        </tr>
        <tr>
          <td>
            <p>
              <b>
                <span>%20</span>
              </b>
            </p>
          </td>
          <td>
            <p>
              <b>
                <span>%40</span>
              </b>
            </p>
          </td>
          <td>
            <p>
              <b>
                <span>%3c</span>
              </b>
            </p>
          </td>
          <td>
            <p>
              <b>
                <span>%2f</span>
              </b>
            </p>
          </td>
          <td>
            <p>
              <b>
                <span>%3e</span>
              </b>
            </p>
          </td>
          <td>
            <p>
              <b>
                <span>%3d</span>
              </b>
            </p>
          </td>
          <td>
            <p>
              <b>
                <span>%22</span>
              </b>
            </p>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <b>
      <i>
        <span>Flash Parameters</span>
      </i>
    </b>
  </p>
  <p>
    <span>Flash uses the </span>
    <b>
      <span>FlashVars </span>
    </b>
    <span>parameter tag from HTML embedded objects to collect user input:</span>
    <b>
      <span>
      </span>
    </b>
  </p>
  <pre>
    <span>&lt;object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"</span>
  </pre>
  <pre>
    <span> codebase=""http://macromedia.com/cabs/swflash.cab#version=6,0,0,0""</span>
  </pre>
  <pre>
    <span> width="250" height="250" id="flaMovie1" align="center"&gt;</span>
  </pre>
  <pre>
    <span> &lt;param name=movie value="flaMovie1.swf"&gt;</span>
  </pre>
  <pre>
    <span> &lt;param name=FlashVars value="input=<span>userInput</span>"&gt; </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;</span>&lt;param name=quality value=high&gt; </span>
  </pre>
  <pre>
    <span>&lt;/object&gt;</span>
  </pre>
  <pre>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </pre>
  <p>
    <span>When testing through </span>
    <b>
      <span>FlashVars </span>
    </b>
    <span>you need to replace the </span>
    <b>
      <span>userInput </span>
    </b>
    <span>value with the XML injection string.<span>&amp;nbsp; </span></span>
  </p>
  <p>
    <span>Note: Make sure that you also try different encodings when you test through this entry point.</span>
  </p>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <p>
    <b>
      <i>
        <span>XML store contents</span>
      </i>
    </b>
  </p>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <span>You must also tune your test case data when modifying the CDATA tag within XML files to execute a successful XSS attack.<span>&amp;nbsp; </span>For instance, some applications may blacklist any input that contains the following string, thus not allowing it to be placed in the XML data store:</span>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <span>&lt;script&gt; </span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>Here you may need to tweak your attack data to hide the script tags by adding extra CDATA tags</span>
    <b>
      <i>
        <span>:&amp;nbsp;</span>
      </i>
    </b>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <pre>
    <span>&lt;data&gt;<span>&lt;[CDATA[</span><span>&lt;sc</span><span>]]&gt;&lt;![CDATA[</span><span>ript&gt;alert('XSS')&lt;/sc</span><span>]]&gt;&lt;![CDATA[</span><span>ript&gt;</span><span>]]&gt;</span>&lt;/data&gt;</span>
    <span>
    </span>
  </pre>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <span>At the end the contents within the CDATA tags get concatenated to construct a valid &lt;script&gt; tag.<span>&amp;nbsp; </span>This will bypass any checks done for <b>&lt;script&gt;</b> before the final concatenation.</span>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>&amp;nbsp;</p>
  <p>
    <b>
      <i>
        <span>Additional entry points</span>
      </i>
    </b>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <p>
    <span>Each application will have different ways of processing input from users, files, services, and other software entities.<span>&amp;nbsp; </span>Ensure that you understand the format of each entry point and cover the different formats on each entry point for each high risk component.</span>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Try additional payloads</em>
    </span>
  </h2>
  <p>
    <span>So far you’ve learned how to execute two payloads:</span>
  </p>
  <ul>
    <li>
      <span>Tag injection.</span>
      <li>
        <span>Cross-site scripting through CDATA tags.</span>
      </li>
    </li>
  </ul>
  <p>
    <span>There are other payloads that you can try such as:</span>
  </p>
  <ul>
    <li>
      <span>Denial of service by consuming extra memory with excessive tags.</span>
      <li>
        <span>Denial of service by resource exhaustion via recursive elements.</span>
        <li>
          <span>Information disclosure attacks using XML External Entities (XEE)<a style="mso-endnote-id: edn4" title="" href="about:blank#_edn4" name="_ednref4"><span><span><span><span>[iv]</span></span></span></span></a></span>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>Each payload will require special tweaking of the XML attack data and might add new entry points to the scenario.<span>&amp;nbsp; </span>However, it is imperative that you keep up to date with the latest attack techniques related to XML injection and include them in your security test suite.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Conclusions</span>
    <span>
    </span>
  </h1>
  <p>
    <span>Testing for XML injection requires that you understand how the application under test uses XML.<span>&amp;nbsp; </span>There are different scenarios ranging from when systems take XML as input, to when systems respond with XML as HTML output.<span>&amp;nbsp; </span>To successfully test for XML injection you need to understand these different scenarios.<span>&amp;nbsp; </span>Then, familiarize yourself with any potentially dangerous code and characteristics of any high risk components that are present.<span>&amp;nbsp; </span>Create a test plan that matches high risk components with their different entry points.<span>&amp;nbsp; </span>Then, start testing with simple test strings and observe how the application responds.<span>&amp;nbsp; </span>Finally, to achieve the most complete coverage, ensure that you tune your attack data to cover all formats in all entry points, and try different, up to date payloads.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <div>
    <br />
  </div>
  <div>
    <hr />
  </div>
  <p>
    <a style="mso-endnote-id: edn1" title="" href="about:blank#_ednref1" name="_edn1">
      <span>
        <span>
          <span>[i]</span>
        </span>
      </span>
    </a>
    <span>
    </span>
    <span>Programming Web Services with SOAP</span>
    <span>.<span>&amp;nbsp; </span>James Snell, Doug Tidwell &amp; Pavel Kulchenko.<span>&amp;nbsp; </span></span>
    <span>
      <a href="http://www.topxml.com/soap/articles/webservices/default.asp">
        <span>http://www.topxml.com/soap/articles/webservices/default.asp</span>
      </a>
    </span>
    <span>
    </span>
  </p>
  <p>
    <a style="mso-endnote-id: edn2" title="" href="about:blank#_ednref2" name="_edn2">
      <span>
        <span>
          <span>
            <span>
              <span>[ii]</span>
            </span>
          </span>
        </span>
      </span>
    </a>
    <span> XML Web Services Basics.<span>&amp;nbsp; </span>Roger Wolter.<span>&amp;nbsp; </span>Microsoft Corporation.<span>&amp;nbsp; </span><a href="http://msdn2.microsoft.com/en-us/library/ms996507.aspx">http://msdn2.microsoft.com/en-us/library/ms996507.aspx</a></span>
  </p>
  <p>
    <a style="mso-endnote-id: edn3" title="" href="about:blank#_ednref3" name="_edn3">
      <span>
        <span>
          <span>
            <span>
              <span>[iii]</span>
            </span>
          </span>
        </span>
      </span>
    </a>
    <span> Document Type Definition.<span>&amp;nbsp; </span>Wikipedia.<span>&amp;nbsp; </span><a href="http://en.wikipedia.org/wiki/Document_Type_Definition">http://en.wikipedia.org/wiki/Document_Type_Definition</a></span>
  </p>
  <p>
    <a style="mso-endnote-id: edn4" title="" href="about:blank#_ednref4" name="_edn4">
      <span>
        <span>
          <span>
            <span>
              <span>[iv]</span>
            </span>
          </span>
        </span>
      </span>
    </a>
    <span> Testing for XML Injection. OWASP. <a href="http://www.owasp.org/index.php/Testing_for_XML_Injection">http://www.owasp.org/index.php/Testing_for_XML_Injection</a></span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>]]></Data>
  </Content>
</TeamMentor_Article>