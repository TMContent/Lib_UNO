<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1412296340" Content_Hash="-530372650">
  <Metadata>
    <Id>4323b5e9-463c-446e-9fd9-713f6cd4d0aa</Id>
    <Id_History>82940b80-be9f-4893-9210-53792ee5e72b,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>How to Test for DNS Poisoning Bugs</Title>
    <Category>Networking</Category>
    <Phase>Deployment</Phase>
    <Technology> Any</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for DNS Poisoning Bugs</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>Applies to:</h1>
  <p>DNS (Domain Name System) software such as DNS servers and resolvers.</p>
  <h1>Summary</h1>
  <p>The Domain Name System is implemented heavily across the Internet to resolve domain names (such as www.example.com) to their respective IP address.&amp;nbsp; Internet clients such as web browsers query a collection of DNS servers to resolve domain names, e.g. <i>www.example.com</i>, into an IP addresses, e.g. <i>201.77.100.88</i>.&amp;nbsp; </p>
  <p>During a DNS Poisoning attack an adversary attacks a vulnerable DNS server to replace a valid domain name (e.g. <i>www.example.com</i> with IP <i>201.77.100.88</i>) with the adversary's malicious IP (<i>w.x.y.z</i>).&amp;nbsp; An adversary can also achieve this by executing a Man in the Middle (MitM) style attack between a DNS client and DNS server, and attempt to respond to the client faster than the authentic server.&amp;nbsp; The adversary can then replace the contents of the affected domain name with potentially malicious content of their choosing.</p>
  <p>&amp;nbsp;</p>
  <p>Follow these steps to test for DNS Poisoning bugs:</p>
  <ul>
    <li>Step 1:&amp;nbsp; Understand Attack Scenarios.<li>Step 2:&amp;nbsp; Analyze Root Causes and Mitigations.<li>Step 3:&amp;nbsp; Start Testing and Exploring.<li>Step 4:&amp;nbsp; Tune Test Cases.</li></li></li></li>
  </ul>
  <h1>Step 1:&amp;nbsp; Understand Attack Scenarios</h1>
  <p>First you must understand the details of DNS Poisoning attacks.&amp;nbsp;&amp;nbsp; The following scenarios illustrate the two common DNS Poisoning attacks:</p>
  <ul>
    <li>DNS poisoning by DNS cache poisoning. <li>DNS poisoning by DNS server forgery.</li></li>
  </ul>
  <h2>DNS poisoning by DNS cache poisoning </h2>
  <p>During a DNS cache poisoning attack, an adversary tampers with a DNS server cache so that the server responds with malicious data to its clients.&amp;nbsp; The adversary's goal is to replace the cache so that certain domain names resolve to an adversary-controlled IP address (<i>w.x.y.z</i>).&amp;nbsp; If the attack is successful, when a client queries the DNS server for a safe domain (say <i>www.example.com</i>), the DNS server directs the client to the adversary's IP address (<i>w.x.y.z</i>).&amp;nbsp; </p>
  <p>In detail:</p>
  <ol>
    <li>The attacker discovers a vulnerable DNS server.<li>The attacker forces the DNS server to make a request to a domain controlled by an attacker's nameserver.<li>The attacker responds with an empty answer but uses additional sections in the response to cache additional records in the DNS server cache.</li></li></li>
  </ol>
  <h2>DNS poisoning by DNS server forgery</h2>
  <p>A variant of DNS Poisoning, known as DNS Forgery &amp;#91;i&amp;#93; , consists of intruding upon the target network to impersonate a real DNS server, and then trying to beat the DNS server's real answer to a client request with an alternate answer of the adversary's choosing.&amp;nbsp; The alternate response must, however, contain a valid request id from the original DNS server (built from a 16-bit nonce).&amp;nbsp; By sending multiple simultaneous requests to the original server, the adversary can execute a modification of the birthday attack &amp;#91;ii&amp;#93; in order to predict a valid request id in a reasonable amount of time.</p>
  <p>In detail:</p>
  <ol>
    <li>The attacker executes Man in the Middle attack between a DNS server and a DNS client.<li>The attacker waits for the client to make a DNS request.<li>The attacker intercepts the DNS request.<li>The attacker starts a birthday attack to try to predict a valid DNS response nonce for the request.<li>The attacker sends back a valid DNS response to the client with a malicious IP address for the requested domain name.</li></li></li></li></li>
  </ol>
  <p>&amp;nbsp;</p>
  <h1>Step 2:&amp;nbsp; Analyze Root Causes and Mitigations</h1>
  <p>During this step you must understand what causes DNS poisoning.&amp;nbsp; Once you understand the root causes, you can identify mitigations both in design and implementation.&amp;nbsp; With this information you can review the application's architecture and source code; and then recognize both safe and unsafe practices.</p>
  <h2>DNS Poisoning Root Cause</h2>
  <p>The principal cause for DNS Poisoning bugs is that DNS servers are too trustful of DNS responses.&amp;nbsp; This allows malicious DNS nodes (such as spoofed DNS servers) to replace valid DNS nodes.&amp;nbsp; When these malicious nodes are recognized as valid, they can send malicious responses to DNS servers or attempt to reply faster to DNS clients.</p>
  <h2>DNS Poisoning Mitigations</h2>
  <p>The principal mitigation for this bug is for both DNS servers and clients to be less trusting of DNS responses.&amp;nbsp; <a style="mso-comment-reference: A_2; mso-comment-date: 20080402T1025"></a><a style="mso-comment-reference: IG_1; mso-comment-date: 20080401T2106">A possible way to achieve this is to add a additional layer of security, such as randomly selecting a source port</a>, to the existing 16-bit nonce to decrease the chances of race attacks such as the birthday attack.</p>
  <p>Another mitigation consists of using digital signatures to authenticate DNS nodes.&amp;nbsp; A possible implementation is via digital certificates that are used during authentication of DNS data to ensure that this data comes from a trusted source.&amp;nbsp; Therefore, an application can check for verify the authenticity of DNS messages using signatures over a reputable and secure method such as Secure Sockets Layer (<b>SSL</b>) or Transport Layer Security (<b>TLS</b>).</p>
  <p>A secure version of DNS named <b><i>DNSSEC</i></b> also uses cryptographic certificates to validate DNS packets.&amp;nbsp;&amp;nbsp; Although this mitigation against DNS poisoning attacks is ideal; recent survey results indicate that DNSSEC is far from being widely deployed&amp;nbsp;&amp;#91;iii&amp;#93;.</p>
  <p>However, there are interim solutions until DNSSEC is widely used on the Internet, such as running the latest <b><i>BIND</i></b> version along with anti-DNS forgery firewall rules or running <b><i>OpenDNS,</i></b> which randomizes the ports to add an additionallayer of security to prevent against forgery attacks.</p>
  <p>If you have access to the DNS application's source code or design specifications, at the end of this step you should be able to determine if your application is vulnerable by design or if it implements any of the DNS forgery mitigation techniques mentioned above.&amp;nbsp; </p>
  <p>&amp;nbsp;</p>
  <h1>Step 3:&amp;nbsp; Start Testing and Exploring</h1>
  <p>Now that you know what DNS poisoning attacks look like and how to protect against them, you must test for both secure and insecure implementations.</p>
  <h2>Testing a DNS server against DNS cache poisoning</h2>
  <ol>
    <li>Select the target DNS server.<li>Set up a web client (browser) to uses the target DNS server.<li>Set up an adverse/attacker controlled DNS server (it will send specially crafted responses - see step 6).<li>Set up an adverse/attacker controlled web server. <li>Set up a trigger that starts a DNS lookup query from within the target DNS server to the adverse DNS sever.&amp;nbsp; <li>Use the adverse DNS server to reply to the query with extra information in the DNS packets.&amp;nbsp; &amp;nbsp;Set the <b>Answers</b>, <b>Authoritative nameservers, </b>and <b>Additional records</b> fields of the DNS packets to direct all futures requests to a .COM &amp;#91;iv&amp;#93; domain to resolve to the IP address of the adverse web server (from step 4).&amp;nbsp; <li>Open the web browser from step 2 and navigate to any .COM domain.&amp;nbsp;</li></li></li></li></li></li></li>
  </ol>
  <p>Expected Result:&amp;nbsp; If the test fails, the web browser displays the content from the adversary's web server for any .COM domain entered in the web browser.&amp;nbsp; If the intended website loads, rather than the adversary's content, then this test has passed.</p>
  <h2>Testing a DNS server against DNS Forgery</h2>
  <ol>
    <li>Select the target DNS server.<li>Set up a web client (browser) to uses the target DNS resolver.<li>Set up an adverse/attacker controlled DNS server.<li>Set up an adverse/attacker controlled web server.<li>Execute Man-in-the-Middle attack and intercept a DNS request from the client to the server.<li>Start a DNS birthday attack &amp;#91;v&amp;#93; against the server to predict a valid DNS request ID.<li>Send a response to the client with a valid request ID but mapping all .COM domains to the IP address of the adverse web server (from step 4).<li>Open the web browser from step 2 and navigate to any .COM domain.</li></li></li></li></li></li></li></li>
  </ol>
  <p>Expected Result:&amp;nbsp; If the test fails, the web browser displays the content from the adversary's web server for any .COM domain entered in the web browser.&amp;nbsp; If the intended website loads, rather than the adversary's content, then this test has passed.</p>
  <p>&amp;nbsp;&amp;nbsp;</p>
  <h1>Step 4:&amp;nbsp; Tune Test Cases</h1>
  <p>Now that you're done with the basic DNS poisoning tests, let's look at some example attacker controlled DNS responses. </p>
  <p>The following response redirects the victim domain name server (ns.teammentorexample.com) to the attacker's IP (w.x.y.z):</p>
  <blockquote>
    <pre>Answer:</pre>
    <pre>(no response)</pre>
    <pre>Authority section:</pre>
    <pre>example.com. 3600 IN NS ns.bankingsite.com.</pre>
  </blockquote>
  <blockquote>
    <pre>Additional section:</pre>
    <pre>ns.teammentorexample.com. IN A w.x.y.z</pre>
  </blockquote>
  <pre>&amp;nbsp;</pre>
  <p>The following response redirects the Name Server records for the victim site (<i>banking.com</i>) to another target domain (<i>ns.example.com</i>):</p>
  <blockquote>
    <pre>Answer:</pre>
    <pre>(no response)</pre>
    <pre>Authority section:</pre>
    <pre>teammentorexample.com. 3600 IN NS ns.example.com.&amp;nbsp;</pre>
    <pre>Additional section:</pre>
    <pre>ns.example.com. IN A w.x.y.z</pre>
  </blockquote>
  <p>The following response directs the Name Server records of all .COM domains to the attacker's IP:</p>
  <blockquote>
    <pre>Answer:</pre>
    <pre>www.example.com: type A, class inet, addr w.x.y.z</pre>
    <pre>Additional records:</pre>
    <pre>com: type A, class inet, addr w.x.y.z</pre>
  </blockquote>
  <pre>&amp;nbsp;</pre>
  <p>These are only a select few variations of DNS cache poisoning attacks.&amp;nbsp; There are different kinds of DNS attack techniques surfacing the Internet on a regular basis.&amp;nbsp; Make sure to keep up to date with the latest testing and prevention methods.</p>
  <h1>Conclusions</h1>
  <p>DNS Poisoning is a serious issue that can have a devastating effect.&amp;nbsp; If you are in charge of deploying and administering DNS servers, then you must make sure that they are not vulnerable to this class of attack.&amp;nbsp; This article describes the two most common DNS poisoning scenarios, what causes them, and how to prevent them.&amp;nbsp; The last two steps guide you in testing for DNS poisoning vulnerabilities present in your current implementation.&amp;nbsp; </p>
  <div>
    <br />
    <hr />
    <div>
      <p>&amp;#91;i&amp;#93;&amp;nbsp;&amp;nbsp;DNS Cache Poisoning. Wikipedia. <a href="http://en.wikipedia.org/wiki/DNS_cache_poisoning">http://en.wikipedia.org/wiki/DNS_cache_poisoning</a></p>
      <p>&amp;#91;ii&amp;#93;&amp;nbsp;&amp;nbsp; DNS Cache Poisoning - The Next Generation. &amp;nbsp;Joe Stewart. <a href="http://www.lurhq.com/dnscache.pdf">http://www.lurhq.com/dnscache.pdf</a></p>
    </div>
    <div>
      <p>&amp;#91;iii&amp;#93;&amp;nbsp;&amp;nbsp; DNSSEC Survey Results. <a href="http://www.ccnso.icann.org/surveys/dnssec-survey-report-2007.pdf">http://www.ccnso.icann.org/surveys/dnssec-survey-report-2007.pdf</a></p>
    </div>
    <div>
      <p>&amp;#91;iv&amp;#93;&amp;nbsp;&amp;nbsp; March 2005 DNS Poisoning Summary. Kyle Haugness. <a href="http://isc.sans.org/presentations/dnspoisoning.html">http://isc.sans.org/presentations/dnspoisoning.html</a></p>
    </div>
    <div>
      <p>&amp;#91;v&amp;#93;&amp;nbsp;&amp;nbsp; Bind 9 DNS Cache Poisoning. SecuriTeam. <a href="http://www.securiteam.com/securitynews/5VP0L0UM0A.html">http://www.securiteam.com/securitynews/5VP0L0UM0A.html</a></p>
    </div>
    <div>
      <p>&amp;nbsp;</p>
    </div>
  </div>
  <div>
    <hr />
  </div>]]></Data>
  </Content>
</TeamMentor_Article>