<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="411293285" Content_Hash="-374261713">
  <Metadata>
    <Id>4be361f4-77da-4ea2-935e-340a3b2d8447</Id>
    <Id_History>0c6d45f6-4ae8-4e59-81e1-6c3004030e66,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>How to Use PermCalc To Calculate Permissions</Title>
    <Category>Code Access Security</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>How To</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>Description</h1>
  <p>You use the permission calculator tool (also known as the minimum grant set determination tool) to calculate the code access security permissions that callers must be granted to access the public entry points of an assembly. To use Permcalc.exe, specify the assembly name to analyze together with any dependent assemblies. </p>
  <p>The following command reports the minimum permissions that the Myapp.exe application needs to run. It displays the output in the default viewer for XML files. The target file is Myapp.exe, and the dependent files are Mydep1.dll and Mydep2.dll. </p>
  <pre>Permcalc.exe -sandbox -show myapp.exe mydep1.dll mydep2.dll </pre>
  <p>The <b>-sandbox </b>switch reports the minimum-permission sandbox in which an application can run instead of the permissions required by callers of the assembly's entry points. The <b>-show</b> switch displays the output file when the calculations are complete. </p>
  <p>The following command reconstructs all cache files and includes call stacks for the Mylib.dll assembly. It displays the output in the default viewer for XML files. </p>
  <pre>Permcalc.exe -cleancache -stacks -show mylib.dll </pre>
  <p>In situations where exact permission values cannot be determined, the default behavior of the tool is to overestimate by using an unrestricted permission state. The following options can be helpful in such situations. Use the <b>-Internet</b> switch to cause the Internet zone permissions to be used as an estimate. Use the <b>-Under</b> switch to override default behavior and to force an underestimation of the permissions. </p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Security Practices: .NET Framework 2.0 Security Practices at a Glance" at <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnpag2/html/PAGPractices0002.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnpag2/html/PAGPractices0002.asp</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>