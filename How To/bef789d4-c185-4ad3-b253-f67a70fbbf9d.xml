<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1643413926" Content_Hash="-403740329">
  <Metadata>
    <Id>bef789d4-c185-4ad3-b253-f67a70fbbf9d</Id>
    <Id_History>bef789d4-c185-4ad3-b253-f67a70fbbf9d,18bc784b-1bd6-4236-9ba7-244a442ac70e,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>How to Test for URL Redirection Bugs</Title>
    <Category>Testing</Category>
    <Phase>Test</Phase>
    <Technology>Web Application</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for URL Redirection Bugs</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>Applies to</span>
  </h1>
  <p>
    <b>
      <span>
      </span>
    </b>
  </p>
  <ul>
    <li>Web Applications</li>
  </ul>
  <p>
    <b>
      <span>
      </span>
    </b>
  </p>
  <h1>
    <span>Summary</span>
    <span>
    </span>
  </h1>
  <p>
    <span>Web applications use URL redirection to redirect their web clients to another URL address, most commonly in another domain.<span>&amp;nbsp; </span><span>&amp;nbsp;&amp;nbsp;</span>In most cases, applications hide URL redirection from their clients, such as when using a redirect page.<span>&amp;nbsp; </span>However, sometimes applications expose URL redirecting to their clients such as when using a URL parameter to specify the target URL location.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>URL redirection attacks consist of exploiting URL redirection done through URL parameters for malicious purposes.<span>&amp;nbsp;&amp;nbsp; </span>To execute this attack, an attacker creates a malicious link that attempts to redirect towards a malicious site any web client who follows it.&amp;nbsp;</span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>Follow these steps to test for URL redirection bugs:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <ul>
    <li>Step 1: Understand attack scenarios<li>Step 2: Analyze causes and countermeasures<li>Step 3: Start testing and exploring<li>Step 4: Fine-tune test case data</li></li></li></li>
  </ul>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>
      <span>&amp;nbsp;</span>
    </span>
  </p>
  <h1>
    <span>Step 1: Understand Attack Scenarios</span>
  </h1>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>First, it is necessary to understand the anatomy of URL redirection bugs.<span>&amp;nbsp; </span>During a URL redirection attack the attacker&amp;#8217;s main goal is to redirect a target web client to a malicious site.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>This is achieved by sending a link to the web client that starts with the application domain name but contains a URL parameter.<span>&amp;nbsp; </span>When the client clicks the link, the client&amp;#8217;s browser is first directed to the vulnerable application which in turn redirects the client to the malicious location indicated by the URL parameter.<span>&amp;nbsp;&amp;nbsp; </span>For the attack to succeed two conditions must be met: first, an attacker must find a vulnerable application that redirects its clients to a location indicated by a URL parameter, and, second, the target web client must click on the malicious link.</span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>In detail:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <ol>
    <li>
      <span>The attacker finds a URL in the target web application that redirects web clients to a page dictated by a URL parameter (or through a special control character such as a question mark or asterisk).</span>
      <li>
        <span>The attacker sends a link to a target web client with the legitimate URL (found in step 1), but the attacker modifies the destination page to one of the attacker&amp;#8217;s choice.</span>
        <li>
          <span>The target client clicks on the malicious link.<span>&amp;nbsp; </span>This causes the target client&amp;#8217;s web browser to be redirected to the malicious page set by the attacker.</span>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 2: Analyze Causes and Countermeasures</span>
  </h1>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>Next, you must understand what causes URL redirection bugs and how to defend against them.<span>&amp;nbsp; </span>This will help you identify this issue in source code and prepare to execute the test cases.</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>Web applications use URL redirection for different purposes.<span>&amp;nbsp;&amp;nbsp; </span>For instance, an application that has a page moved to a different location uses a redirect to send its clients to the new page location.<span>&amp;nbsp;&amp;nbsp; </span>To achieve this automatically the application can use code that invokes methods such as <i>response.redirect</i> in PHP applications and internally control the redirection.<span>&amp;nbsp; </span>However, some applications expose the URL redirection logic to outside clients.<span>&amp;nbsp;&amp;nbsp; </span>For instance, an application might use a redirect page that takes a URL parameter as the redirect target location.<span>&amp;nbsp; </span>Consider the following URL:</span>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <span>http://example.com/navigate.php?redir=<strong>http://example.com/login.php</strong></span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>The web application uses the <i>redir </i>URL parameter to control the target redirect location.<span>&amp;nbsp; </span>An attacker can leverage this fact to trick a web client who trusts <i>example.com</i> into clicking the following link:</span>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <span>http://example.com/navigate.php?redir=<span><strong>http://attackers.com/gotcha.php</strong></span></span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>If the application is vulnerable it redirects the client who clicks the link above to the attacker&amp;#8217;s domain.<span>&amp;nbsp; </span>Note that the attack is possible because the application exposes the URL redirection logic to web clients through the URL and because it doesn&amp;#8217;t check the contents of the redirection target before doing the actual redirect, allowing the target to be modified towards a malicious website.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>To defend against this bug developers such hide any URL redirection control from outside clients.<span>&amp;nbsp; </span>If they must expose URL redirection through URL parameters, then applications must properly validate any redirect target before performing the redirect.<span>&amp;nbsp;&amp;nbsp; </span>Developers should implement a white list containing all the allowed redirect target locations and add relevant code to the application that disallows redirects to any location that is not in the white list.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;</span></span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>Another option to protect against this attack is to warn clients that they will be redirected to an arbitrary location and give them the option not to do so.<span>&amp;nbsp; </span>This is the technique currently used by Yahoo to countermeasure URL redirection attacks &amp;#91;i&amp;#93;.<span>&amp;nbsp;&amp;nbsp; </span>When clicking the link below the browser is directed to a Yahoo page that warns clients that they can navigate to the destination at their own risk:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <p />
  <span>
    <a href="http://us.ard.yahoo.com/&amp;#42;http://google.com">http://us.ard.yahoo.com/&amp;#42;<span>http://google.com</span></a>&amp;nbsp;<p /><h1><span>Step 3: Start Testing and Exploring</span></h1><p><span></span></p><p><span>Now that you&amp;#8217;ve reviewed the theoretical aspects of URL redirection attacks you should follow the next test case to check for it in your application.</span><span>&amp;nbsp;</span></p><h2><span><em>Test for URL redirection </em></span></h2><p><b><i><span></span></i></b></p><p><span>Follow these steps to test for URL redirection:</span></p><p><b><i><span></span></i></b></p><ol><li>Discover an application&amp;#8217;s page/request that executes URL redirection.<span>&amp;nbsp; </span>Note down the URL that is used during the redirection request.<span>&amp;nbsp; </span>It is suggested to analyze the application&amp;#8217;s use of URLs to find any embedded URLs; any URL contained within another URL is a hint of URL redirection.<li>Once you&amp;#8217;ve found a suspicious URL, discover what part of this URL the application uses to pass the target redirect location.<span>&amp;nbsp; </span><span>&amp;nbsp;</span>The application can pass the target URL in a named URL parameter:&amp;nbsp;</li></li></ol><ul><ul><li><span>http://domain/navigate.php?redir=<strong>http://example.com/login.php</strong></span></li></ul></ul><p><b><span></span></b></p><p>Or by appending it after a special character such as a question mark or an asterisk (another symbols may be used);&amp;nbsp;</p><ul><ul><li><span>http://domain/navigate.php<strong>?http://example.com/login.php</strong></span></li></ul></ul><p><span></span></p><p><span><span>3.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span></span>Modify the target redirect URL to a different URL such as (www.google.com) and make the request using a web browser:</p><ul><ul><li><span>http://domain/navigate.php?http://www.google.com</span></li></ul></ul><p><span>&amp;nbsp;</span></p><p><span>Expected results: The application is vulnerable to URL redirection attacks if it redirects the web browser to the target URL modified in step 3 without giving any warnings. </span></p><p><span>&amp;nbsp;</span></p><p><span></span></p><h1><span>Step 4: <span>&amp;nbsp;</span>Fine-tune Test Case Data</span></h1><p><span></span></p><p><span>URL redirection attacks require the target client to click on a malicious link.<span>&amp;nbsp; </span>However, Internet clients might feel uneasy to click in a link if they notice that part of the link is not a trusted one.<span>&amp;nbsp; </span>Therefore, an application that allows an attacker to pad or obfuscate the target URL has n increased the risk of a URL redirection attack on Internet clients.<span>&amp;nbsp; </span>Consider the following three URL links:</span></p><p><span></span></p><pre><span><span>(1)</span></span><span>http://trusted_domain/nav.php?redir=http://attacker.com<span>/run.php</span></span><span>&amp;nbsp;</span></pre><pre><span><span>(2)</span></span><span>http://trusted_domain/nav.php?redir=http://attacker.com/run.php</span></pre><pre><span><span>(3)</span></span><span>http://trusted_domain/nav.php?redir=http://64.214.88.103/run.php</span></pre><p><span>Note that this list is not exhaustive and it is necessary to keep up to date with different URL padding/masquerading methods.</span></p><p><b><span>&amp;nbsp;</span></b></p><p><span>The first URL can be quite suspicious to clients if they see it in the browser&amp;#8217;s status bar.<span>&amp;nbsp; </span>The second URL is padded with underscore characters in an attempt to hide the target URL in the browser&amp;#8217;s status bar.<span>&amp;nbsp; </span>The third URL is obfuscated by using the attacker&amp;#8217;s domain IP address instead of the domain name.<span>&amp;nbsp;&amp;nbsp; </span>The last two URLs are less suspicious than the first one and increase the exploitability of URL redirection bugs.<span>&amp;nbsp; </span>Note, however, that the last two URLs only work in applications that don&amp;#8217;t filter padding characters and IP addresses. </span></p><p><span>&amp;nbsp;</span></p><p><span></span></p><h1><span>Conclusions</span><span>&amp;nbsp;</span></h1><p><span>Attackers use URL redirection attacks to trick web clients into visiting a malicious site for phishing or spoofing purposes or to redirect a target client to a page containing malware that automatically attempts to infect the client&amp;#8217;s computer.<span>&amp;nbsp;&amp;nbsp; </span>Even though URL redirection is a valid and convenient method for redirecting web clients to legitimate locations, such as when a web page is moved or deleted or when a site changes domain names; it is dangerous when the application exposes URL redirection to web clients and allows redirection to an arbitrary domain.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>To test for this vulnerability you must find a request that does a redirect based on the URL and modify the URL using the methods suggested.<span>&amp;nbsp; </span>Finally, you must fine-tune the test cases using URL padding and obfuscation to increase the exploitability of this bug. </span></p><p><span><span></span></span>&amp;nbsp;</p><div><br /><hr /><div><p>&amp;#91;i&amp;#93; <b><span>URL Redirection Attack with Examples</span></b><span>. Paralliverse. </span><span><a href="http://log0.wordpress.com/2008/06/23/url-redirection-attack-with-examples/"><span>http://log0.wordpress.com/2008/06/23/url-redirection-attack-with-examples/</span></a></span><span></span></p><p><span>&amp;nbsp;</span></p><p><span>&amp;nbsp;</span></p></div></div></span>]]></Data>
  </Content>
</TeamMentor_Article>