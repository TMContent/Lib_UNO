<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2018238259" Content_Hash="-258022714">
  <Metadata>
    <Id>5c4dfb15-1b53-485b-b6d2-903acf3bfe0e</Id>
    <Id_History>101cc47a-6e34-46e3-be49-6cca11d3d9c6,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>How to Test for Integer Overflows in ASP.NET</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Test</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>How To</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET applications and services</li>
  </ul>
  <p>&nbsp;</p>
  <h1>Summary</h1>
  <p>In an integer overflow attack, an attacker exploits an unchecked arithmetic condition that leads the application to try &nbsp;to store a result in an integer variable that is larger than the maximum integer value. When this happens, the integer variable:</p>
  <ul>
    <li>wraps up to a small integer value, in the case of unsigned integers<li>wraps up to a negative integer value, in the case of signed integers</li></li>
  </ul>
  <p>Either way, the target integer variable ends up holding an incorrect value. In ASP.NET, attackers can use integer overflow bugs to execute logical attacks on the application. </p>
  <p>Follow these steps to test for integer overflow bugs in ASP.NET:</p>
  <ul>
    <li>Step 1: Understand attack scenarios<li>Step 2: Analyze causes and countermeasures<li>Step 3: Start testing and exploring<li>Step 4: Execute additional testing</li></li></li></li>
  </ul>
  <p>&nbsp;</p>
  <h1>Step 1: Understand Attack Scenarios</h1>
  <p>First, it is necessary to understand the different integer overflow attack scenarios in ASP.NET. Attackers commonly use integer overflows to execute buffer overrun or denial-of-service (DoS) attacks in applications written in unmanaged code such as C/C&#43;&#43;. However, it is a mistake to assume that applications written in managed code, including ASP.NET, are not vulnerable. </p>
  <p>In managed code, attackers use integer overflow conditions to alter the logic of an application and to force it to execute a logical path that benefits the attacker. This attack occurs when the application chooses an execution path based on the value of an integer operation, in which at least one of the integers is user-accessible. An attack that passes a large enough integer value might overflow the integer operation and store an incorrect integer value in the variable used by the application to determine its execution path. A logical attack in which the application executes an unintended path can have mild to severe consequences, such as an application giving a the attacker a special offer or, even worse, depositing an incorrect amount of money in a bank account or allowing the attacker to bypass a security check. </p>
  <p>For instance, the following code calculates a customer&#8217;s charge based on an integer provided in an URL:</p>
  <pre>http://example.com/example.aspx?items=50</pre>
  <p>The function below calculates the actual amount to be withdrawn from the customer&#8217;s account:</p>
  <pre>protected void CalculateCharge()<br />&#123;<br />&#9;const int itemPrice = 50;<br />&#9;int numberOfItems = Convert.ToInt32(Request.QueryString&#91;"items"&#93;);<br />&nbsp;&#9;<br />&#9;if (numberOfItems &gt; 0)<br />&#9;&#123;<br />&#9;&#9;int balance = itemPrice &#42; numberOfItems; <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#9;&#125;<br />&nbsp;<br />&#9;Response.Write("The customer account will be charged " &#43; balance);<br />&#125;&nbsp;</pre>
  <p>If a client passes a normal number of items, such as 50, the balance is less than the maximum 32-bit signed integer (2147483647) and is correctly calculated:&nbsp; </p>
  <p />
  <pre>http://example.com/example.aspx?items=50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (input)&nbsp;</pre>
  <pre>The customer account will be charged 2500&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (output)</pre>
  <p>&nbsp;However, an attacker can use the <i>items</i> parameter to pass a large integer, with the goal of overflowing the <i>balance</i> variable.&nbsp; As a result, the balance calculated exceeds the maximum integer and wraps to a negative value:</p>
  <p />
  <pre>http://example.com/example.aspx?items=<strong>42949673</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (input)&nbsp;</pre>
  <pre>The customer account will be charged -2147483646&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (output)</pre>
  <p />
  <p>This can result in the application attempting to make a huge deposit into the attacker&#8217;s bank account.</p>
  <p>&nbsp;</p>
  <h1>Step 2: Analyze causes and countermeasures</h1>
  <p>Next, before executing practical test cases, it is necessary to understand what causes integer overflows in ASP.NET and how to protect against them.</p>
  <p>Integer overflows happen when an ASP.NET application or service uses a client-supplied value in an integer operation without checking the input against the upper boundaries of the operation.&nbsp; For instance, in the scenario above the application calculates the balance by obtaining &nbsp;the value of <i>numberOfItems</i> from a URL parameter.</p>
  <pre>int balance = itemPrice &#42; numberOfItems; </pre>
  <p />
  <p>The application checks the input against a negative value, but doesn&#8217;t check it against an upper boundary. As a result, the attacker can pass an exceedingly large number such as 42949673. Visual Basic checks for integer overflows by default and, unless developers remove this check for performance reasons, it is not vulnerable to this bug. C#, on the contrary, doesn&#8217;t check for arithmetic overflows by default, so it is necessary for developers to take the appropriate preventive measures.</p>
  <p>The fist method of preventing C# integer overflows is to check input integer values against a reasonable maximum. For instance, the code above could be corrected like this:</p>
  <pre>if ((numberOfItems &gt; 0)&nbsp; && (numberOfItems &lt; 5000)<br />&#123;<br />&#9;int balance = itemPrice &#42; numberOfItems;</pre>
  <pre>&#125;</pre>
  <p>Additionally, C# developers can use the <i>checked/unchecked</i> statements similar to those in C/C&#43;&#43; in order to check for arithmetic overflows both at run time and at compile time. <i>The checked</i> statement becomes very &nbsp;handy when dealing with the attack shown above:</p>
  <pre>int balance = checked(itemPrice &#42; numberOfItems);</pre>
  <p>For more information about using this mitigation, refer to <i>Code Project&#8217;s</i><i>&nbsp;Arithmetic Overflow Checking using checked/unchecked</i> article, at (<a href="http://www.codeproject.com/KB/cs/overflow_checking.aspx">http://www.codeproject.com/KB/cs/overflow_checking.aspx</a>)</p>
  <p>
    <b>
    </b>&nbsp;</p>
  <h1>Step 3: Start Testing and Exploring</h1>
  <p>Now that you understand the attack scenarios for ASP.NET integer overflows as well as what causes them and how to protect against them, it is necessary to continue by executing test cases and observing their behavior in your ASP.NET application or service.</p>
  <p>Follow these steps to test for integer overflows:</p>
  <ol>
    <li>Identify an input variable that takes an integer variable.<li>Submit a small integer such as 50.<li>Check how the application reacts.<li>Submit a large integer value (see Table 1 below).<li>Check how the application reacts.</li></li></li></li></li>
  </ol>
  <p>Expected results: If the application is vulnerable to an integer overflow, how the application reacts in steps 3 and 5 will be different because the application will execute a different logic when using a large integer value. </p>
  <p>&nbsp;</p>
  <table>
    <tbody>
      <tr>
        <td>
          <pre>Data type</pre>
        </td>
        <td>
          <pre>Maximum Value</pre>
        </td>
      </tr>
      <tr>
        <td>
          <pre>Int</pre>
        </td>
        <td>
          <pre>2147483647</pre>
        </td>
      </tr>
      <tr>
        <td>
          <pre>int16</pre>
        </td>
        <td>
          <pre>32767</pre>
        </td>
      </tr>
      <tr>
        <td>
          <pre>uint</pre>
        </td>
        <td>
          <pre>4294967295</pre>
        </td>
      </tr>
      <tr>
        <td>
          <pre>uint16</pre>
        </td>
        <td>
          <pre>65535</pre>
        </td>
      </tr>
      <tr>
        <td>
          <pre>short</pre>
        </td>
        <td>
          <pre>32767</pre>
        </td>
      </tr>
      <tr>
        <td>
          <pre>ushort</pre>
        </td>
        <td>
          <pre>65535</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>
    <b>Table 1 - Maximum integer values for integer-related types in ASP.NET</b>
  </p>
  <p>&nbsp;</p>
  <h1>Step 4: Execute Additional Testing</h1>
  <p>The final step in testing for integer overflows is to execute additional testing based on variations of the attack scenarios.</p>
  <p>An application might take a client-supplied integer and multiply it by a negative number or subtract it from an accumulated number. Consider the following code:</p>
  <pre>const int points = 5000;<br />int penalized = Convert.ToInt32(Request.QueryString&#91;"penalized"&#93;);<br />&nbsp;<br />int pointsPenalized = 10 &#42; penalized;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br />int totalPoints = points - pointsPenalized; <br />&nbsp;<br />Response.Write("The player's total points are: " &#43; totalPoints);</pre>
  <p>An attacker can pass a large integer number in the <i>penalized</i> parameter in an attempt to change the total number of points penalized to a negative integer; if the attack is successful, the application will add the points penalized instead of subtracting them. For example, the URL below subtracts 200 penalty points from the 5000 that the player actually has:</p>
  <pre>http://example.com/example.aspx?penalized=2</pre>
  <pre>The player's total points are:&nbsp; 4800</pre>
  <p>However, exploiting the integer overflow bug results in adding points to the player:</p>
  <pre>http://example.com/example.aspx?penalized=214748364</pre>
  <pre>The player's total points are:&nbsp; 5080</pre>
  <p>&nbsp;</p>
  <h1>Conclusions</h1>
  <p>Attackers exploit integer overflow bugs to execute logical attacks in ASP.NET applications. To test for them, it is first necessary to understand their attack scenarios as well what causes them and how to protect against them. Then, while observing how the application reacts, you must look for any input variable that takes a numeric value and execute test cases using &nbsp;exceedingly large positive and negative values.</p>
  <p>
    <b>&nbsp;</b>
  </p>
  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>]]></Data>
  </Content>
</TeamMentor_Article>