<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-482698175" Content_Hash="-725105053">
  <Metadata>
    <Id>9409008f-579a-4f34-9111-0e5a272dfbc5</Id>
    <Id_History>a9c4ec8c-0780-4697-af14-9998e7e1b961,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>How to Choose The Appropriate Key Size</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>How To</Type>
    <DirectLink>How to Choose The Appropriate Key Size</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>Description</h1>
  <p>When generating an encryption key or key pair, use the largest key size that the algorithm supports. This does not necessarily make the algorithm more secure, but it dramatically increases the time needed to successfully perform a brute force attack on the key. The following code example shows how to find the largest supported key size for a particular algorithm. </p>
  <pre>private int GetLargestSymKeySize(SymmetricAlgorithm symAlg)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; KeySizes[] sizes = symAlg.LegalKeySizes;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return sizes[sizes.Length - 1].MaxSize;<br />}<br />private int GetLargestAsymKeySize(AsymmetricAlgorithm asymAlg)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; KeySizes[] sizes = asymAlg.LegalKeySizes;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return sizes[sizes.Length - 1].MaxSize;<br />}</pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>