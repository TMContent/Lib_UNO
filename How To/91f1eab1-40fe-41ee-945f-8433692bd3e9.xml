<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1677238023" Content_Hash="766566814">
  <Metadata>
    <Id>91f1eab1-40fe-41ee-945f-8433692bd3e9</Id>
    <Id_History>91f1eab1-40fe-41ee-945f-8433692bd3e9,6eae128e-179e-4cd3-985a-bdaca72645ed,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>How to Validate Messages with Message Inspectors Using Schemas</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>WCF</Technology>
    <Type>How To</Type>
    <DirectLink>How to Validate Messages with Message Inspectors Using Schemas</DirectLink>
    <Tag>WCF 3.5</Tag>
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>Microsoft® Windows Communication Foundation (WCF) 3.5 
<li>Microsoft Visual Studio® 2008</li></li>
  </ul>
  <h1>Description</h1>
  <p>Use the followings steps to validate using message inspectors and schemas:</p>
  <ol>
    <li>Create a Class That Implements the Validation Logic. This class has to derive from <strong>IClientMessageInspector</strong>,<strong>IDispatchMessageInspector</strong> depending if you want to do client side and / or server side validation. This calls implements&nbsp;<strong>AftterReceiveRequest(),BeforeSendReply(),</strong><strong>BeforeSendRequest()</strong>&nbsp;and <strong>AfterReceiveReply()</strong>&nbsp;methods.&nbsp; This class has the following characteristics
<ul><li>On the dispatcher:&nbsp; AfterReceiveRequest will happen when inbound messages are received by the dispatcher, before the operation is invoked and deserialization of messages has occurred. If message is encrypted, decryption will take place first. BeforeSendReply will happen when outbound messages are to be sent back to the client. It will happen after operation is invoked, and after serialization has occurred. If message is encrypted, encryption will not take place.
<li>On the client: BeforeSendRequest will happen when outbound messages are sent by the client, after serialization has occurred. If message is encrypted, encryption will not take place. AfterReceiveReply will happen when inbound messages are received by the client before deserialization of message has occurred. If message is encrypted, decryption will take place first.</li></li></ul><li>Create a Class That Implements a Custom Endpoint Behavior. This class derives from IEndpointBehavior that the service and / or client endpoint will use as a configuration extensibility point for the endpoint. This class has the following characteristics
<ul><li>It implements <strong>ApplyClientBehavior()</strong> to add the <strong>ParamaterInspector</strong> to the client operation and enable client-side validation. 
<li>It implements <strong>ApplyDispatchBehavior()</strong> toadd the <strong>ParameterInspector</strong> to the dispatch operation and enable service-side validation. 
<li>It verifies that it is enabled in the configuration before adding the <strong>ParameterInspector</strong> to the client or dispatch run time.</li></li></li></ul><li>Create a Class That Implements a Custom Configuration Element. This class derives from <strong>BehaviorExtensionElement</strong>, This class allows to expose the endpoint configuration in WCF as a behavior element extension, that can be used by the service as an endpoint behavior configuration. This class has the&nbsp; e following characteristics:
<ul><li>It implements <strong>CreateBehavior()</strong> to create an instance of the <strong>ValidationBehavior</strong> class. 
<li>It implements <strong>BehaviorType()</strong> to return the <strong>ValidationBehavior</strong> type. This will allow the custom behavior to be exposed in the service or client configuration sections.</li></li></ul><li>Add the Custom Behavior to the Configuration File. You will add the custom behavior element to the behavior element extension items, so it can be used by the endpoint behavior. You add it in the configuration file with the configuration tool, by browsing to the assembly, and selecting the type that is your custom behavior type.
<li>Create an Endpoint Behavior and Map It to Use the Custom Behavior. You will create a endpoint behavior to use the custom behavior extensible point provided by your assembly implementing the message inspector
<li>Configure the Service Endpoint to Use the Endpoint Behavior. You will configure the endpoint to use the endpoint behavior that is using the message inspector.</li></li></li></li></li></li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see “Message Inspectors” at <a href="http://msdn.microsoft.com/en-us/library/aa717047.aspx">http://msdn.microsoft.com/en-us/library/aa717047.aspx</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>