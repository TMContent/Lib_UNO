<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1140538403" Content_Hash="-2120277188">
  <Metadata>
    <Id>cb173711-34a0-45a6-a622-9fdd81104548</Id>
    <Id_History>a17da61f-a523-4cdb-b638-7a1cdd822239,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>How to Use Declarative And Imperative Permission Requests</Title>
    <Category>Code Access Security</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>How To</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>Description</h1>
  <p>You can use declarative principal-permission demands on methods when you want to authorize access to those methods. The following attribute ensures that only users who are members of the Manager role can call the <b>GetCustomerDetails</b> method. </p>
  <pre>using System.Security.Permissions;using System.Threading;...<br />&#91;PrincipalPermissionAttribute(SecurityAction.Demand, Role="Manager")&#93;<br />public void GetCustomerDetails(int CustId)&#123;&#125;  </pre>
  <p>If you need more detailed control and you need to perform authorization within a method, then you can perform imperative principal-permission demands or explicit role checks on a block of code. The following code example shows how to perform an imperative principal-permission demand. </p>
  <pre>using System.Security;<br />using System.Security.Permissions;<br />public void GetCustomerDetails(int CustId)&#123;<br />    try<br />    &#123;<br />        // Imperative principal permission role check to verify<br />        // that the caller is a manager.<br />        PrincipalPermission principalPerm = new PrincipalPermission(null,<br />                                                 "Manager");<br />        principalPerm.Demand();<br />        // Code that follows is only executed if the caller is a<br />        // member of the "Manager" role.<br />    &#125;<br />    catch( SecurityException ex )<br />    &#123;<br />   . . .<br />    &#125;&#125;  </pre>
  <p>The following code example uses explicit role checks. </p>
  <pre>public void GetCustomerDetails(int CustId)&#123;<br />    if(&#33;Thread.CurrentPrincipal.IsInRole("Manager"))<br />    &#123;    . . .    &#125;&#125;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Security Practices: .NET Framework 2.0 Security Practices at a Glance" at <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnpag2/html/PAGPractices0002.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnpag2/html/PAGPractices0002.asp</a></li>
  </ul>
  <h1>&nbsp;</h1>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>