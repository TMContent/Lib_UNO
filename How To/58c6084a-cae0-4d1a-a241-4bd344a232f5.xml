<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1426004683" Content_Hash="-1821203979">
  <Metadata>
    <Id>58c6084a-cae0-4d1a-a241-4bd344a232f5</Id>
    <Id_History>58c6084a-cae0-4d1a-a241-4bd344a232f5,9a463c4e-7255-4e0e-9ffd-3eb063e8f1ed,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>How to Generate A Random Number</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>How To</Type>
    <DirectLink>How to Generate A Random Number</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Description</h1>
  <p>If you need to generate encryption keys programmatically, use the <b>RNGCryptoServiceProvider</b> class to create keys and initialization vectors and do not use the <b>Random</b> class. Unlike the <b>Random</b> class, <b>RNGCryptoServiceProvider</b> creates cryptographically strong random numbers that are FIPS-140 compliant. The following code example shows how to use this function. </p>
  <pre>
    <pre>using System.Security.Cryptography;<br />. . .<br />RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();<br />byte&amp;#91;&amp;#93; key = new byte&amp;#91;keySize&amp;#93;;rng.GetBytes(key);</pre>
  </pre>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>