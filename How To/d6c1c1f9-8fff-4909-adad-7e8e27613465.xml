<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1807806282" Content_Hash="-73127922">
  <Metadata>
    <Id>d6c1c1f9-8fff-4909-adad-7e8e27613465</Id>
    <Id_History>d6c1c1f9-8fff-4909-adad-7e8e27613465,ccf736d6-b0e4-41a0-b6bb-c40267424b42,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>[SINK] How to Choose The Right Cryptography Algorithm</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>How To</Type>
    <DirectLink>How to Choose The Right Cryptography Algorithm</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Description</h1>
  <p>You choose an algorithm based on your scenario and requirement. For example, if you require data confidentiality use an encryption algorithm. If you require data integrity use a hash-based message authentication code or a digital signature. You use hashing when you want to avoid storing a password and instead compare the hash value with a recalculated hash obtained from the user supplied password.&nbsp; </p>
  <p>Symmetric and asymmetric encryption are often used together. A symmetric encryption key is used as a session key to encrypt message data, and asymmetric encryption is used to encrypt the symmetric key and initialization vector prior to exchanging these values between two parties. </p>
  <p>Classes in the <b>System.Security.Cryptography</b> namespace provide support for symmetric encryption, asymmetric encryption, hashing, generating random numbers, and creating digital signatures. Use the following guidelines when you select a cryptographic algorithm: </p>
  <ul>
    <li>
      <p>
        <b>Symmetric encryption</b>. Use these to encrypt large streams of data. Use Rijndael (now referred to as Advanced Encryption Standard &#91;AES&#93;) or Triple Data Encryption Standard (3DES). </p>
      <li>
        <p>
          <b>Asymmetric or public/private key encryption</b>. The .NET Framework provides managed classes for Rivest, Shamir, Adleman (RSA), and Digital Signature Algorithm (DSA) asymmetric encryption. DSA can be used for digital signatures only. If interoperability is an issue, you need to find out what algorithms the other party you are interoperating with supports, and use those. If you are interested in both signing and encryption, select RSA. If you are concerned about performance, you should be aware that DSA is faster at key generation and RSA is faster at signature generation. Measure the performance of both approaches in your scenario. </p>
        <li>
          <p>
            <b>Hashing</b>. Use a hashing<b> algorithm </b>such as SHA256 when you need a principal to prove it knows a secret that it shares with you. The main drawback with using hashes for passwords is that they do not allow you to retrieve the password later, if needed. Use HMACSHA256 with Message Authentication Codes (MAC), which require you and the client to share a key. This can provide integrity checking and a degree of authentication.</p>
        </li>
      </li>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>