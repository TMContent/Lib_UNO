<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="830982668" Content_Hash="1403788136">
  <Metadata>
    <Id>34848215-0c1d-4797-9372-2cb6f0ead54a</Id>
    <Id_History>87654bc8-34ea-4a4c-b43e-106732f7364b,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>How to Test for HTTP Response Splitting Bugs</Title>
    <Category>Networking</Category>
    <Phase>Test</Phase>
    <Technology>Web Application</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for HTTP Response Splitting Bugs</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>Andres De Vivanco</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<p />
  <p>
    <span>
    </span>
  </p>
  <h1>
    <span>Applies to:</span>
  </h1>
  <p />
  <ul>
    <li>
      <span>Web applications and serviced developed in any web development platform such as ASP.NET, Java, PHP, etc.<b></b></span>
    </li>
  </ul>
  <p>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <h1>
    <span>Summary</span>
  </h1>
  <p>
    <span>HTTP response splitting bugs are a relatively new vulnerability class that allows an attacker to control the response of a vulnerable web server by splitting it and adding an additional response.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>Attackers use the additional response to perform different types of attacks such as cross user defacement, web cache poising, and cross site scripting (XSS).<span>&amp;nbsp; </span></span>
  </p>
  <p>
    <span>HTTP response splitting vulnerabilities involve three common parties: the attacker, the vulnerable web server, and the target.<span>&amp;nbsp; </span>The attacker uses the vulnerable server to carry the attack on the target.<span>&amp;nbsp; </span>The target is usually an Internet browser client (in cases of XSS and cross user defacement) or a cache server (in cases of cache poisoning).</span>
  </p>
  <p>
    <span>Follow these steps to test for HTTP response splitting bugs:</span>
  </p>
  <ul>
    <li>
      <span>Step 1:<span>&amp;nbsp; </span>Understand Attack Scenarios</span>
      <li>
        <span>Step 2:<span>&amp;nbsp; </span>Analyze Causes and Countermeasures</span>
        <li>
          <span>Step 3:<span>&amp;nbsp; </span>Start Testing and Exploring</span>
          <li>
            <span>Step 4:<span>&amp;nbsp; </span>Fine-tune Test Cases</span>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 1:<span>&amp;nbsp; </span>Understand Attack Scenarios</span>
  </h1>
  <p>
    <span>The first step in testing for HTTP response splitting vulnerabilities is to understand their attack scenarios.<span>&amp;nbsp; </span>There are two common scenarios to execute an HTTP response splitting attack:</span>
  </p>
  <ul>
    <li>
      <span>HTTP response splitting using redirect.</span>
      <li>
        <span>HTTP response splitting by exploiting header construction.</span>
      </li>
    </li>
  </ul>
  <p>
    <span>In addition, HTTP response splitting vulnerabilities can be used for any of the following payloads:</span>
  </p>
  <ul>
    <li>
      <span>Cross user defacement</span>
      <li>
        <span>Cross-site scripting (XSS)</span>
        <li>
          <span>Web cache poisoning</span>
          <li>
            <span>Page hijacking</span>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>
    </span>&amp;nbsp;</p>
  <h2>
    <span>
      <em>Scenario 1: HTTP response splitting using redirect</em>
    </span>
  </h2>
  <p>
    <span>The first and most popular response splitting attack targets an Internet client browser and uses a redirect to accomplish the attack.<span>&amp;nbsp; </span>In order to understand this scenario you must understand how a redirect works.<span>&amp;nbsp;&amp;nbsp; </span>A simple PHP redirect page (redirect.php) looks like this &amp;#91;&amp;#93;:</span>
  </p>
  <pre>
    <span>
      <br />&lt;?php<br />   &amp;nbsp;header ("Location: " . &amp;#36;_GET&amp;#91;'page'&amp;#93;);<br />?&gt;<br /></span>
  </pre>
  <p>
    <span>The following link redirects an Internet browser client to www.yahoo.com:</span>
  </p>
  <pre>
    <span>http://vulnsite.com/redirect.php?page=http://www.yahoo.com</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>When the client clicks on the link above, the browser sends the following request to the server:</span>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <span>GET <a href="http://vulnsite.com/redirect.php?page=http://www.yahoo.com">http://vulnsite.com/redirect.php?page=http://www.yahoo.com</a> HTTP/1.1<br />Host: vulnsite.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; es-ES; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14<br />Accept: text/xml,application/xml,application/xhtml&amp;#43;xml,text/html;q=0.9,text/plain;q=0.8,image/png,&amp;#42;/&amp;#42;;q=0.5<br />Accept-Language: es-es,es;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,&amp;#42;;q=0.7<br />Keep-Alive: 300<br />Proxy-Connection: keep-alive</span>
    <span>&amp;nbsp;</span>
  </pre>
  <p>
    <span>The redirect in the server responds with the following packet indicating the client that the resource has been moved:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <pre>
    <span>HTTP/1.1 302 Found<br />Date: Tue, 13 May 2008 20:22:28 GMT<br />Server: Apache/2.2.6 (Win32) PHP/5.2.5<br />X-Powered-By: PHP/5.2.5<br />Location: <strong>http://www.yahoo.com</strong></span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>The client then sends a request to the address specified by the Location header:</span>
  </p>
  <pre>
    <span>GET <strong>http://www.yahoo.com</strong>:80/ HTTP/1.1<br />Host: www.yahoo.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; es-ES; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14<br />Accept: text/xml,application/xml,application/xhtml&amp;#43;xml,text/html;q=0.9,text/plain;q=0.8,image/png,&amp;#42;/&amp;#42;;q=0.5<br />Accept-Language: es-es,es;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,&amp;#42;;q=0.7<br /></span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>During an HTTP response splitting attack the attacker sends a malicious link that will originate an additional response:</span>
  </p>
  <pre>
    <span>http://vulnsite.com/redirect.php?page=<span><strong>abc&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;200&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0aHTTP/1.1&amp;#37;20200&amp;#37;20OK&amp;#37;0d&amp;#37;0aContent-Type:&amp;#37;20text/html&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;2047&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0a&lt;html&gt;&lt;font&amp;#37;20color=red&gt;Attacked&amp;#33;&amp;#33;&amp;#33;&lt;/font&gt;&lt;/html&gt;</strong></span></span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>The injected data can also be written like this:</span>
  </p>
  <pre>
    <span>
      <strong>abc\r\n<br />Content-Type: text/html\r\n<br />\r\n<br />HTTP/1.1 200 OK\r\n<br />Content-Type: text/html\r\n<br />\r\n<br />&lt;html&gt;&lt;font color=red&gt;Attacked&amp;#33;&amp;#33;&amp;#33;&lt;/font&gt;&lt;/html&gt;<br /></strong>
    </span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>Now, when the client clicks on the malicious link above, the browser sends the following request to the server:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <pre>
    <span>GET http://vulnsite.com/redirect.php?page=<strong>abc&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;200&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0aHTTP/1.1&amp;#37;20200&amp;#37;20OK&amp;#37;0d&amp;#37;0aContent-Type:&amp;#37;20text/html&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;2047&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0a&lt;html&gt;&lt;font&amp;#37;20color=red&gt;Attacked&amp;#33;&amp;#33;&amp;#33;&lt;/font&gt;&lt;/html&gt;</strong><br />Host: vulnsite.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; es-ES; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14<br />Accept: text/xml,application/xml,application/xhtml&amp;#43;xml,text/html;q=0.9,text/plain;q=0.8,image/png,&amp;#42;/&amp;#42;;q=0.5<br />Accept-Language: es-es,es;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,&amp;#42;;q=0.7<br />Keep-Alive: 300<br />Proxy-Connection: keep-alive</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>The server responds with the following two packets instead of one.<span>&amp;nbsp; </span>The server responds like this because it parses the double </span>
    <span>CR/LF</span>
    <span> after the </span>
    <span>Content</span>
    <span>-</span>
    <span>Length</span>
    <span> into a separate packet:</span>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <span>HTTP/1.1 302 Found<br />Date: Tue, 13 May 2008 20:22:28 GMT<br />Server: Apache/2.2.6 (Win32) PHP/5.2.5<br />X-Powered-By: PHP/5.2.5<br />Location: <strong>abc<br />Content-Length: 0<br />&amp;nbsp;<br />HTTP/1.1 200 OK</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (separate packet)<br /><strong>Content-Type: text/html<br />Content-Length: 47</strong></span>
  </pre>
  <pre>
    <span>
      <strong>&lt;html&gt;&lt;font color=red&gt;Attacked&amp;#33;&amp;#33;&amp;#33;&lt;/font&gt;&lt;/html&gt;</strong>
    </span>
    <span>
    </span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
    <span>The target browser now displays a page that looks like this:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>Attacked&amp;#33;&amp;#33;&amp;#33;</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>The attacker can select more complex pages to use during the defacement such as a page that phishes for bank accounts or a cross-site scripting script that sends the victim&amp;#8217;s session cookie to an attacker&amp;#8217;s site.</span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h2>
    <em>
      <span>Scenario 2: </span>
      <span>HTTP response splitting by exploiting header construction</span>
    </em>
  </h2>
  <p>
    <span>During this scenario the attacker doesn&amp;#8217;t need a redirect page.<span>&amp;nbsp;&amp;nbsp; </span>Many applications build response headers such as </span>
    <span>Set-Cookie</span>
    <span> or </span>
    <span>Location </span>
    <span>by reading data from a temporary store such as a URL parameter or a permanent store such as database.<span>&amp;nbsp;&amp;nbsp; </span>For example the following Java code sets a cookie by reading an ID value from a database: </span>
  </p>
  <pre>
    <br />SqlCommand sqlComm = new SqlCommand("SELECT userid FROM users WHERE username LIKE " &amp;#43; Request.QueryString&amp;#91;"user"&amp;#93;, sqlConn);</pre>
  <pre>SqlDataReader sqlReader = sqlComm.ExecuteReader();</pre>
  <pre>string userid = sqlReader.GetString("userid");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />Cookie cookie = new Cookie("ID", userid);<br />response.addCookie(cookie);<br /><span>&amp;nbsp;</span></pre>
  <p>
    <span>If the user id has a normal value such as </span>
    <span>10-300-565</span>
    <span> the server sends a single response to the user.</span>
  </p>
  <pre>
    <span>HTTP/1.1 200 OK<br />...<br />Set-Cookie: id=10-300-565<br />... <br /></span>
  </pre>
  <pre>
    <span>
    </span>
  </pre>
  <p>
    <span>However, the attacker can force the server to send additional responses by adding a double</span>
    <span> CR/LF </span>
    <span>to the database record</span>
    <span>:</span>
    <span>
    </span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <pre>
    <span>10-300-565<span>0<strong>d&amp;#37;0a&amp;#37;0d&amp;#37;0aHTTP/1.1&amp;#37;20200&amp;#37;20OK&amp;#37;0d&amp;#37;0aContent-Type:&amp;#37;20text/html&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;2047&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0a&lt;html&gt;&lt;font&amp;#37;20color=red&gt;Attacked&amp;#33;&amp;#33;&amp;#33;&lt;/font&gt;&lt;/html&gt;</strong></span></span>
  </pre>
  <p>
    <span>Forcing the server to reply like this:</span>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <span>HTTP/1.1 200 OK<br />...<br />Set-Cookie: id=<strong>10-300-565<br />Content-Length: 0<br />&amp;nbsp;<br />HTTP/1.1 200 OK&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </strong>(separate packet)<br /><strong>Content-Type: text/html<br />Content-Length: 47<br />&amp;nbsp;<br />&lt;html&gt;&lt;font color=red&gt;Attacked&amp;#33;&amp;#33;&amp;#33;&lt;/font&gt;&lt;/html&gt;<br /></strong>&amp;nbsp;</span>
  </pre>
  <h2>
    <span>
      <em>Payload 1:<span>&amp;nbsp; </span>Phishing</em>
    </span>
  </h2>
  <p>
    <span>This payload is seen in the previous two scenarios and consists of sending an additional page to the victim.<span>&amp;nbsp; </span>The goal is trick victims into believing that the second response is legitimate and that they are safely browsing the original site.<span>&amp;nbsp; </span>The attacker then modifies the second response for specific phishing purposes such a retrieving a username and password or a bank account and PIN number.<span>&amp;nbsp; </span>The target browser parses the second response and it appears to the web client as if this response is coming from a legitimate server.<span>&amp;nbsp; </span>The attack data used for this payload shows a second page (as seen above):</span>
  </p>
  <pre>
    <strong>
      <span>0d&amp;#37;0a&amp;#37;0d&amp;#37;0aHTTP/1.1&amp;#37;20200&amp;#37;20OK&amp;#37;0d&amp;#37;0aContent-Type:&amp;#37;20text/html&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;2047&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0a&lt;html&gt;&lt;font&amp;#37;20color=red&gt;Attacked&amp;#33;&amp;#33;&amp;#33;&lt;/font&gt;&lt;/html&gt;</span>
    </strong>&amp;nbsp;</pre>
  <h2>
    <span>
      <em>Payload 2:<span>&amp;nbsp; </span>Cross site scripting</em>
    </span>
  </h2>
  <p>
    <span>In response splitting vulnerabilities the second response is absolutely controlled by the attacker.<span>&amp;nbsp; </span>The attacker can sent a split page with a script that executes in the context of victim.<span>&amp;nbsp; </span>This leads to a cross-site scripting attack (XSS).<span>&amp;nbsp; </span>The attack data may look like this:</span>
  </p>
  <pre>
    <span>
      <strong>0d&amp;#37;0a&amp;#37;0d&amp;#37;0aHTTP/1.1&amp;#37;20200&amp;#37;20OK&amp;#37;0d&amp;#37;0aContent-Type:&amp;#37;20text/html&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;2052&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0a&lt;html&gt;&lt;script&gt;alert('document.cookie')&lt;/script&gt;&lt;/html&gt;</strong>
    </span>
    <span>
    </span>
  </pre>
  <p>
    <span>The payload of this attack is relatively harmless, just an alert box. More advanced payloads would include sending session credentials to a site controlled by the attacker. </span>
  </p>
  <h2>
    <span>
      <em>Payload 3: Web cache poisoning</em>
    </span>
  </h2>
  <p>
    <span>This popular scenario doesn&amp;#8217;t target an Internet browser client; its targets are web cache servers.<span>&amp;nbsp;&amp;nbsp; </span>The attacker makes the first request through the web cache server and receives the two split packets.<span>&amp;nbsp;&amp;nbsp; </span>The attacker then sends a second request to any resource.<span>&amp;nbsp; </span>The cache server will match the second request with the split response (controlled by the attacker).<span>&amp;nbsp;&amp;nbsp; </span>This will propagate the attack to any users of the web cache server. The attack string manipulates cache-related headers:</span>
  </p>
  <pre>
    <span>
      <strong>http://vulnsite.com/redirect.php?page</strong>
      <span>
        <strong>=&amp;#37;0d&amp;#37;0aContent-Type: text/html&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0aHTTP/1.1 200 OK&amp;#37;0d&amp;#37;0aLast-Modified: Wed, 13 Jan 2010&amp;#37;0d&amp;#37;0aContent-Type: text/html&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0a&lt;html&gt;&lt;font color=red&gt;hey&lt;/font&gt;&lt;/html&gt; HTTP/1.</strong>1</span>
    </span>
  </pre>
  <p>
    <span>The scenario follows these steps:</span>
  </p>
  <ol>
    <li>
      <span>Attacker sends a request <i>A</i> to the web cache server that will be split by the vulnerable server (into <i>a1</i> and <i>a2</i>.</span>
      <li>
        <span>Cache server forwards this request <i>A</i> to the vulnerable server.</span>
        <li>
          <span>Vulnerable server sends two responses to cache server: first <i>a1 </i>and then <i>a2</i>.</span>
          <li>
            <span>Cache server adds entry in the cache associating resource <i>A</i> to <i>a1</i>.</span>
            <li>
              <span>Attacker sends a request <i>B</i> to the web cache server.</span>
              <li>
                <span>Cache server adds entry in the cache associating resource <i>B</i> to <i>a2</i>.</span>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Since the attacker fully controls <i>a2, </i>he can poison resource <i>B</i> in the cache with anything.</span>
  </p>
  <p>
    <span>Setting the </span>
    <span>Last-Modified</span>
    <span>
    </span>
    <span>header to a future date makes the cache server return the attacker&amp;#8217;s page instead of contacting the origin server to request the page from its valid domain.<span>&amp;nbsp; </span>The attacker can also use the </span>
    <span>Cache-Control </span>
    <span>or the </span>
    <span>Pragma</span>
    <span> header to control how a cache server handles responses and updates its records.</span>
  </p>
  <h2>
    <span>
      <em>Payload 4: Page Hijacking</em>
    </span>
  </h2>
  <p>
    <span>This attack is achieved through a proxy server.<span>&amp;nbsp; </span>The attacker needs to pay extra attention to timing since it needs to make a request at the correct time to get back a response that was previously made by a legitimate user.<span>&amp;nbsp; </span>The scenario follows these specific steps &amp;#91;ii&amp;#93;:</span>
  </p>
  <ol>
    <li>
      <span>Attacker sends a request to the proxy server <i>A</i> that will be split by the vulnerable web server (into <i>a1</i> and <i>a2</i>).</span>
      <li>
        <span>Proxy server forwards this request <i>A</i> to the vulnerable server.</span>
        <li>
          <span>Vulnerable server sends two responses: first <i>a1 </i>and then <i>a2</i>.</span>
          <li>
            <span>Proxy server forwards <i>a1 </i>it to the attacker and keeps <i>a2</i>.</span>
            <li>
              <span>Victim client sends a request <i>B</i> for a confidential page to the web server through the proxy.</span>
              <li>
                <span>Proxy forwards <i>B</i> to the web server.</span>
                <li>
                  <span>Proxy sends the second response from the server <i>a2 </i>to the victim client (instead of the response <i>b</i>).</span>
                  <li>
                    <span>Proxy receives response <i>b </i>from the web server.</span>
                    <li>
                      <span>Attacker sends a request <i>C</i> to the web server over the proxy.</span>
                      <li>
                        <span>Proxy server sends the response <i>b</i> to the attacker (instead of the response <i>c</i>).</span>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Since the attacker was able to insert an unexpected response to the communication flow, the proxy server gets sends the response <i>b</i> containing confidential data to the wrong client (the attacker).<span>&amp;nbsp; </span></span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 2:<span>&amp;nbsp; </span>Analyze Causes and Countermeasures</span>
  </h1>
  <p>
    <span>The next step is to comprehend what causes HTTP response splitting vulnerabilities and how to defend against them.<span>&amp;nbsp;&amp;nbsp; </span>This knowledge will aid you in recognizing this attack class in the source codebase and use best coding practices.</span>
  </p>
  <h2>
    <span>
      <em>HTTP Response Splitting Causes</em>
    </span>
  </h2>
  <p>
    <span>HTTP protocol specifications indicate that each header is separated by a carriage return character (CR, ASCII 0x0D) followed by a line feed character (LF, ASCII 0x0A) represented as the string </span>
    <span>CR/LF</span>
    <span>.<span>&amp;nbsp; </span>In addition, the response headers are separated by the body by two (</span>
    <span>CR/LF/CR/LF). </span>
  </p>
  <p>
    <span>HTTP response splitting attacks work by injecting </span>
    <span>CR/LF</span>
    <span> strings into</span>
    <span>
    </span>
    <span>HTTP headers.<span>&amp;nbsp; </span>Web applications that build headers without checking for </span>
    <span>CR/LF </span>
    <span>are vulnerable to this attack.<span>&amp;nbsp; </span>Failing to check data used for header construction and remove malicious </span>
    <span>CR/LF</span>
    <span> is what allows the attack and the cause of this vulnerability.</span>
  </p>
  <p>
    <span>There are different functions to build HTTP headers depending on the language of use.</span>
  </p>
  <table>
    <tbody>
      <tr>
        <td>
          <p>
            <b>
              <span>Class.Function/Property</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>Language</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <pre>
            <span>response.setContentType(), &lt;CODE&gt;response.setHeader() &lt;/CODE&gt;</span>
          </pre>
          <pre>
            <span>HttpServletResponse.setHeader(),</span>
          </pre>
          <pre>
            <span>HttpServletResponse.addHeader(),</span>
          </pre>
          <pre>
            <span>HttpServletResponse.setIntHeader(),</span>
          </pre>
          <pre>
            <span>HttpServletResponse.addIntHeader(),</span>
          </pre>
          <pre>
            <span>HttpServletResponse.setDateHeader(),</span>
          </pre>
          <pre>
            <span>HttpServletResponse.addDateHeader(),</span>
          </pre>
          <pre>
            <span>pServletResponse.setContentType(),</span>
          </pre>
        </td>
        <td>
          <p>
            <span>Java</span>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>Response.Headers.Set(), HttpResonse.Redirect(), HttpResponse.setCookie(),</span>
            <span>
            </span>
            <span>HttpResponse.HeaderName</span>
            <span>
            </span>
          </p>
        </td>
        <td>
          <p>
            <span>ASP .NET</span>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>header()</span>
          </p>
        </td>
        <td>
          <p>
            <span>PHP</span>
          </p>
        </td>
      </tr>
    </tbody>
  </table>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>It is important to note that, even victims of this attack are web clients, this is a server-side bug.</span>
  </p>
  <h2>
    <span>
      <em>HTTP Response Splitting Countermeasures</em>
    </span>
  </h2>
  <p>
    <span>There is a simple solution for response splitting bugs: check the data in the headers before sending them to the client.<span>&amp;nbsp; </span>Absolutely don&amp;#8217;t write any data to the headers before checking the data for </span>
    <span>CR/LF</span>
    <span> characters (</span>
    <span>&amp;#37;0d&amp;#37;0a</span>
    <span>) and other HTTP special characters.<span>&amp;nbsp;&amp;nbsp; </span>An alternative approach is to have a white list that indicates the safe patterns to write to the headers.<span>&amp;nbsp;&amp;nbsp; </span>The server checks the data to be written to the header to see if it matches one of the white list&amp;#8217;s safe patterns.<span>&amp;nbsp; </span>The server allows the data into the header only if it matches one of the safe patterns while disallowing any data that doesn&amp;#8217;t match a safe pattern.</span>
  </p>
  <p>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <h1>
    <span>Step 3:<span>&amp;nbsp; </span>Start Testing and Exploring</span>
  </h1>
  <p>
    <span>This step focuses on executing a first round of test cases to find HTTP response splitting bugs.<span>&amp;nbsp; </span></span>
  </p>
  <h2>
    <span>
      <em>Testing for Response Splitting through a redirect</em>
    </span>
  </h2>
  <p>
    <span>Hardware Requirements:<span>&amp;nbsp; </span>One client computer and one server computer running the web application.</span>
  </p>
  <p>
    <span>Tools:<span>&amp;nbsp;&amp;nbsp; </span>Web browser, network monitoring tool (Wireshark).</span>
  </p>
  <p>
    <span>Testing steps:</span>
  </p>
  <ol>
    <li>
      <span>Find a page in the web application that does a redirect.</span>
      <li>
        <span>Determine what parameter is written to the </span>
        <span>Location</span>
        <span> header (this parameter is usually passed through a URL but maybe forwarded another way).</span>
        <li>
          <span>Build an HTML page with a link containing a URL with the address of the redirect page (from step 1) and pass a double</span>
          <span> CR/LF </span>
          <span>and an additional HTTP 200 (OK) response with an injected page through the </span>
          <span>Location</span>
          <span> header&amp;#8217;s parameter.<span>&amp;nbsp; </span></span>
          <li>
            <span>In the client computer, start monitoring network traffic using Wireshark.</span>
            <li>
              <span>Open the page built using an Internet browser and click on the link.</span>
              <li>
                <span>Wait until the client receives all the responses from the server (this takes less than ten seconds in an average speed network).</span>
                <li>
                  <span>Stop monitoring network traffic and analyze packets exchanged between the web server and the client.</span>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span><span>&amp;nbsp;</span>the application is vulnerable to HTTP response splitting if the web server sends two HTTP responses (a 200 OK and 302 Redirect) and if the client browser displays the injected page.</span>
  </p>
  <h2>
    <span>
      <em>Testing for Response Splitting through header construction from a permanent store</em>
    </span>
  </h2>
  <p>
    <span>Hardware Requirements:<span>&amp;nbsp; </span>One client computer and one server computer running the web application.</span>
  </p>
  <p>
    <span>Tools:<span>&amp;nbsp;&amp;nbsp; </span>Web browser, network monitoring tool (Wireshark), database client.</span>
  </p>
  <p>
    <span>Testing steps:</span>
  </p>
  <ol>
    <li>
      <span>Find a response sent by the web application that uses a database record to as part of a header.</span>
      <li>
        <span>Connect to database using the database client.</span>
        <li>
          <span>Update the vulnerable record with a double</span>
          <span> CR/LF </span>
          <span>and an additional HTTP 200 (OK) response containing a defaced page.</span>
          <li>
            <span>In the client computer, start monitoring network traffic using Wireshark.</span>
            <li>
              <span>Browse to page that sends the response from database data (from step 1).</span>
              <li>
                <span>Wait until the client receives all the responses from the server (this takes less than ten seconds in an average speed network).</span>
                <li>
                  <span>Stop monitoring network traffic and analyze packets exchanged between the web server and the client.</span>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span>Same as first test case.</span>
  </p>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Testing for Response Splitting through header construction using the URL</em>
    </span>
  </h2>
  <p>
    <span>Hardware Requirements:<span>&amp;nbsp; </span>One client computer and one server computer running the web application.</span>
  </p>
  <p>
    <span>Tools:<span>&amp;nbsp;&amp;nbsp; </span>Web browser, network monitoring tool (Wireshark).</span>
  </p>
  <p>
    <span>Testing steps:</span>
  </p>
  <ol>
    <li>
      <span>Find a response sent by the web application that uses a URL parameter as part of a header.</span>
      <li>
        <span>Build a page containing a link that invokes the page in step 1 passing a string containing a double</span>
        <span> CR/LF </span>
        <span>and an additional HTTP 200 (OK) response containing an injected page in the URL parameter.</span>
        <li>
          <span>In the client computer, start monitoring network traffic using Wireshark.</span>
          <li>
            <span>Open the page built using an Internet browser and click on the link.</span>
            <li>
              <span>Wait until the client receives all the responses from the server (this takes less than ten seconds in an average speed network).</span>
              <li>
                <span>Stop monitoring network traffic and analyze packets exchanged between the web server and the client.</span>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span>Same as first test case.</span>
  </p>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Testing for Reflective Cross-site Scripting (XSS) through HTTP Response Splitting </em>
    </span>
  </h2>
  <p>
    <span>Hardware Requirements:<span>&amp;nbsp; </span>One client computer and one server computer running the web application.</span>
  </p>
  <p>
    <span>Tools:<span>&amp;nbsp;&amp;nbsp; </span>Web browser. </span>
  </p>
  <p>
    <span>Testing steps:</span>
  </p>
  <ol>
    <li>
      <span>Find a page vulnerable to HTTP response splitting through a redirect or the URL (fails either test case one or three).</span>
      <li>
        <span>Build a page containing a link that invokes the vulnerable page in step 1 passing a string containing a double</span>
        <span> CR/LF </span>
        <span>and an additional HTTP 200 (OK) response containing a script that pops an alert box through the redirect or URL parameter.</span>
        <li>
          <span>In client computer, open the page built using an Internet browser and click on the link.</span>
          <li>
            <span>Wait until the client receives all the responses from the server.</span>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span>The test case fails if an alert box pops up.<span>&amp;nbsp; </span></span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <h2>
    <span>
      <em>Testing for Persistent Cross-site Scripting (XSS) through HTTP Response Splitting </em>
    </span>
  </h2>
  <p>
    <span>Hardware Requirements:<span>&amp;nbsp; </span>One client computer and one server computer running the web application.</span>
  </p>
  <p>
    <span>Tools:<span>&amp;nbsp;&amp;nbsp; </span>Web browser, database client. </span>
  </p>
  <p>
    <span>Testing steps:</span>
  </p>
  <ol>
    <li>
      <span>Find a page vulnerable to HTTP response splitting through a database record or permanent store (fails test case two).</span>
      <li>
        <span>Modify the database record or permanent store with a string containing a double</span>
        <span> CR/LF </span>
        <span>and an additional HTTP 200 (OK) response containing a script that pops an alert box through the redirect or URL parameter.</span>
        <li>
          <span>In client computer, browse to the page found in step 1 using a Web browser.</span>
          <li>
            <span>Wait until the client receives all the responses from the server.</span>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span><span>&amp;nbsp;</span>The test case fails if an alert box pops up.<span>&amp;nbsp; </span></span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <h2>
    <span>
      <em>Testing for Web Cache Poisoning through HTTP Response Splitting </em>
    </span>
  </h2>
  <p>
    <span>Hardware Requirements:<span>&amp;nbsp; </span>Two client computers, one web cache server computer, and one web application server.<span>&amp;nbsp;&amp;nbsp; </span>The two clients use the same web cache server.</span>
  </p>
  <p>
    <span>Tools:<span>&amp;nbsp;&amp;nbsp; </span>Web browser. </span>
  </p>
  <p>
    <span>Testing steps:</span>
  </p>
  <ol>
    <li>
      <span>Find a page vulnerable to HTTP response splitting (fails one the first three tests).</span>
      <li>
        <span>In client A use an Internet browser to send a request to the application server containing a double</span>
        <span> CR/LF </span>
        <span>and an additional injected HTTP 200 (OK) response with an injected HTML page.<span>&amp;nbsp;&amp;nbsp; </span>Set the cache header in the additional response so that the page is cached by the server. The client sends this request to the web cache server which in turns forwards the request to the application server.</span>
        <li>
          <span>In client A, wait until the client receives all the responses from the server (this takes less than ten seconds in an average speed network) and observe the last response rendered in the browser.</span>
          <li>
            <span>In client A, make another request to the client to a target resource.<span>&amp;nbsp; </span>This will trigger the attack.<span>&amp;nbsp;&amp;nbsp; </span>If the application server is vulnerable, the cache server will associate this request with the injected response from step 2.</span>
            <li>
              <span>In client B, make a request to the same resource targeted in step 4.</span>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span><span>&amp;nbsp;</span>The test case fails if the client B gets the injected response from step 2 to the request made in step 5.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h2>
    <span>
      <em>Testing for Page Hijacking through HTTP Response Splitting </em>
    </span>
  </h2>
  <p>
    <span>Hardware Requirements:<span>&amp;nbsp; </span>Two client computers, one web cache server computer, and one web application server.<span>&amp;nbsp;&amp;nbsp; </span>The two clients use the proxy server.</span>
  </p>
  <p>
    <span>Tools:<span>&amp;nbsp;&amp;nbsp; </span>Web browser.</span>
  </p>
  <p>
    <span>Testing steps:</span>
  </p>
  <ol>
    <li>
      <span>Find a page vulnerable to HTTP response splitting (fails one the first three tests).</span>
      <li>
        <span>Hook the network intercepting tool to the proxy and intercept any outgoing packets.</span>
        <li>
          <span>In client A use an Internet browser to send a request to the application server containing a double</span>
          <span> CR/LF </span>
          <span>and an additional injected HTTP 200 (OK) response with a defaced HTML page.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>The client will send this request through the proxy.</span>
          <li>
            <span>In client B, open an Internet browser and browse to a confidential page.</span>
            <li>
              <span>In client A, make a request to any web page.</span>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span><span>&amp;nbsp;</span>The test case fails if the client A gets the response to the confidential page requested by client B in step 4.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 4:<span>&amp;nbsp; </span>Fine-tune Test Case Data</span>
  </h1>
  <p>
    <span>During this step you need to repeat the test cases from the previous step while tuning the test case data per entry point and making sure to split the responses by finishing the first HTTP response. </span>
  </p>
  <h2>
    <span>
      <em>Tune test case data format according to entry points</em>
    </span>
  </h2>
  <p>
    <span>The format of test case data varies depending on the entry point used to submit it.<span>&amp;nbsp; </span>For example, if you are testing through the URL the next two strings are equivalent depending on the URL-encoding schema in use:</span>
  </p>
  <pre>
    <span>&amp;#37;0d&amp;#37;0aContent-Type:&amp;#37;20text/html&amp;#37;0d&amp;#37;0aHTTP/1.1&amp;#37;20200&amp;#37;20OK&amp;#37;0d&amp;#37;0aContent-Type:&amp;#37;20text/html&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;2047&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0a&amp;#37;3Chtml&amp;#37;3E&amp;#37;3Cfont&amp;#37;20color=red&amp;#37;3EAttacked&amp;#33;&amp;#33;&amp;#37;3C/font&amp;#37;3E&amp;#37;3C/html&amp;#37;3E</span>
  </pre>
  <pre>
    <span>&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;200&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0aHTTP/1.1&amp;#37;20200&amp;#37;20OK&amp;#37;0d&amp;#37;0aContent-Type:&amp;#37;20text/html&amp;#37;0d&amp;#37;0aContent-Length:&amp;#37;2047&amp;#37;0d&amp;#37;0a&amp;#37;0d&amp;#37;0a&lt;html&gt;&lt;font&amp;#37;20color=red&gt;Attacked&amp;#33;&amp;#33;&amp;#33;&lt;/font&gt;&lt;/html&gt;</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>Similarly, you must tune test data depending on the data format of any of these possible entry points such as redirect pages, URL parameters, web form input fields, web service methods, environment variables, and database contents.</span>
  </p>
  <h2>
    <span>
      <em>Finishing the first response </em>
    </span>
  </h2>
  <p>
    <span>A challenge in HTTP response splitting testing is to be able to tell the web server to terminate the original response and start the split one.<span>&amp;nbsp; </span>Some web servers have a minimum required length for a response.<span>&amp;nbsp; </span>This means that responses cannot be smaller than a certain size.<span>&amp;nbsp; </span>You must tune the injected data to pad the first response so that the server knows to finish it and start a new one.<span>&amp;nbsp; </span>Other web application servers will finish the response if the </span>
    <span>Content-Length</span>
    <span> is set to zero.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>Please consult the references below for advanced padding considerations when testing under different platforms.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Conclusions</span>
  </h1>
  <p>
    <span>HTTP resource splitting is a new attack class that facilitates different attacks such as phishing, XSS, and web cache poisoning.<span>&amp;nbsp; </span>Testing for resource splitting bugs needs to cover all these different attacks. It is important that you understand attack scenarios and to execute each test case in detail.<span>&amp;nbsp; </span>Finally make sure to cover all entry points and fine-tune the test data according to their format.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
    <span>&amp;nbsp;</span>
  </p>
  <div>
    <br />
  </div>
  <div>
    <hr />
  </div>
  <p>&amp;#91;i&amp;#93; <b><span>Http Response Splitting.<span>&amp;nbsp; </span></span></b><span>Diabolic Crab<b>. </b><a href="http://www.infosecwriters.com/text_resources/pdf/HTTP_Response.pdf">http://www.infosecwriters.com/text_resources/pdf/HTTP_Response.pdf</a></span></p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>&amp;#91;ii&amp;#93;&amp;nbsp;<span><b>Divide and Conquer. HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics</b>.<span>&amp;nbsp; </span>Amit Klein, Sanctum Inc.<span>&amp;nbsp; </span><a href="http://packetstormsecurity.org/papers/general/whitepaper_httpresponse.pdf">http://packetstormsecurity.org/papers/general/whitepaper_httpresponse.pdf</a></span></p>
  <p>
    <span>&amp;nbsp;</span>
  </p>]]></Data>
  </Content>
</TeamMentor_Article>