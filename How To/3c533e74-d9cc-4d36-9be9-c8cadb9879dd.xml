<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="761778943" Content_Hash="-366777589">
  <Metadata>
    <Id>3c533e74-d9cc-4d36-9be9-c8cadb9879dd</Id>
    <Id_History>42e6a2e7-19bc-41cb-83de-ab3d70fd603d,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>How to Test for Network Credential Sniffing Bugs in ASP .NET</Title>
    <Category>Authentication</Category>
    <Phase>Test</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>How To</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>Applies to</span>
  </h1>
  <ul>
    <li>ASP .NET applications</li>
  </ul>
  <p>&nbsp;</p>
  <h1>
    <span>Summary</span>
  </h1>
  <p>Network credential sniffing attacks are network eavesdropping attacks where the attacker&#8217;s goal is to capture authentication packets in order to reveal data that might be used in an authentication scheme, such as username and password.<span>&nbsp;&nbsp;&nbsp;&nbsp; </span>Applications that don&#8217;t take the necessary measures to encrypt client credentials before transmitting them over the wire or to secure the connection through which authentication occurs are vulnerable to this attack.</p>
  <p>Follow these steps to test for network credential sniffing bugs in ASP .NET:</p>
  <ul>
    <li>Step 1: Understand attack scenarios</li>
    <li>Step 2: Analyze causes and countermeasures</li>
    <li>Step 3: Execute test cases</li>
  </ul>
  <p>&nbsp;</p>
  <h1>
    <span>Step 1: Understand Attack Scenarios</span>
  </h1>
  <p>First, it is necessary to understand the different attack scenarios related to network credential sniffing bugs. </p>
  <p>A network credential sniffing attack stars with an attacker selecting a victim client that authenticates with an ASP .NET application by providing a username and password combination over the network.<span>&nbsp; </span>The next step is for the attacker to eavesdrop the network connection in order to monitor -or sniff- the authentication packets exchanged by the client and the application during login.<span>&nbsp; </span>The attacker chooses a specific network eavesdropping attack depending on the attacker&#8217;s access to the target network as well as the type of target network (hub-based, switch-based, etc.).<span>&nbsp; </span>Network eavesdropping attacks include but are not limited to:</p>
  <ul>
    <li>hub-based networks such as promiscuous mode sniffing</li>
    <li>switch-based networks attacks such as ARP poisoning or DHCP spoofing</li>
    <li>WLAN s attacks including attacks that require compromise of a wireless key </li>
    <li>attacks where the attacker sniffs packets from the Internet such as attacking a BGP router. </li>
  </ul>
  <p>Note that a credential sniffing attack is an extension of a network eavesdropping attack.<span>&nbsp;&nbsp; </span>Thus, the attack scenario described here as well as the test cases in the testing section will not go into detail about network eavesdropping attack.<span>&nbsp; </span>To learn how to execute network eavesdropping attacks refer to Team Mentor&#8217;s article <i>How to Test for Network Eavesdropping Bugs.</i></p>
  <p>While eavesdropping the target&#8217;s client connection, the attacker uses a network monitoring tool to capture and read the authentication packets.<span>&nbsp; </span>If the application doesn&#8217;t properly encrypt the connection, the attacker retrieves the client&#8217;s credentials in clear text or in weak encryption that can be broken later. </p>
  <p>In detail:</p>
  <ol>
    <li>The attacker selects a target client.</li>
    <li>The attacker executes a network eavesdropping attack on the connection between the target client and the ASP application.</li>
    <li>The attacker uses packet monitoring tool to capture authentication packets</li>
    <li>If the application is vulnerable, the attacker reads the client credentials in clear text or with weak encryption, which is trivial to break and recover the clear text.</li>
  </ol>
  <p>&nbsp;</p>
  <h1>
    <span>Step 2: Analyze Causes and Countermeasures</span>
  </h1>
  <p>Next, it is necessary to analyze what makes credential sniffing attacks possible and how to protect against them.<span>&nbsp;&nbsp; </span></p>
  <h2>
    <span>
      <em>Authentication Schemes</em>
    </span>
  </h2>
  <p>There are different authentication schemes available to ASP .NET applications.<span>&nbsp;&nbsp; </span>Applications that choose a weak authentication scheme such as basic or digest authentication are prone to network credential sniffing.<span>&nbsp; </span>The common authentication schemes available are: basic, digest, web forms, and authentication using a secure channel such as SSL/TLS or IPSec.<span>&nbsp; </span></p>
  <p>Basic authentication sends the password as a base-64 encoded value which can be trivially decoded by attackers.<span>&nbsp; </span>Most ASP .NET web applications won&#8217;t use this authentication scheme for remote clients; however, applications might choose to use basic authentication for local network users.<span>&nbsp; </span>Digest authentication is more secure since it uses an MD5 hash with a nonce (number used once) to encrypt the password before sending it over the wire; nonetheless, digest authentication is only secure if properly configured and it can fall victim to man-in-the-middle (MitM) attacks where an attacker that is intercepting authentication packages can tell the client to use Basic authentication or legacy digest authentication.<span>&nbsp;&nbsp; </span><span>&nbsp;</span></p>
  <p>Web applications can also implement authentication using common HTML web forms.<span>&nbsp; </span>Here developers must add the necessary code to the application to ask for the client&#8217;s username and password and send the request to the application once the form is submitted.<span>&nbsp;&nbsp; </span>The username and password<span>&nbsp; </span>will travel in clear text unless the application encrypt the password before sending it to the server of if the authentication packet is sent over a secure connection such as SSL/TLS.<span>&nbsp;&nbsp; </span>To properly protect against network credential sniffing attacks applications must perform authentication through a secure channel.<span>&nbsp;&nbsp; </span>This means that before any authentication packets are exchanged between the client and the server, the client and server must establish an encrypted channel using public key encryption using digital certificates like those used in SSL/TLS, HTTPs, or through Kerberos authentication (integrated Windows Authentication through IIS) .<span>&nbsp;&nbsp; </span></p>
  <p>&nbsp;</p>
  <h2>
    <span>
      <em>ASP .NET and IIS Authentication</em>
    </span>
  </h2>
  <p>ASP .NET web applications can use authentication at two different levels.<span>&nbsp; </span>First, developers can use Microsoft Windows Internet Information Services (IIS) to set authentication for ASP .NET web pages and virtual directories.<span>&nbsp; </span>IIS supports all the authentication methods mentioned above that can be set using Windows <i>Internet Information Services Manager</i>.<span>&nbsp;&nbsp; </span>However, developers are not encouraged to use IIS Manager to set authentication in web applications since this configuration is not captured in code and may be deactivated when moving an ASP .NET application from one server to another.<span>&nbsp; </span>The second option ASP .NET developers have it to set authentication inside ASP .NET applications by modifying application configuration and source code files.<span>&nbsp;&nbsp; </span>Specifically, developers need to set the authentication flag on the <i>web.config</i> file as follows:</p>
  <pre>
    <span>// web.config file<br />&lt;authentication mode = "&#91;Windows/Forms/Passport/None&#93;"&gt;<br />&lt;/authentication&gt;</span>
    <span>&nbsp;</span>
  </pre>
  <p>Note that ASP .NET authentication supports forms, Windows, and Passport (authentication through Microsoft passport services), while basic and digest are not supported within this environment.<span>&nbsp;&nbsp; </span></p>
  <p>To properly protect against network credential sniffing attacks, applications must select one of the mentioned methods.<span>&nbsp; </span>For common web applications, Form authentications is suggested as it integrates with different providers and it supports additional security options such as strong passwords.<span>&nbsp;&nbsp; </span>However, choosing forms authentication is not enough as credentials will still be transmitted in clear text.<span>&nbsp; </span>ASP .NET developers must be sure to mark authentication web pages as SSL-required:</p>
  <pre>
    <span>&lt;authentication mode="Forms"&gt;<br />&nbsp;&nbsp;&nbsp; &lt;forms requireSSL="true" /&gt;<br />&lt;/authentication&gt;</span>&nbsp;</pre>
  <p>Certificates can be issued using Microsoft Windows Certificate Manager.<span>&nbsp; </span>Note, however, that in order to implement SSL/TLS in ASP .NET applications it is necessary to set the appropriate IIS configuration.<span>&nbsp; </span>For more information about ASP .NET authentication options and integration with SSL/TLS and IIS refer to MSDN Security Guidance article: <i>Authentication in ASP .NET </i>(<a href="http://msdn.microsoft.com/en-us/library/ms978378.aspx">http://msdn.microsoft.com/en-us/library/ms978378.aspx</a>).</p>
  <p>&nbsp;</p>
  <h2>
    <span>
      <em>Protection at the Network Layer</em>
    </span>
  </h2>
  <p>Network credential sniffing attacks are possible because attackers are able to eavesdrop the connection between the target client and ASP .NET applications.<span>&nbsp; </span>To mitigate the risk of eavesdropping attacks, network administrators can deploy security defenses at the network layer.<span>&nbsp; </span>For example, by properly deploying and configuring IPSec makes attacker unable to eavesdrop a connection. <span>&nbsp;</span>To defend against promiscuous mode sniffing administrators can execute tools that check for network interfaces running in promiscuous modes, or they can run client application like Xarp to protect against ARP poisoning attacks in switched networks.<span>&nbsp;&nbsp; </span>For additional protection mechanisms against network eavesdropping attacks refer to Team Mentor&#8217;s article <i>How to Test for Network Eavesdropping Bugs</i>.<b><i><span></span></i></b></p>
  <p>&nbsp;</p>
  <h2>
    <span>Step 3: Execute Test Cases</span>
  </h2>
  <p>Now that you&#8217;ve learned the theoretical aspects of network credential sniffing bugs, it is necessary to execute the following test cases to check in your application is vulnerable.</p>
  <h2>
    <span>
      <em>Test for Network Credential Sniffing</em>
    </span>
  </h2>
  <p>Follow these steps to test for network credential sniffing in ASP .NET applications.</p>
  <ol>
    <li>Select a target client.</li>
    <li>Execute an eavesdropping attack between client and ASP .NET application.<span>&nbsp; </span>For detail on eavesdropping attacks refer to Team Mentor&#8217;s article <i>How to Test for Network Eavesdropping Bugs</i>.</li>
    <li>Use network monitoring tool to check if credentials are transmitted in clear text.</li>
  </ol>
  <p>Expected results:<span>&nbsp; </span>the application is vulnerable if credentials are sent in clear text or using weak encryption.</p>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>&nbsp;</p>
  <h2>
    <span>
      <em>Test for Secure Transport Layer</em>
    </span>
  </h2>
  <p>An additional test that is relevant to network credential sniffing testing is to check if authentication occurs over a secure transport layer such as SSL/TLS or HTTPS.<span>&nbsp; </span><span>&nbsp;</span>In most cases, web browsers display a padlock (or any other comparable visual indicator) in the browser&#8217;s window if the connection is secure; however, there are cases where the lock doesn&#8217;t show so the tester must monitor authentication packets to check if they are really going over HTTPs.</p>
  <p>Proper testing for a secure transport layer can be done, as proposed by OWASP, by using an HTTP proxy tool and examining the URL of authentication requests &#91;i&#93;. <span>&nbsp;</span>Execute the following steps to test for secure transport layer.</p>
  <ol>
    <li>Download a HTTP proxy tool such as OWASP&#8217;s WebScarab or Burp Proxy and execute it.</li>
    <li>Open a web browser.</li>
    <li>Set web browser&#8217;s connection options to use HTTP proxy.</li>
    <li>Navigate to ASP .NET application login/authentication page.</li>
    <li>In the HTTP proxy, turn intercept option ON.</li>
    <li>In the web browser, enter username and password and make request.</li>
    <li>In the HTTP proxy, check if the authentication request&#8217;s URL.</li>
  </ol>
  <p>Expected results:<span>&nbsp; </span>The application is vulnerable if the request URL is made over plain HTTP and not HTTPS.<span>&nbsp; </span>If the application uses plain HTTP, the authentication request&#8217;s URL will start <i>http</i>:</p>
  <pre>POST <strong>http://www.example.com/login.aspx</strong> HTTP/1.1<br />Host: www.example.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.14) Gecko/20080404<br />Accept: text/xml,application/xml,application/xhtml&#43;xml,text/html<br />Accept-Language: it-it,it;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,&#42;;q=0.7<br />Keep-Alive: 300<br />Connection: keep-alive<br />Cookie: language=English; <br />Content-Type: application/x-www-form-urlencoded<br />Content-length: 27<br />&nbsp;<br />username=test&password=test</pre>
  <p>
    <span>
    </span>
  </p>
  <p>The application is secure if the request URL is over HTTPS.<span>&nbsp; </span>If the application uses HTTPS, the authentication request&#8217;s URL will start <i>https </i>and it will contain the network port used by HTTPS/SSL (<i>443</i> by default):</p>
  <pre>
    <span>POST <strong>https://www.example.com:443/login.aspx</strong> HTTP/1.1<br />Host: www.example.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.14) Gecko/20080404<br />Accept: text/xml,application/xml,application/xhtml&#43;xml,text/html<br />Accept-Language: it-it,it;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,&#42;;q=0.7<br />Keep-Alive: 300<br />Connection: keep-alive<br />Referer: https://www.example.com/login.aspx<br />Cookie: language=English; <br />Content-Type: application/x-www-form-urlencoded<br />Content-length: 27<br />&nbsp;<br />username=test&password=test<br /></span>&nbsp;</pre>
  <h1>
    <span>Conclusions</span>
  </h1>
  <p>ASP .NET applications that don&#8217;t use strong encryption or a secure channel to transmit credentials over the network are vulnerable to credential sniffing attacks.<span>&nbsp;&nbsp; </span>To test for this vulnerability, it is recommended that you familiarize with the different attack scenarios involved as well as why this bug occurs and how to protect against it.<span>&nbsp;&nbsp; </span>Then you must execute practical test cases using network monitoring tools such as sniffers and tools necessary to execute network eavesdropping attacks.<span>&nbsp;&nbsp; </span>It is also recommended to double check the usage of a secure channel by intercepting and examining authentication packets using an HTTP client proxy tool.<span>&nbsp; </span>For unencrypted HTTP traffic, testers can use a network monitoring tool such as Wireshark.</p>
  <p>&nbsp;<br />&#91;i&#93; <b>Testing for Credentials Transport</b>. OWASP. <a href="http://www.owasp.org/index.php/Testing_for_credentials_transport">http://www.owasp.org/index.php/Testing_for_credentials_transport</a></p>
  <div>
    <div>
      <p>&nbsp;</p>
    </div>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>