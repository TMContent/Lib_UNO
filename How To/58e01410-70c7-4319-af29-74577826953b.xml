<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-53065934" Content_Hash="-9495274">
  <Metadata>
    <Id>58e01410-70c7-4319-af29-74577826953b</Id>
    <Id_History>3f0ca71b-fd6a-448c-a4c2-fefce1e595ae,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>How to Test for Deserialization of Untrusted Data Bugs in ASP.NET</Title>
    <Category>Serialization</Category>
    <Phase>Test</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Deserialization of Untrusted Data Bugs in ASP.NET</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>Summary</span>
  </h1>
  <p>ASP .NET applications that use serialization/deserialization of data might be vulnerable to deserialization of untrusted data bugs.<span>&amp;nbsp; </span>To exploit this bug, an attacker tampers with the data that will be deserialized by the application so that the application deserializes a malicious data stream.<span>&amp;nbsp;&amp;nbsp; </span>An attacker can use malicious serialization data in order to inject client-side scripts, perform denial-of-service (DoS) attacks, or execute logical attacks on the target application.</p>
  <p>Follow these steps to test for deserialization of untrusted data bugs in ASP.NET:</p>
  <ul>
    <li>Step 1: Understand attack scenarios<li>Step 2: Analyze causes and countermeasures<li>Step 3: Execute test cases</li></li></li>
  </ul>
  <p>&amp;nbsp;</p>
  <h1>
    <span>Step 1: Understand Attack Scenarios</span>
  </h1>
  <p>The first step in learning how to test for deserialization bugs in ASP.NET is to understand the anatomy of their attack scenarios.<span>&amp;nbsp; </span>Attack scenarios include but are not limited to:</p>
  <ul>
    <li>Client-side script injection<li>Denial-of-service attacks<li>Logical attacks<br /></li></li></li>
  </ul>
  <p>During a deserialization of untrusted data attack, an attacker tampers with serialized data or submits malicious serialized data so that the application behaves unexpectedly when it starts deserializing it. <span>&amp;nbsp;</span></p>
  <p>In detail:</p>
  <ol>
    <li>The attacker finds an application&amp;#8217;s functionality where it inputs serialized data dynamically or from a permanent store.<li>If the application dynamically inputs serialized data, the attacker inputs malicious serialized data.<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>If the application inputs serialized data from a permanent store such as a file or database, the attacker tampers with this store and writes the malicious serialized data.<li>The attacker waits for the application to react upon deserializing the malicious data. </li></li></li>
  </ol>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h3>
    <span>
      <em>Scenario 1: Client-side script injection</em>
    </span>
  </h3>
  <p>Data deserialization, the opposite of data serialization, is used by ASP.NET applications that extract a sequence of bytes into a C# or VB object (depending on the language in use).<span>&amp;nbsp; </span><span>&amp;nbsp;&amp;nbsp;</span>For instance, the following application uses serialized JSON data stored in a server-side file to build an ASP.NET response:</p>
  <pre>public partial class deserialize : System.Web.UI.Page<br />&amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#91;Serializable&amp;#93;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; public class Address<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public string Street;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public string City;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public string State;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public string Zip;<br />&amp;nbsp;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#91;Serializable&amp;#93;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; public class Customer<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public string Name;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public DateTime Entered = DateTime.Now;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public List&lt;Address&gt; Addresses = new List&lt;Address&gt;();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StreamReader sr = new StreamReader(Server.MapPath("data.txt"));<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; MemoryStream ms = new&amp;nbsp;MemoryStream(Encoding.Unicode.GetBytes(sr.ReadToEnd()));<br />&amp;nbsp;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(Customer));<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Customer person = ser.ReadObject(ms) as Customer;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ms.Close();<br />&amp;nbsp;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(person.Name);<br />&amp;nbsp;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;#125;<br />&amp;nbsp;</pre>
  <p>The <i>data.txt </i>containing the following data:</p>
  <pre>&amp;#123;"Addresses":<br />&amp;#91;&amp;#123;"City":"Seatle","State":"WA","Street":"123 Wall St.","Zip":"98101"&amp;#125;,<br />&amp;#123;"City":"Boston","State":"MA","Street":"33 St. Paul St","Zip":"02109"&amp;#125;&amp;#93;,<br />"Entered":"\/Date(1191992400000-0500)\/",<br />"Name":"John Smith"&amp;#125;<span>&amp;nbsp;</span></pre>
  <p>Generates the following output:<span>&amp;nbsp; </span><span><strong>John Smith</strong></span></p>
  <p>To execute this attack scenario, an attacker can modify the serialized data to add a client-side script:</p>
  <p>
    <span>
    </span>
  </p>
  <pre>
    <span>&amp;#123;"Addresses": <br />&amp;#91;&amp;#123;"City":"Seatle","State":"WA","Street":"123 Wall St.","Zip":"98101"&amp;#125;, <br />&amp;#123;"City":"Boston","State":"MA","Street":"33 St. Paul St","Zip":"02109"&amp;#125;&amp;#93;, <br />"Entered":"\/Date(1191992400000-0500)\/", <br />"Name":"&lt;<strong>script&gt;alert('exploiting deserialization')&lt;/script&gt;"&amp;#125;</strong><br /></span>
  </pre>
  <p>This results in the browser displaying an alert box that confirms that the client-side script has been injected.<span>&amp;nbsp; </span>An attacker who is able to modify the untrusted data source used to service the request above might be able to inject a client-side script that is displayed to all clients.<span>&amp;nbsp;&amp;nbsp; </span>This attack scenario is similar to stored Cross-Site Scripting (XSS) where the attacker injects a client-side script in a data source.</p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h2>
    <span>
      <em>Scenario 2: Denial-of-service attack</em>
    </span>
  </h2>
  <p>An attacker might also attempt a denial-of-service attack on the application by trying to crash the ASP.NET application or put it into a state that prevents the application from properly servicing its users:</p>
  <pre>&amp;#123;"Addresses": <br />&amp;#91;&amp;#123;"City":"Seatle","State":"WA","Street":"123 Wall St.","Zip":"98101"&amp;#125;, <br />&amp;#123;"City":"Boston","State":"MA","Street":"33 St. Paul St","Zip":"02109"&amp;#125;&amp;#93;, <br />"Entered":"\/Date(1191992400000-0500)\/",<br />"Name<strong>":"&amp;#125;&amp;#93;&amp;#125;&amp;#125;)&amp;#125; </strong></pre>
  <p>Here the attacker is trying to cause a parsing error in the application in an attempt of raising an unhandled exception that might eventually cause the application thread to terminate.<span>&amp;nbsp; </span>Additionally, an attacker can attempt exploiting recursive elements by adding an excessive number of recursion levels or exploiting array elements by adding an excessive number of array elements.<span>&amp;nbsp;&amp;nbsp; </span>For example, using the current example an attacker might add numerous array elements to the <i>Addresses</i> array:<span></span></p>
  <pre>
    <span>&amp;#123;"Addresses": <br /><strong>&amp;#91;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;<br />&amp;#123;"City":"a","State":"b","Street":"c","Zip":"d"&amp;#125;</strong><br />&amp;#123;"City":"Seatle","State":"WA","Street":"123 Wall St.","Zip":"98101"&amp;#125;, <br />&amp;#123;"City":"Boston","State":"MA","Street":"33 St. Paul St","Zip":"02109"&amp;#125;&amp;#93;,<br />"Entered":"\/Date(1191992400000-0500)\/",<br />"Name":"John Smith"&amp;#125;</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <h2>
    <span>
      <em>Scenario 3: Logical attacks</em>
    </span>
  </h2>
  <p>The last scenario refers to logical attacks on the application where the data modified by the attacker causes the application to behave differently, following an unexpected execution path or executing additional attacker-provided code. <span>&amp;nbsp;&amp;nbsp;</span></p>
  <p>For example, an application dynamically evaluates the following code and assumes that the access level is always 2:</p>
  <pre>&amp;#123;"username": jsmith<br />"password": I3483y0824nmnNJKBQSDVhvhv38u902hf08h0esubfe9f7w7gvb9<br />"Access-Level": 2&amp;#125;</pre>
  <p>
    <span>
      <span>
      </span>
    </span>
  </p>
  <p>However, the attacker can tamper with the data source used during serialization to change the access level to 1:</p>
  <pre>&amp;#123;"username": jsmith<br />"password": I3483y0824nmnNJKBQSDVhvhv38u902hf08h0esubfe9f7w7gvb9<br />"<strong>Access-Level": 1</strong>&amp;#125;<span>&amp;nbsp;</span></pre>
  <p>As a result, the application might make an incorrect assumption about the attacker&amp;#8217;s privilege and grant access to critical parts of the application to the attacker.</p>
  <p>&amp;nbsp;</p>
  <h1>
    <span>Step 2: Analyze Causes and Countermeasures</span>
  </h1>
  <p>Next it is necessary to analyze what causes and how to protect against deserialization of untrusted data attacks.</p>
  <h2>
    <span>
      <em>Accepting untrusted serialized data</em>
    </span>
  </h2>
  <p>This attack is possible when an application accepts untrusted data as input to a deserialization routine without validating the integrity of the untrusted data to prevent it from being tampered by an attacker.<span>&amp;nbsp;&amp;nbsp; </span>As a result, the attacker is able to submit malicious data for the application to deserialize.<span>&amp;nbsp; </span>A possible mitigation consists adding a cryptographic checksum to serialized messages to detect tampering of serialized data.</p>
  <h2>
    <span>
      <em>Using a secure channel</em>
    </span>
  </h2>
  <p>A similar option to implementing a cryptographic framework for serialized data is to send all serialized data using a secure channel.<span>&amp;nbsp;&amp;nbsp; </span>Developers can choose different secure channel implementations such as SSL/TLS and IPSec.</p>
  <p>&amp;nbsp;</p>
  <h1>
    <span>Step 3: Execute Test Cases</span>
  </h1>
  <p>
    <span>Now that you&amp;#8217;ve reviewed the theoretical aspects of deserialization of untrusted data bugs it is necessary to execute the following test cases to check it your application is vulnerable.</span>
  </p>
  <p>
    <b>
      <i>
        <span>Test for deserialization of unstrusted data dynamically</span>
      </i>
    </b>
  </p>
  <p>
    <span>Follow these steps:</span>
  </p>
  <ol>
    <li>
      <span>Discover an application&amp;#8217;s functionality that dynamically takes untrusted serialized data (from the URL , web form, or other client-accessible input point) and deserializes the data.</span>
      <li>
        <span>Modify the input data to add malicious data (such as an injected script) and feed the data to the application.</span>
        <li>
          <span>Wait till the application deserializes the data.</span>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span>The application is vulnerable if it allows for malicious modification of the serialized data.<span>&amp;nbsp; </span>That is, if modification results in an insecure condition such as script injection, denial-of-service, or a logical attack on the application.</span>
  </p>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Test for deserialization of unstrusted data through a data store</em>
    </span>
  </h2>
  <p>
    <span>Follow these steps:</span>
  </p>
  <ol>
    <li>
      <span>Discover an application&amp;#8217;s functionality that takes untrusted serialized data from a physical store (from a file, database, or other client-accessible data store) and deserializes the data.</span>
      <li>
        <span>Modify the data store to add a malicious data (such as an injected script) and feed the data to the application.</span>
        <li>
          <span>Wait till the application deserializes the data.</span>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <span>Expected results:<span>&amp;nbsp; </span>The application is vulnerable if it allows for malicious modification of the serialized data.<span>&amp;nbsp; </span>That is, if modification results in an insecure condition such as script injection, denial-of-service, or a logical attack on the application.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Conclusions</span>
  </h1>
  <p>Deserialization of untrusted data is a security concern as it allows attackers to execute different attacks on the application such as injecting a client-side script, denying the service of the application, and logically exploiting the application&amp;#8217;s behavior for the attacker&amp;#8217;s benefit.<span>&amp;nbsp; </span>To test for this vulnerability in ASP .NET applications it is suggested to start by understanding the different attack scenarios.<span>&amp;nbsp; </span>Continue by reviewing what causes this vulnerability and how to protect against it.<span>&amp;nbsp; </span>Finally, execute different test cases based on the input point that the application uses to gather the serialized data.</p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>]]></Data>
  </Content>
</TeamMentor_Article>