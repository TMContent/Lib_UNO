<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1243588968" Content_Hash="424626178">
  <Metadata>
    <Id>64a776a7-f88d-43cd-8ab1-b92a7ef4eaf8</Id>
    <Id_History>88817ae9-14d8-4191-b6b6-b3d35e4050df,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>How to Generate A Random Number</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>How To</Type>
    <DirectLink>How to Generate A Random Number</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>Description</h1>
  <p>If you need to generate encryption keys programmatically, use the <b>RNGCryptoServiceProvider</b> class to create keys and initialization vectors and do not use the <b>Random</b> class. Unlike the <b>Random</b> class, <b>RNGCryptoServiceProvider</b> creates cryptographically strong random numbers that are FIPS-140 compliant. The following code example shows how to use this function. </p>
  <pre>
    <pre>using System.Security.Cryptography;<br />...<br />RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();<br />byte[] key = new byte[keySize];<br />rng.GetBytes(key);</pre>
  </pre>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>