<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1253006580" Content_Hash="-407708493">
  <Metadata>
    <Id>6d504027-0376-4d15-93aa-7dd92d2db45c</Id>
    <Id_History>6d504027-0376-4d15-93aa-7dd92d2db45c,b06175a9-4202-45a1-8adb-1158fbac9be6,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>How to Test for Weak Passwords</Title>
    <Category>Testing</Category>
    <Phase>Test</Phase>
    <Technology>Technology Independent</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Weak Passwords</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

- All applications that use passwords


## Summary ##

Weak passwords are passwords that are easy to predict by an attacker who wants to bypass authentication and log in to a target application as a legitimate user. Systems that rely on user accounts, including e-commerce sites, database servers, and operating systems, must enforce a strong password policy in order to avoid becoming victims to this attack.

Follow these steps to test for weak password bugs:

1. Understand background information

2. Analyze causes and countermeasures

3. Start testing and exploring 


## Step 1: Understand Background Information ##

An application either creates passwords automatically for its clients or uses a password policy to let clients create their own. This attack aims at measuring the strength of both passwords created automatically and password policies used by applications, database servers, operating systems, or other systems.

### Strong Passwords ###

Before analyzing an attack scenario, it is necessary to understand what a strong password is. In general terms, a strong password is a password that it is not easy for humans or computers to predict. Strong passwords must contain:

- at least eight characters

- a combination of upper-case and lower-case letters

- at least one special character (such as ^, @, or #)

- at least one numeric digit

Strong password must not:

- use default values (for example, admin or 1234)

- contain words that could be found in a dictionary (for example, house or pet)

- contain dictionary words that are obfuscated by symbols or digits (such as h0us€ or p3t)

- include personal details about the user, such as user name, email addresses, phone numbers, birthdays, etc

- include a previously used password


### Attack Scenarios ###

The goals of testing for weak passwords are to assess the strength of the application’s password policy and to determine if it’s strong enough to be attack-resistant. There are three common ways of checking for weak passwords:

- Create a new password

- Review password policy

- Execute a credential brute-force/dictionary attack


### Scenario 1: Create a new password ###

The easiest way for attackers to check for a weak password policy is by creating a new password. In this scenario, the attacker goes to the application’s registration area (such as a web application’s registration page) and creates an account that has a weak password. If the application allows a weak password, the attacker knows that additional attacks such as credential brute-forcing are possible, because other user accounts may have weak passwords.


### Scenario 2: Review password policy ###

If the attacker has enough privileges in the target system, a configuration tool or text editor can be used in order to review the password policy and check if the system is vulnerable to this bug. The system is vulnerable if the configuration indicates that no strong passwords are in use.


### Scenario 3: Execute credential brute-force/dictionary attack ###

Credential brute-force and dictionary attacks are a common way to reveal weak passwords because they don’t require privileges in the target system. These attacks usually involve executing an automated tool known as a password cracker that tests for weak passwords by trying numerous words from dictionaries and exhaustive searches over different ranges of characters. Attackers can use brute-force or dictionary attack tools such as Brutus to test for weak passwords.


## Step 2: Analyze Causes and Countermeasures ##

The next step is to understand what causes weak password bugs and how to protect against them.


### Weak password policies ###

Weak passwords exist because applications implement password policies that allow for weak passwords. As seen in the previous section, weak password policies permit short passwords, passwords containing dictionary words, personal information, and so on. This bug usually happens when users create a new account and have to specify their passwords. If the application is vulnerable, it allows any value as the password without checking if this value is strong enough.


### Protecting at the application level ###

To protect against this vulnerability, make sure to enforce a strong password policy. That is, before storing any password, check if it is strong enough. An effective way to implement this check is by using regular expressions. For instance, MSDN suggests the following regular expression to check against weak passwords: '(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,10})$'

According to MSDN, the regular expression “. . . validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters.”

You can alter this expression to match a stronger password policy, such as one requiring at least one special character. In addition, if the risk of weak passwords is high, you can implement additional checks such as dictionary checks or checks against personal information (email address, birthday, etc.) before storing a password.


### Protecting at the configuration level ###

Operating systems, database servers, and web environments can be configured to use strong passwords. Be sure that you understand the configuration options of your specific technology so that you may properly protect your application and its users.


### Protecting against credential brute-force/dictionary attacks ###

There are different ways to protect against automated password attacks, each presenting advantages and disadvantages. Applications can protect using an account lockout policy so that an account is locked after a certain number of failed login attempts; however, attackers can use this feature to lock out legitimate users. A more efficient technique involves inserting a time delay in the authentication process that is unnoticeable to clients but that slows down password crackers; still, sophisticated attacks can execute over time and try to beat any time delay mechanism. Another possible option involves using human interaction proofs such as CAPTCHAs; yet, this technology has also been defeated. Choose your protection by carefully combining these techniques. 


## Step 3: Start Testing and Exploring ##

Now that you understand the background information on weak password bugs, it is necessary to execute some practical test cases to see if your application is vulnerable.


### Test for weak password by creating new password ###

This test focuses on testing password policy strength by creating a weak password. Follow these steps to test for weak passwords:

1. Specify rules that constitute a strong password (see section 1).

2. Navigate to a place in the application where a user account can be created, such as a registration page.

3. Enter a password that doesn’t match the rules specified in step 1, and then submit a request to create an account.

Expected result: The application is vulnerable if it allows creation of an account with the weak password.


### Test for web application weak passwords by running HTTP password cracker ###

This test focuses on testing password policy strength by executing a credential brute-force/dictionary attack. Follow these steps to test for dictionary attacks:

1. Download and install Brutus from [http://www.hoobie.net/brutus/](http://www.hoobie.net/brutus/).

2. Run Brutus.

3. Type a target URL and authentication type.

4. In the Pass Mode dropdown list, select Word List.

5. Modify the word list file with any file of your choice (word lists can be created from dictionaries or from sets of rules).

6. Click Start.

Expected result: The application is vulnerable if Brutus displays any matches in thePositive Authentication Results list box. 


## Conclusions ##

Testing for weak passwords focuses on determining the strength of a software application’s password policy. This can be done either by creating a new password, analyzing the application, database, or system configuration, or executing a credential brute-force/dictionary attack. Be sure that you understand what makes a strong password so that you can test against passwords that don’t meet the criteria, and use the appropriate tools depending on the environment and platform your application resides in.]]></Data>
  </Content>
</TeamMentor_Article>