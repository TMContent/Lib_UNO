<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1203550896" Content_Hash="-1027738887">
  <Metadata>
    <Id>a49acc55-8666-4261-bee6-1c1636dafcdd</Id>
    <Id_History>00637fd5-adef-4fb2-ba01-2b59cbd7a150,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>How to Test for Canonicalization Bugs</Title>
    <Category>Testing</Category>
    <Phase>Test</Phase>
    <Technology>Web Application</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Canonicalization Bugs</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>Applies to</span>
  </h1>
  <p>
    <span>This type of bug is common in applications that interact with the file system based on untrusted data, including:</span>
  </p>
  <ul>
    <li>
      <span>Web application and services with file upload and download capabilities.</span>
      <li>
        <span>Internet web servers such as Apache and IIS that resolve file names.</span>
        <li>
          <span>Web-related scripts and languages such as CGI, JavaScript, VB Script, Java, ASP, PHP, and C#.</span>
          <li>
            <span>Managed and unmanaged network applications that do file manipulation based on user input.</span>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Summary</span>
  </h1>
  <p>
    <span>Software applications represent file names and directories in different ways, and a given file can often be referred to in a number of ways.<span>&amp;nbsp; </span>Using Microsoft Windows as an example, let&amp;#8217;s look at a folder named &amp;#8220;private&amp;#8221; in the C: drive. The most common way to refer to it is:</span>
  </p>
  <pre>
    <span>C:\private</span>
  </pre>
  <p>
    <span>It can also be called:</span>
  </p>
  <pre>
    <span>C:\\private</span>
  </pre>
  <p>
    <span>or (if the current working directory is the root of the C: drive):</span>
  </p>
  <pre>
    <span>
      <span>&amp;nbsp;</span>
    </span>
    <span>".\private"</span>
  </pre>
  <p>
    <span>If an application wants to stop an attacker from writing files to that directory, they can take a number of approaches, including building lists of what&amp;#8217;s not allowed (blacklisting), building lists of what is allowed (white listing), relying on file system ACLs, and disallowing direct file system access entirely.<span>&amp;nbsp; </span>The problems start, however, with making sure that a user-provided file name and path actually point where you think they do.<span>&amp;nbsp; </span>Similar issues apply in many classes of vulnerabilities, including cross-site scripting, SQL injection, and command injection; but we&amp;#8217;ll be looking at file access and directory traversal issues here.</span>
  </p>
  <p>
    <span>These are the steps to test for canonicalization bugs:</span>
  </p>
  <ul>
    <li>
      <b>
        <span>Step 1</span>
      </b>
      <span>:<span>&amp;nbsp; </span>Understand canonicalization attack scenarios.</span>
      <li>
        <b>
          <span>Step 2</span>
        </b>
        <span>:<span>&amp;nbsp; </span>List high risk components and entry points.</span>
        <li>
          <b>
            <span>Step 3</span>
          </b>
          <span>:<span>&amp;nbsp; </span>Start testing and exploring.</span>
          <li>
            <b>
              <span>Step 4</span>
            </b>
            <span>:<span>&amp;nbsp; </span>Tune test case data.</span>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 1: Understand Canonicalization Attack Scenarios</span>
  </h1>
  <p>
    <span>The goal of an attacker performing a canonicalization attack is to convince whatever software is doing the filtering that they&amp;#8217;ve submitted a good string, when they&amp;#8217;ve actually submitted a dangerous one.<span>&amp;nbsp; </span>When dealing with file names, the file system provides one level of obscurity that the attacker can exploit.<span>&amp;nbsp; </span>In web based systems, the different character encodings used on the web provide a second layer of obscurity.<span>&amp;nbsp; </span>These two levels represent the most common canonicalization attacks today, so we&amp;#8217;ll concentrate on them.<span>&amp;nbsp; </span>Here are two sample attacks, one involving each layer:</span>
  </p>
  <p>
    <b>
      <i>
        <span>File system-based canonicalization attacks</span>
      </i>
    </b>
  </p>
  <p>
    <span>A Windows server-side application asks its users for a file path and displays the file contents.<span>&amp;nbsp; </span>It uses a critical directory named &amp;#8220;</span>
    <span>private</span>
    <span>&amp;#8221; on the root of the file system (</span>
    <span>C:\private</span>
    <span>).<span>&amp;nbsp; </span>The server protects this directory by checking if submitted paths contain the substring </span>
    <span>private</span>
    <span>. </span>
  </p>
  <p>
    <span>The attacker tries the strings below but the system rejects them because they all contain &amp;#8220;</span>
    <span>private</span>
    <span>&amp;#8221;</span>
    <span>.</span>
  </p>
  <pre>
    <span>c:\private</span>
  </pre>
  <pre>
    <span>c:\private\</span>
  </pre>
  <pre>
    <span>..\private</span>
  </pre>
  <pre>
    <span>..\..\private</span>
  </pre>
  <pre>
    <span>c:/private</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>However, the attacker can supply a short file name in 8.3 format:</span>
  </p>
  <pre>
    <span>C:\privat~1</span>
    <span>
    </span>
  </pre>
  <p>
    <span>Since the string above doesn&amp;#8217;t contain &amp;#8220;</span>
    <span>private</span>
    <span>&amp;#8221; it is not part of the application blacklist.<span>&amp;nbsp; </span>Thus, the application allows the attacker access to the protected folder.</span>
  </p>
  <p>
    <b>
      <i>
        <span>Understand web encodings</span>
      </i>
    </b>
  </p>
  <p>
    <span>All data on the web is fundamentally strings of text.<span>&amp;nbsp; </span>Different contexts, such as HTML, JavaScript, or URLs, have different characters which they use as delimiters or which otherwise have special meaning.<span>&amp;nbsp; </span>In order for applications to understand where strings start and end, strings which contain those delimiter characters must be encoded.<span>&amp;nbsp; </span>This encoding provides an opportunity for an attacker to fool the system.</span>
  </p>
  <p>
    <span>Data is encoded and decoded at different times, depending on what&amp;#8217;s going on.<span>&amp;nbsp; </span>A web application needs to perform HTML encoding during page generation - failure to do this correctly is a key source of cross-site scripting problems, for example. When a browser submits a URL to a web server, it URL encodes the string before sending it.</span>
  </p>
  <p>
    <span>Suppose we have a web site where a user wants to represent themselves with a name that includes the special characters &amp;#8220;&amp;&amp;#8221; and &amp;#8220;/&amp;#8221;:</span>
  </p>
  <pre>
    <span>www.example.com/name=&amp;foo/bar</span>
    <span>
    </span>
  </pre>
  <p>
    <span>The user chooses the name <b>&amp;foo/bar</b> which uses the ampersand and the forward slash, both of which have special meaning in URLs.<span>&amp;nbsp; </span>If the data was sent exactly as above, the web server would interpret the name as something entirely different, and would not take the intended action.<span>&amp;nbsp; </span>Instead, the string is sent in the URL encoded form as follows:</span>
  </p>
  <pre>
    <span>www.example.com/name=&amp;#37;26foo&amp;#37;2Fbar</span>
  </pre>
  <p>
    <span>In URL encoding, the &amp;#8216;&amp;#37;&amp;#8217; character is used to encode an otherwise unrepresentable character.<span>&amp;nbsp; </span>The string after the percent references a specific character as a hexadecimal number.<span>&amp;nbsp; </span>The web server on the other end automatically decodes the string to recover the original version, and this is where the problem lies.</span>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <b>
      <i>
        <span>URL encoding-based canonicalization attacks</span>
      </i>
    </b>
  </p>
  <p>
    <span>Most of the time, a URL is mapped to the file system by a web server.<span>&amp;nbsp; </span>This has the effect of making the list of alternate versions of a file name listed in the previous attack much longer.<span>&amp;nbsp; </span>For example, let&amp;#8217;s say that the application in the previous example also has a web front end, hosted out of the directory C:\inetpub\wwwroot\app\.<span>&amp;nbsp; </span>An attacker could submit the following URL to try to gain access to the protected C:\private directory:</span>
  </p>
  <pre>
    <span>http://www.example.com/app/../../../private</span>
  </pre>
  <p>
    <span>There are a number of different ways to attempt to filter out URLs like this.<span>&amp;nbsp; </span>For example, the server could filter out the slashes after the dots.<span>&amp;nbsp; </span>However, if they perform this action on the raw URL and then decode it, the attacker can use an alternate representation of the slashes, via URL encoding:</span>
  </p>
  <pre>
    <span>http://www.example/com/app/..&amp;#37;2f..&amp;#37;2f../private</span>
  </pre>
  <p>
    <span>One obvious way to fix this would be to just extend the blacklist above to cover the encoded versions of the characters as well.<span>&amp;nbsp; </span>However, this can lead to issues at multiple levels.<span>&amp;nbsp; </span>First, when one adds Unicode representations of strings into the mix, the number of ways that one can encode a string becomes much larger.<span>&amp;nbsp; </span>Second, even if one could generate a list, there are problems with different layers of the system interpreting the same string in different ways - a number of high profile security issues (including at least one for Microsoft&amp;#8217;s IIS versions 4 and 5) have been caused by systems misinterpreting malformed Unicode representations of characters.<span>&amp;nbsp; </span>On one of those systems, the following string would have worked:</span>
  </p>
  <pre>
    <span>http://www.example/com/app/..&amp;#37;C0&amp;#37;AF..&amp;#37;C0&amp;#37;AF../private</span>
  </pre>
  <p>
    <span>As the systems in question only checked the encoded string and didn&amp;#8217;t do any checks after decoding, this issue allowed an attacker to completely compromise a machine - a URL like the following could<span>&amp;nbsp; </span>execute arbitrary commands (in this case, to perform a director listing, but more dangerous payloads are trivial):</span>
  </p>
  <pre>
    <span>http://www.example.com/app/..&amp;#37;c0&amp;#37;af..&amp;#37;c0&amp;#37;af.. winnt/system32/cmd.exe?/c&amp;#43;dir</span>
  </pre>
  <pre>
    <span>
    </span>
    <span>
    </span>&amp;nbsp;</pre>
  <h1>
    <span>Step 2: <span>&amp;nbsp;</span>List high risk components and entry points</span>
  </h1>
  <p>
    <span>Now that you understand the attacks at a high level, you must look at the specific server side flaws which contribute to this problem.<span>&amp;nbsp; </span>After understanding the problems in detail, you can look through your application and determine high risk components and entry points, and then begin testing.</span>
  </p>
  <h2>
    <span>Identifying problems and mitigations</span>
  </h2>
  <p>
    <span>Understanding the different ways that this problem is manifested in source code, and what the mitigations look like is an important step towards being able to identify where those problems may lay in your application.</span>
  </p>
  <p>
    <span>
      <b>
        <i>Decisions made too soon (based a non-canonical interpretation)</i>
      </b>
    </span>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <p>
    <span>The most common cause of canonicalization errors is checking a string too soon based on a non-canonical interpretation.<span>&amp;nbsp; </span>Strings need to be in their canonical form (after all decoding or other processing has completed,) before they are used in access checks.<span>&amp;nbsp; </span>For example, the code below checks for access too soon:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <pre>
    <span>int</span>
    <span> grabFile(<span>char</span>&amp;#42; input)</span>
  </pre>
  <pre>
    <span>&amp;#123;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>char</span>&amp;#42; m_canonical_path;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>bool</span> result;</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>/&amp;#42;&amp;#168;check against list of bad names<span>&amp;nbsp; </span>&amp;#42;/</span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>result = CheckAccessToFile(bad_input_list, input);<span>&amp;nbsp;&amp;nbsp; </span><span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>(1)</span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>if</span> (result == <span>true</span>) &amp;#123;</span>
  </pre>
  <pre>
    <span>&amp;#9;/&amp;#42; convert to intended form &amp;#42;/&amp;#9;</span>
  </pre>
  <pre>
    <span>&amp;#9;m_canonical_path = ConvertToCanonicalForm(input) <span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>(2)</span>
  </pre>
  <pre>
    <span>&amp;#9;OpenFile(m_canonical_path)</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>&amp;#125;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>else</span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>return</span>
      <span>false</span>;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>return</span>
      <span>true</span>;</span>
  </pre>
  <pre>
    <span>&amp;#125;</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>This code incorrectly uses </span>
    <span>CheckAccessToFile(input)</span>
    <span> against the raw version of the input<span>&amp;nbsp; </span>(1).<span>&amp;nbsp; </span>You need to check for access just before the call to access or other policy decision:</span>
  </p>
  <pre>
    <span>CheckAccessToFile</span>
    <span>(</span>
    <span>m_canonical_path</span>
    <span>). </span>
  </pre>
  <p>
    <span>Note: <span>&amp;nbsp;</span>The code uses a pseudo-code function named </span>
    <span>ConvertToCanonicalForm() </span>
    <span>to convert the input string to its canonical form.<span>&amp;nbsp; </span>This function must be replaced with the appropiate function call depending on the platform in use.<span>&amp;nbsp; </span>For instance, <span>&amp;nbsp;</span>depending on the technology in use, you might use Java&amp;#8217;s </span>
    <span>getCanonicalPath()</span>
    <span>or Visual Basic&amp;#8217;s </span>
    <span>GetAbsolutePathName()</span>
    <span>.<span>&amp;nbsp; </span></span>
    <span>Make sure to check the platform in use for the relevant canonical conversion function.</span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <b>
      <i>
        <span>Decisions based on black lists </span>
      </i>
    </b>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <span>Even when assuming that a system checks the right form of a string at the correct time, problems may exist if the check is performed improperly.<span>&amp;nbsp; </span>Blacklists are frequently used for checks of this type, but they can easily result in a dangerous string being overlooked.<span>&amp;nbsp; </span><span>&amp;nbsp;</span>Because they can be bypassed with unknown representations of an invalid resource, blacklists are almost always insufficient and they are a poor defense against this vulnerability. <span>&amp;nbsp;</span>The example pseudo-code below illustrates this:</span>
  </p>
  <pre>
    <span>int</span>
    <span> grabFile(<span>char</span>&amp;#42; input)</span>
  </pre>
  <pre>
    <span>&amp;#123;</span>
    <span>&amp;nbsp;</span>
  </pre>
  <pre>
    <span>&amp;#9;char</span>
    <span>&amp;#42; m_canonical_path;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#9;</span>
      <span>bool</span> result;</span>
  </pre>
  <pre>
    <span>&amp;#9;/&amp;#42; convert here before it&amp;#8217;s too late&amp;#42;/</span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>
      </span>
    </span>
  </pre>
  <pre>
    <span>&amp;#9;canonical_path = ConvertToCanonicalForm(input) ;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;#9;/&amp;#42; check against the canonical file - the safe representation &amp;#42;/</span>
    </span>
  </pre>
  <pre>
    <span>&amp;#9;m_inpuFile = CheckAccessToFile(bad_input_list, m_canonical_path); </span>
  </pre>
  <pre>
    <span>
      <span>&amp;#9;if</span> (result == <span>true</span>) </span>
  </pre>
  <pre>
    <span>&amp;#9;&amp;#9;OpenFile(m_canonical_path);</span>
  </pre>
  <pre>
    <span>&amp;#9;</span>
    <span>
      <span>else</span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#9;&amp;nbsp;&amp;nbsp; </span>
      <span>return</span>
      <span>false</span>;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>return</span>
      <span>true</span>;</span>
  </pre>
  <pre>
    <span>&amp;#125;</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>This code correctly checks the canonical form (</span>
    <span>CheckAccessToFile</span>
    <span>(</span>
    <span>m_canonical_path</span>
    <span>)), but fails to detect any dangerous pattern outside of the blacklist.<span>&amp;nbsp; </span>For example, the attacker might use an unlisted variation like the following one: :</span>
  </p>
  <pre>
    <span>C:\privat~1</span>
    <span>&amp;nbsp;</span>
  </pre>
  <p>
    <b>
      <i>
        <span>Decisions based on white lists</span>
      </i>
    </b>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>Utilizing a white-list is a much better approach to protect against canonicalization attacks.<span>&amp;nbsp; </span>A white list is a list of all valid representations for a file.<span>&amp;nbsp; </span>The server checks the input against the white list and disallows any input strings outside of the white list.<span>&amp;nbsp; </span>This solves the problem of black lists where the attacker finds a variation of a file path that the server is unaware of.</span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>White lists can be implemented as a list of strings or as regular expressions (even though regular expressions are not a physical list, they represent a logical list with all possible matches.)</span>
  </p>
  <p>
    <span>The following pseudo-code illustrates this method:<br /><span>&amp;nbsp;&amp;nbsp;</span></span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
    </span>
  </p>
  <pre>
    <span>int</span>
    <span> grabFile(<span>char</span>&amp;#42; input)</span>
  </pre>
  <pre>
    <span>&amp;#123;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;#9;char</span>&amp;#42; m_inpuFile;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>
      <span>bool</span> result;</span>
  </pre>
  <pre>
    <span>&amp;nbsp;&amp;#9;</span>
    <span>
      <span>/&amp;#42;check against list of good forms of the string &amp;#42;/</span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>m_path = CheckAccessToFile(<span>good_input_list</span>, input);</span>
  </pre>
  <pre>
    <span>&amp;nbsp;&amp;#9;</span>
    <span>
      <span>if</span> (result == <span>true</span>) &amp;#123;</span>
  </pre>
  <pre>
    <span>&amp;#9;&amp;#9;m_inpuFile = Canonicalize(input) <span>//convert to intended form</span></span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>OpenFile(result)</span>
  </pre>
  <pre>
    <span>&amp;#9;&amp;#125; else &amp;#123;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#9;&amp;#9;</span>
      <span>/&amp;#42; disallow if the string is not in the good list &amp;#42;/</span>
    </span>
  </pre>
  <pre>
    <span>&amp;#9;&amp;#9;return</span>
    <span>
      <span>false</span>;</span>
  </pre>
  <pre>
    <span>&amp;#9;</span>
    <span>&amp;#125;&amp;nbsp;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>
      <span>return</span>
      <span>true</span>;</span>
  </pre>
  <pre>
    <span>&amp;#125;</span>
  </pre>
  <p>
    <b>
      <i>
        <span>Decisions based on user privileges</span>
      </i>
    </b>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <p>
    <span>
      <span>
      </span>
    </span>
  </p>
  <p>
    <span>All the code seen so far decides to access a file or folder based on string comparisons.<span>&amp;nbsp; </span>A backup solution consists in using operating system control mechanisms such as Access Controls Lists (ACL&amp;#8217;s.)<span>&amp;nbsp; </span>These access-checking methods don&amp;#8217;t rely on user supplied strings; they depend on the user privileges set by the server&amp;#8217;s administrator.<span>&amp;nbsp;&amp;nbsp;</span></span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>First you have to restrict the folder privileges using ACL&amp;#8217;s.<span>&amp;nbsp; </span>Let&amp;#8217;s say you use ACL&amp;#8217;s to allow only administrators to read, write, and read that folder.<span>&amp;nbsp; </span>Nobody else can read the folder or browse to it.<span>&amp;nbsp; </span>The server runs with admin privileges so you need to create code that lowers the effective privileges on the server:</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <span>
    </span>
    <span>
      <span>bool</span> ShowFile(<span>char</span> &amp;#42; input)</span>
  </pre>
  <pre>
    <span>&amp;#123;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;#9;/&amp;#42; start by changing to lower privileges &amp;#42;/</span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>
      <span>ImpersonateUser(Internet User);</span>
    </span>
  </pre>
  <pre>
    <span>&amp;nbsp;&amp;#9;</span>
    <span>
      <span>try</span>
      <span>&amp;nbsp;&amp;nbsp; </span>&amp;#123;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>OpenFile(input);<span>&amp;nbsp; </span></span>
  </pre>
  <pre>
    <span>&amp;#9;&amp;#125; <span>catch</span> &amp;#123;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#9;</span>
      <span>/&amp;#42; (Internet User doesn't have access) &amp;#42;/</span>
    </span>
  </pre>
  <pre>
    <span>&amp;nbsp;</span>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>/&amp;#42; return to initial privileges &amp;#42;/</span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>RevertToSelf();</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span>
      <span>return</span>
      <span>false</span>;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>&amp;#125;</span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>
      <span>/&amp;#42; return to initial privileges &amp;#42;/</span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>
      <span>RevertToSelf();</span>
    </span>
  </pre>
  <pre>
    <span>
      <span>&amp;#9;return</span>
      <span>true</span>;</span>
  </pre>
  <pre>
    <span>&amp;#125;</span>
  </pre>
  <p>
    <span>Code like this mitigates canonicalization attacks using access control.<span>&amp;nbsp; </span>There are no <i>syntactic</i> decisions, no pattern matching of user supplied paths and bad patterns. Regardless of the path the attacker chooses,<span>&amp;nbsp; </span>if they are unprivileged then the system denies access to that resource.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>Look for all entry points</span>
  </h2>
  <p>
    <span>Now that you&amp;#8217;ve seen examples of both what causes canonicalization bugs and how to fix them, you need to find the possible entry points for problems like this in your application.<span>&amp;nbsp; </span>Depending on what the application does, there may be only one or two pieces of functionality subject to these issues, or there may be many.<span>&amp;nbsp; </span>Start by making a list of these pieces of functionality and then work backwards to all of the entry points that can influence that functionality.<span>&amp;nbsp; </span>Your list of entry points might look like the following:</span>
  </p>
  <ul>
    <li>
      <span>Request.QueryString&amp;#91;path&amp;#93;</span>
      <li>
        <span>&amp;_GET&amp;#91;path&amp;#93;</span>
        <li>
          <span>HTTP variables, via form submission</span>
          <li>
            <span>Shell variables</span>
            <li>
              <span>Database query results</span>
              <li>
                <span>LDAP query results</span>
                <li>
                  <span>Web service return data</span>
                  <li>
                    <span>Thick client user interfaces</span>
                    <li>
                      <span>Etc.</span>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>Specific functions that may be used in functionality affected by canonicalization attacks include:</span>
    <i>
      <span>
      </span>
    </i>
  </p>
  <ul>
    <li>
      <span>fopen() </span>
      <li>
        <span>CreateFile()</span>
        <li>
          <span>FileInputStream</span>
          <li>
            <span>StreamReader</span>
            <li>
              <span>Policy.Allow()</span>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>There are multiple other functions which can be at risk for canonicalization attacks, so ensure you understand what the program is doing and why.</span>
  </p>
  <p>
    <span>Once you&amp;#8217;ve compiled the lists above, putting them into a table like the following will allow you to walk through the high risk components systematically during testing:</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <table>
    <tbody>
      <tr>
        <td>
          <p>
            <span>Component</span>
          </p>
        </td>
        <td>
          <p>
            <span>API</span>
          </p>
        </td>
        <td>
          <p>
            <span>Line</span>
          </p>
        </td>
        <td>
          <p>
            <span>URL</span>
          </p>
        </td>
        <td>
          <p>
            <span>Form</span>
          </p>
        </td>
        <td>
          <p>
            <span>UI</span>
          </p>
        </td>
        <td>
          <p>
            <span>Service</span>
          </p>
        </td>
        <td>
          <p>
            <span>API</span>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>FileBrowser.asp</span>
          </p>
        </td>
        <td>
          <p>
            <span>OpenTextFile</span>
          </p>
        </td>
        <td>
          <p>
            <span>103</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>OpenTextFile</span>
          </p>
        </td>
        <td>
          <p>
            <span>145</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>OpenFile</span>
          </p>
        </td>
        <td>
          <p>
            <span>231</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>Response.php</span>
          </p>
        </td>
        <td>
          <p>
            <span>fopen</span>
          </p>
        </td>
        <td>
          <p>
            <span>1001</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>fopen</span>
          </p>
        </td>
        <td>
          <p>
            <span>1116</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>FileHandler.cpp</span>
          </p>
        </td>
        <td>
          <p>
            <span>CreateFile</span>
          </p>
        </td>
        <td>
          <p>
            <span>234</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>CreateFile</span>
          </p>
        </td>
        <td>
          <p>
            <span>531</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>showAccount.java</span>
          </p>
        </td>
        <td>
          <p>
            <span>FileStreamReader</span>
          </p>
        </td>
        <td>
          <p>
            <span>432</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <u>
                <span>
                </span>
              </u>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>&amp;nbsp;</span>
            </b>
          </p>
        </td>
      </tr>
      <tr>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>FileStreamReader</span>
          </p>
        </td>
        <td>
          <p>
            <span>674</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
        <td>
          <p>
            <b>
              <span>x</span>
            </b>
          </p>
        </td>
        <td>
          <p>
            <span>&amp;nbsp;</span>
          </p>
        </td>
      </tr>
    </tbody>
  </table>
  <p>
    <span>
    </span>&amp;nbsp;</p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 3: Start testing and exploring</span>
  </h1>
  <p>
    <span>The next step is to start testing the implementation of the system using a simple fuzz string and observing how the system responds.<span>&amp;nbsp; </span><span>&amp;nbsp;&amp;nbsp;</span></span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <h2>
    <span>Start with simple fuzz strings and explore results</span>
  </h2>
  <p>
    <span>Start testing with basic entry points such as through a web form. Pick a simple string and submit it through the form:</span>
  </p>
  <pre>
    <span>..\..\..\..\xyz</span>
    <span>
    </span>
  </pre>
  <p>
    <span>Then examine the results looking for any error message.<span>&amp;nbsp; </span>Error messages reveal useful information about what goes on with the web application (or a local application.)<span>&amp;nbsp; </span>For example, a web server might return the following error:</span>
  </p>
  <pre>
    <span>Your request contains invalid characters</span>
  </pre>
  <p>
    <span>This indicates that the server has detected potentially dangerous characters in the string.<span>&amp;nbsp; </span>You could try replacing those characters with their URL encoded form, like so: </span>
  </p>
  <pre>
    <span>
    </span>
    <span>..&amp;#37;5c..&amp;#37;5c..&amp;#37;5c..&amp;#37;5cxyz</span>
  </pre>
  <p>
    <span>Now the server returns a file not found error.<span>&amp;nbsp; </span>This is good because you are now able to navigate to certain directories on the server that you couldn&amp;#8217;t navigate to before.<span>&amp;nbsp; </span>However, since you are trying a fuzz string the server didn&amp;#8217;t find a valid folder.<span>&amp;nbsp; </span>Nonetheless, the server is allowing navigation within the directory hierarchy.<span>&amp;nbsp; </span>The next step is to replace the fuzz string to get access to the target folder:</span>
  </p>
  <pre>
    <span>..&amp;#37;5c..&amp;#37;5c..&amp;#37;5cprivateFiles</span>
    <span>&amp;nbsp;</span>
  </pre>
  <p>
    <span>After only a few tries we reached this test string and found our target.<span>&amp;nbsp; </span>As you can see, if canonicalization allows for it, you may use such techniques for directory traversal attacks which the application believes it is protecting against.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <h1>
    <span>Step 4: Tune test case data</span>
  </h1>
  <p>
    <span>During this step you need to enhance your test cases with different variations to access a resource such as a file or folder.<span>&amp;nbsp; </span>Then you must tune your test case data depending on the entry point under test.<span>&amp;nbsp; </span>Finally, execute double encoding test cases.</span>
  </p>
  <h2>
    <span>Try different ways of accessing the same resource</span>
  </h2>
  <p>
    <span>There are different ways to open a file.<span>&amp;nbsp; </span>For example, you can try to navigate up and down the directory tree while accessing the file.<span>&amp;nbsp; </span>The following string opens the C:\privateFiles folder in Windows:</span>
  </p>
  <pre>
    <span>C:\windows\..\privateFiles</span>
  </pre>
  <p>
    <span>In Windows, you can also read a file&amp;#8217;s data by accessing the data stream:</span>
  </p>
  <pre>
    <span>C:\privateFiles\secretFile.txt::&amp;#36;DATA</span>
  </pre>
  <p>
    <span>During this step you must tweak your test cases to add the most number of representations for each of the protected resources.</span>
  </p>
  <p>
    <b>
      <i>
        <span>&amp;nbsp;</span>
      </i>
    </b>
  </p>
  <h2>
    <span>
    </span>
    <span>Double Encoding</span>
  </h2>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>Double encoding issues occur when the encoding and decoding functions are incorrectly coded and end up building dangerous strings.</span>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>For instance, the following application does the following:</span>
  </p>
  <ul>
    <li>
      <span>
        <span>(1)<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
      </span>
      <span>Checks if the URL contains a </span>
      <span>&amp;#37;2f</span>
      <span>
      </span>
      <li>
        <span>
          <span>(2)<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
        </span>
        <span>Decodes the </span>
        <span>&amp;#36;inputPath</span>
        <span> sent by server</span>
        <li>
          <span>
            <span>(3)<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
          </span>
          <span>Decodes </span>
          <span>&amp;#36;inputPath</span>
          <span> again</span>
          <li>
            <span>
              <span>(4)<span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span></span>
            </span>
            <span>Opens a file based on the last form of </span>
            <span>&amp;#36;inputPath</span>
            <span>
            </span>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <pre>
    <span>&lt;?php</span>
  </pre>
  <pre>
    <span>      &amp;#36;m_encoded_path;</span>
  </pre>
  <pre>
    <span>      inputPath = &amp;#36;_GET&amp;#91;<span>'name'</span>&amp;#93;;</span>
  </pre>
  <pre>
    <span>(1)<span>&amp;nbsp;&amp;nbsp; </span>check if the URL contains &amp;#37;2f.<span>&amp;nbsp; </span>Reject if found</span>
  </pre>
  <pre>
    <span>(2)<span>&amp;nbsp;&amp;nbsp; </span>&amp;#36;inputPath = urldecode(&amp;#36;inputPath);</span>
  </pre>
  <pre>
    <span>(3)<span>&amp;nbsp;&amp;nbsp; </span>&amp;#36;inputPath = urldecode(&amp;#36;inputPath);</span>
  </pre>
  <pre>
    <span>(4)<span>&amp;nbsp;&amp;nbsp; </span>OpenFile(&amp;#36;inputPath);</span>
  </pre>
  <pre>
    <span>?&gt;</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>
    <span>An attacker can pass the following string to attempt accessing a file named &amp;#8220;</span>
    <span>../../private/SecretFile.doc</span>
    <span>&amp;#8221; located an upper folder.<span>&amp;nbsp; </span>Here the attacker uses a double encoded string:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <pre>
    <span>http://www.anywebsite/app/name=..&amp;#37;25252f..&amp;#37;25252f../private/SecretFile.doc </span>
    <span>&amp;nbsp;</span>
  </pre>
  <p>
    <span>These are the results of running this URL through the code above:</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <ul>
    <li>
      <span>Server checks for &amp;#37;2f and doesn&amp;#8217;t find one, so it doesn&amp;#8217;t reject the URL (1).</span>
      <li>
        <span>The first decoding function (2) translates the original string to:&amp;nbsp; </span>
        <b>
          <span>http://www.anywebsite/app/name=..&amp;#37;2f..&amp;#37;..2f../private/SecretFile.doc </span>
        </b>
        <li>
          <span>The second decoding changes the path to a dangerous one: </span>
          <b>
            <span>http://www.anywebsite/app/ name=../../../private/SecretFile.doc </span>
          </b>
          <li>
            <span>The attacker opens the private file.</span>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>&amp;nbsp;</p>
  <h2>
    <span>Tune tests depending on each entry point</span>
  </h2>
  <p>
    <span>Finally, to achieve proper coverage, you must cover the different ways of submitting input to your application:</span>
  </p>
  <ul>
    <li>
      <span>
        <span>
          <span>&amp;nbsp;</span>
        </span>
      </span>
      <span>URL - In different encoding schemes depending on servers and browsers.</span>
      <li>
        <span>GUI of a local application - through common client-side text fields and buttons, command line arguments, any files loaded during runtime, the registry, or environment variables.</span>
        <li>
          <span>Policy Decision - usually a file or database containing rules and conditions such as antivirus policies.</span>
        </li>
      </li>
    </li>
  </ul>
  <p>
    <span>Look at the complete list of entry points made during step 2 and use your intuition during the testing phase to include any additional entry points.<span>&amp;nbsp; </span>Each entry point has a different format that you must take into account during testing.</span>
  </p>
  <p>
    <span>&amp;nbsp;</span>
  </p>
  <p>
    <span>
    </span>
  </p>
  <h1>
    <span>Conclusions</span>
  </h1>
  <p>
    <span>Canonicalization bugs are relatively easy to tackle.<span>&amp;nbsp; </span>First you need to understand why these bugs occur through their common attack scenarios.<span>&amp;nbsp; </span>Then learn why these bugs happen and how to mitigate them by using white lists and/or ACL&amp;#8217;s instead of black lists, and check the input paths at the correct time.<span>&amp;nbsp; </span>After listing the high risk components and entry points, start testing with a simple fuzz string to see how the application reacts to it.<span>&amp;nbsp; </span>Finish by tuning your test cases with different attack variations based on the format of each entry point. Ensure that you understand any different encodings in use and tune your data according to specific rules needed based on context.</span>
  </p>]]></Data>
  </Content>
</TeamMentor_Article>