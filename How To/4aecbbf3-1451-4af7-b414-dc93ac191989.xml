<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1266550597" Content_Hash="819201222">
  <Metadata>
    <Id>4aecbbf3-1451-4af7-b414-dc93ac191989</Id>
    <Id_History>4aecbbf3-1451-4af7-b414-dc93ac191989,b1163023-0d77-4d04-82bd-d5ec0d2df147,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>How to Test for Session Prediction Bugs in ASP .NET</Title>
    <Category>Testing</Category>
    <Phase>Test</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Session Prediction Bugs in ASP .NET</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>ASP.NET 3.5</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>Summary</span>
  </h1>
  <p>ASP .NET applications use sessions to relate authentication and authorization decisions with the following activities of a user.<span>&amp;nbsp; </span>Sessions are tracked with session identifiers (or session IDs), ensuring they have been authenticated before allowing access certain areas of an application or performing particular transactions. <span>&amp;nbsp;</span>For example, an online banking application requires a valid session ID before its clients can access their account details or make transfers.<span>&amp;nbsp; </span>An application commonly creates and assigns a session ID to its clients at login time, after their credentials have been checked.<span>&amp;nbsp; </span>Later, before allowing the clients to browse through different pages or execute specific functionality, the application checks the session ID sent in the client&amp;#8217;s request against a server copy of the client&amp;#8217;s session ID and allows the request if they match. </p>
  <p>During a session prediction attack, an attacker observes the algorithm the application uses to create new session identifiers in an attempt of discovering a pattern.<span>&amp;nbsp; </span>The attacker&amp;#8217;s goal is being able to predict a valid session ID corresponding to another user in order to impersonate or spoof the user.<span>&amp;nbsp; </span></p>
  <p>It is recommended to follow these steps to test for session prediction bugs:</p>
  <ul>
    <li>Step 1: Understand attack scenarios <li>Step 2: Analyze causes and countermeasures <li>Step 3: Start testing and exploring <li>Step 4: Execute additional testing</li></li></li></li>
  </ul>
  <p>&amp;nbsp;</p>
  <h1>
    <span>Step 1: Understand Attack Scenarios</span>
  </h1>
  <p>The first step in testing for session prediction bugs is to identify its attack scenario.<span>&amp;nbsp;&amp;nbsp; </span></p>
  <p>Before reviewing a session prediction it is important to understand how and why Internet applications use session identifiers.<span>&amp;nbsp; </span>Internet applications such as e-commerce sites require their clients to enter valid usernames and passwords to log in to the application.<span>&amp;nbsp; </span>To avoid prompting clients to re-enter their credentials as they navigate through the application and execute transactions, the application creates a session ID for the logged in client and periodically checks it to verify the client&amp;#8217;s authenticity with every request.<span>&amp;nbsp;&amp;nbsp; </span></p>
  <p>After successful logins, new session IDs are usually sent to clients as a cookie (using the Set-Cookie header) or in the URL.<span>&amp;nbsp; </span>Once the client receives the session ID, it sends it in future HTTP requests.</p>
  <p>In detail:</p>
  <ol>
    <li>A client enters valid username and password in response to an application request <li>The application creates a session ID and sends it to client <li>The client receives session ID <li>The client makes an HTTP(s) request to application that requires authentication, it includes session ID received in step 4 <li>The application checks if the session ID sent by the client is valid and replies to the request based on value of the valid session ID</li></li></li></li></li>
  </ol>
  <p>A session prediction attack begins with an attacker selecting a target Internet application.<span>&amp;nbsp; </span>The attacker starts by monitoring the application&amp;#8217;s session ID generation scheme.<span>&amp;nbsp; </span>The attacker looks for a pattern in the session IDs collected, such as incrementing characters, time stamps, or parts of the client&amp;#8217;s name used in the session ID.<span>&amp;nbsp; </span>If the attacker discovers a weak session ID generation algorithm, they may be able to predict a valid session during a session hijacking attack, allowing them to replace their current session ID with the value of the predicted one.<span>&amp;nbsp; </span>If the application is vulnerable to session hijacking, the attacker will be able to impersonate another logged in user.<span>&amp;nbsp;&amp;nbsp; </span></p>
  <p>In detail:</p>
  <ol>
    <li>An attacker starts monitoring network traffic <li>The attacker logs in to the target application by entering valid username and password <li>The application creates a session ID and sends it to client <li>The attacker repeats steps 2 and 3 until a valid session ID until determining if predicting future session IDs is possible. <li>If step 4 shows that session prediction is possible, continue with a <i>session hijacking</i> attack. </li></li></li></li></li>
  </ol>
  <p>Note that the attack ends in step 4, after determining the feasibility of predicting a valid session ID.<span>&amp;nbsp; </span>To test the exploitability of attack it is necessary to hijack a session.<span>&amp;nbsp; </span></p>
  <p>&amp;nbsp;</p>
  <h1>
    <span>Step 2: Analyze Causes and Countermeasures</span>
  </h1>
  <p>The next step in testing for session prediction bugs is to understand what causes them and how to protect against them.</p>
  <h2>
    <span>
      <em>Session Prediction Causes</em>
    </span>
  </h2>
  <p>ASP .NET provides a framework for authentication and session-id management using the <i>Session</i> object.<span>&amp;nbsp; </span>However, developers might also implement their own using cookies.<span>&amp;nbsp; </span>First, a session ID is set:</p>
  <pre>
    <span>Response.Cookies&amp;#91;"Session-ID"&amp;#93;.Value = "user01";</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>Then, before allowing the client to perform a request, the code checks the value of the cookie against the expected value:</p>
  <pre>
    <span>if (Request.Cookies&amp;#91;"Session-ID"&amp;#93;.Value == "user01")<br />&amp;#123;<br />&amp;#9;Response.Write("authenticated");&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;#125;</span>
    <span>&amp;nbsp;</span>
  </pre>
  <p>Developers <span>&amp;nbsp;</span>should not implement their own session ID generation scheme, as they can suffer from low entropy and similar insecurities that make them easy to predict.</p>
  <h2>
    <em>Low entropy session IDs</em>
  </h2>
  <p>The principal cause of session prediction bugs is that sessions are not random enough&amp;#8212;they have low entropy.<span>&amp;nbsp; </span>For instance, a session ID generation algorithm might create user sessions like this:</p>
  <pre>
    <span>AWEG00013BCD<br />AWFG00014BCD<br />AWGG00015BCD<br />AWHG00016BCD<br />AWIG00017BCD</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>By analyzing the above session IDs, an attacker can easily predict the following ones:</p>
  <pre>
    <span>AWJG00018BCD<br />AWKG00019BCD<br />AWLG00019BCD&amp;nbsp;</span>
  </pre>
  <p>Low entropy session IDs include sessions that are too short in length or use predictable time stamps.</p>
  <h2>
    <em>Using client credentials as session IDs</em>
  </h2>
  <p>Some applications construct their session IDs using client&amp;#8217;s credentials.<span>&amp;nbsp; </span>For instance, an application might build its sessions IDs by using the client&amp;#8217;s email address:</p>
  <pre>
    <span>sid=user01&amp;#64;example.com</span>
  </pre>
  <p>
    <span>
    </span>
  </p>
  <p>An attacker might be able to execute a successful attack by replacing its session ID with the email of the target client.<span>&amp;nbsp; </span>Applications should use client credentials as part of the session ID only if they are combined with an additional high entropy string:</p>
  <pre>
    <span>session-id:<span>&amp;nbsp; </span>user01<span>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </span><strong>Wrong</strong></span>
  </pre>
  <pre>
    <span>session-id: AA932n90f20dfwuih1QAxxy-user01<span>&amp;nbsp; </span><span>&amp;nbsp;&amp;nbsp;&amp;nbsp; </span><strong>OK</strong></span>
  </pre>
  <p>
    <b>
      <i>
        <span>
        </span>
      </i>
    </b>
  </p>
  <h2>
    <span>
      <em>Session Prediction Countermeasures</em>
    </span>
  </h2>
  <p>To protect against session prediction attacks in ASP .NET applications, developers should take advantage of the ASP.NET built in session functionality.<span>&amp;nbsp; </span>ASP.NET can automatically create a session ID with enough entropy (120 bits) to protect it against session prediction attacks.<span>&amp;nbsp; </span><span>&amp;nbsp;&amp;nbsp;</span></p>
  <p>Note that protecting against session prediction is different from protecting against session hijacking.<span>&amp;nbsp; </span>Session prediction protection focuses on creating high entropy session IDs, while session hijacking protection includes using additional defenses like authentication and SSL.<span>&amp;nbsp; </span>For more information about session hijacking vulnerabilities, refer to the <i>Testing for Session Hijacking Bugs</i> article.</p>
  <p>&amp;nbsp;</p>
  <h1>
    <span>Step 3: Start Testing and Exploring</span>
  </h1>
  <p>Now that you have understood session prediction attack scenarios, as well as what causes and how to protect against them, it is necessary to execute basic test cases and explore their results.</p>
  <p>
    <b>
      <i>Test for low entropy session IDs</i>
    </b>
  </p>
  <p>Follow these steps:</p>
  <ol>
    <li>Download and run the Burp suite, turning intercept off <li>Open a web browser and set connection options to use the Burp proxy <li>Log in to the target application with a valid username and password <li>Wait for application to reply with a session ID (can be in cookie, URL, or body) <li>In the Burp suite, click on the &amp;#8220;Proxy&amp;#8221; tab and the &amp;#8220;History&amp;#8221; sub-tab <li>Identify the HTTP authentication request, right-click on it, and select &amp;#8220;Send to Sequencer&amp;#8221; <li>In the Burp suite click on the &amp;#8220;Sequencer&amp;#8221; tab and the &amp;#8220;Live capture&amp;#8221; sub-tab <li>Select the request and identify the session ID <li>Click &amp;#8220;start capture&amp;#8221; and wait for the Burp sequencer to give a report</li></li></li></li></li></li></li></li></li>
  </ol>
  <p>Expected results: The session ID should be at least 128 bits, with at least 64 bits of effective entropy.<span>&amp;nbsp; </span>If the Burp sequencer reports a rating of medium or poor, the application is vulnerable to session prediction.</p>
  <p>For detailed information about using the Burp sequencer to test session ID entropy, refer to the Burp Sequencer Help page, which has simple instructions and screenshots:<span>&amp;nbsp; </span><a href="http://portswigger.net/sequencer/help.html">http://portswigger.net/sequencer/help.html</a></p>
  <h2>
    <em>Test for client credentials in session IDs</em>
  </h2>
  <p>Follow these steps:</p>
  <ol>
    <li>Download and run Wireshark <li>Open a web browser <li>Log in to the target application with a valid username and password <li>In Wireshark, identify the session ID <li>Look for client credentials in the session ID</li></li></li></li></li>
  </ol>
  <p>Expected results:<span>&amp;nbsp; </span>The session ID should not consist of client credentials, usernames, or any other fixed strings unless a sufficient amount of random data is also present, as fixed strings are easy to predict.<span>&amp;nbsp; </span><span></span></p>
  <p>&amp;nbsp;</p>
  <h1>
    <span>Step 4: Execute Additional Testing</span>
  </h1>
  <p>Make sure you cover all entry points for session prediction attacks.<span>&amp;nbsp; </span>Although many applications commonly send session IDs in cookies, some applications use other methods such as hidden variables or parameters in the URL.<span>&amp;nbsp; </span>In either case, it is necessary for attackers to identify the location used by the application.<span>&amp;nbsp; </span>Below are two examples of URLs containing a session ID:</p>
  <pre>
    <span>http://example.com/<strong>34i77i2af12xxz</strong>/example.aspx</span>
  </pre>
  <pre>
    <span>http://example.com/example.aspx?sid=<strong>34i77i2af12xxz</strong></span>
  </pre>
  <p>The first example uses the session ID as a URL directory mapping such as the one used by cookieless ASP.NET, while the second employs a URL parameter.</p>
  <p>The code below shows a session ID passed as a POST request variable using a hidden input tag:</p>
  <pre>&lt;form action="/example.aspx" method="post"&gt;</pre>
  <pre>....<br />&amp;nbsp;<br />&lt;input type="hidden" name="session-id" value="user01" /&gt;<br />&lt;input type="hidden" name="user-account" value="324802581" /&gt;<br />&amp;nbsp;<br />&lt;input type="submit" name="Continue"&gt;<br />&lt;/form&gt;<br />&amp;nbsp;</pre>
  <h1>
    <span>Conclusions</span>
  </h1>
  <p>Session prediction bugs affect ASP .NET applications that implement their own session ID generation scheme instead of using ASP.NET built in sessions.<span>&amp;nbsp; </span>To test for session prediction vulnerabilities in ASP.NET applications it is necessary to understand how a session prediction attack is executed as well as what causes and how to protect against it in ASP.NET.<span>&amp;nbsp; </span>Then, you must measure the entropy of the session ID generation and test for the session IDs consisting of only fixed strings like client credentials .<span>&amp;nbsp; </span>Finally, make sure to cover all the different entry points for session prediction bugs, including URLs and hidden input tags.</p>
  <p>&amp;nbsp;</p>]]></Data>
  </Content>
</TeamMentor_Article>