<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1330177165" Content_Hash="1965794950">
  <Metadata>
    <Id>4d8ec10e-c7a3-4fda-bacc-4a46556feadb</Id>
    <Id_History>4d8ec10e-c7a3-4fda-bacc-4a46556feadb,4bfdbbb5-c113-47bc-8395-9ccad377c5a8,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>How to Test for Exception Information Disclosure Bugs in ASP.NET</Title>
    <Category>Testing</Category>
    <Phase>Test</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Exception Information Disclosure Bugs in ASP.NET</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>Summary</span>
  </h1>
  <p>The information in error messages is valuable to software developers because it helps them to know what causes the application to fail and how to remedy the error. However, this information can be abused if it falls into the wrong hands. Attackers often leverage information from exceptions or error messages in order to execute their attacks. </p>
  <p>Follow these steps to test for exception information disclosure bugs:</p>
  <ul>
    <li>Step 1: Understand attack scenarios <li>Step 2: Analyze causes and countermeasures <li>Step 3: Start testing and exploring <li>Step 4: Execute additional testing</li></li></li></li>
  </ul>
  <p>&amp;nbsp;</p>
  <h1>
    <span>Step 1: Understand Attack Scenarios</span>
  </h1>
  <p>During the first step, we will review three common ASP.NET exception information disclosure attack scenarios:</p>
  <ol>
    <li>Executing higher risk attacks <li>Disclosing source code <li>Discovering application inner workings </li></li></li>
  </ol>
  <h2>
    <em>Executing higher risk attacks</em>
  </h2>
  <p>A common exception information disclosure scenario enables attackers to execute higher risk attacks, such as SQL injection, that would otherwise be impossible. For instance, in order to execute SQL injection attacks that involve querying or modifying the target database, the attacker needs to somehow discover information about the database structure, such as table and column names. By sending malformed input and causing the application to fail, the attacker can gather database information through exceptions and then build the appropriate attack strings.</p>
  <p>For instance, an ASP.NET web application may use a web form with two input textboxes to login. An attacker will start testing for SQL injection by submitting the following values in the web form:</p>
  <pre>
    <span>Username: <span>a' OR 1=1</span></span>
  </pre>
  <pre>
    <span>Password: abc</span>
  </pre>
  <p>The application returns an error message as shown in Figure 1.</p>
  <p>&lt;&lt;insert figure&amp;nbsp;1 here&gt;&gt;&amp;nbsp;</p>
  <p>
    <b>
      <span>Figure 1 - ASP .NET error message revealing SQL server database</span>
    </b>
  </p>
  <p>The SQL exception tells the attacker that the back-end storage consists of a SQL Server database and that the table contains a column named <i>password</i>. It is also a clear indicator that SQL injection is possible, because it shows that the dangerous string the attacker submitted has altered the syntax of a SQL statement and caused the query to fail. With this acquired knowledge, the attacker then modifies the attack string with the appropriate comment characters:</p>
  <pre>
    <span>a' OR 1=1--</span>
    <span>
    </span>
  </pre>
  <p>Moreover, knowing that the target database is SQL helps the attacker to build a more dangerous injection that involves meta-tables and system stored procedures such as <i>xp_cmdshell</i>, and tells the attacker that batch commands are possible: </p>
  <pre>
    <span>'; exec master..xp_cmdshell 'net user /add Attacker'&amp;#8212;</span>
    <span>
    </span>
  </pre>
  <pre>
    <span>
    </span>
  </pre>
  <pre>
    <span>'; update Accounts set balance = 1000000 when username = 'Attacker'&amp;#8212;</span>
    <span>&amp;nbsp;</span>
  </pre>
  <p>A generic error message such as &amp;#8220;Login failed&amp;#8221; could have discouraged the attacker. Not protecting the exception information from the application&amp;#8217;s end users leads to further exploration and <span>&amp;nbsp;</span>to a higher risk of attack, including SQL injection.</p>
  <h2>
    <em>Disclosing Source Code </em>
  </h2>
  <p>An attacker can leverage exception information disclosure in an attempt to steal the application&amp;#8217;s source code. For instance, the ASP.NET exception shown in Figure 2 reveals the source code file name and directory.</p>
  <p>&lt;&lt;insert figure 2 here&gt;&gt;</p>
  <p>
    <b>
      <span>Figure 2 - ASP .NET error message revealing name of source code file </span>
    </b>
  </p>
  <p>&amp;nbsp;Now that the attacker knows what to look for, another attack such as command injection can be used to grab the file: </p>
  <pre>
    <span>filename.txt<span>'&amp;#124;type c:\inetpub\wwwroot\example\login.aspx.cs </span></span>
  </pre>
  <p>This assumes that the application is vulnerable to command injection. Nonetheless, if the application didn&amp;#8217;t divulge the location of the source file for the ASP.NET page login.aspx, the attack would not have been feasible.</p>
  <h2>
    <em>Discovering an Application&amp;#8217;s Inner Workings</em>
  </h2>
  <p>In the last scenario, the attacker focused on discovering how the application works by interpreting the meaning of error messages. For instance, an application responds to a file query a with a &amp;#8220;file not found&amp;#8221; error for some file queries, but with &amp;#8220;access denied&amp;#8221; for others. With this information, the attacker discovers the presence of some protected files and can start inferring how the application works. </p>
  <p>&amp;nbsp;<b><span>&amp;nbsp;</span></b></p>
  <h1>
    <span>Step 2: Analyze Causes and Countermeasures</span>
  </h1>
  <p>The following step in testing for ASP.NET exception information disclosure is to determine what causes it and how to defend against it. </p>
  <h2>
    <em>Handling Exceptions at the Application Level</em>
  </h2>
  <p>The first cause of exception information disclosure in ASP.NET is the lack of exception handling. For instance, if the database becomes unavailable or the text box parameters have an incorrect syntax, the following code will trigger an unhandled exception that will result in IIS showing the stack trace for the problem.</p>
  <pre>
    <span>SqlConnection m_conn = new SqlConnection("Data Source=SQLServer1;Initial Catalog=example;Integrated Security=True");<br />m_conn.Open();<br />SqlCommand m_command = m_conn.CreateCommand();<br />m_command.CommandText = "select &amp;#42; from Accounts where username = '" &amp;#43;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; txbUserName.Text &amp;#43; "' and password = '" &amp;#43;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; txbPassword.Text &amp;#43; "'";<br />SqlDataReader m_reader = m_command.ExecuteReader();<br />m_conn.Close(); </span>
  </pre>
  <p>
    <span>Adding structured exception handling with try, catch, and finally blocks that print generic error messages would prevent the disclosure of exception information.</span>
  </p>
  <pre>
    <span>try<br />&amp;#123;<br />&amp;#9;SqlConnection m_conn = new SqlConnection("Data Source=SQLServer1;Initial Catalog=example;Integrated Security=True");<br />&amp;nbsp;&amp;nbsp; &amp;#9;m_conn.Open();<br />&amp;#9;&amp;nbsp;&amp;nbsp; SqlCommand m_command = m_conn.CreateCommand();<br />&amp;#9;m_command.CommandText = "select &amp;#42; from Accounts where username = '" &amp;#43; txbUserName.Text &amp;#43; "' and password = '" &amp;#43; txbPassword.Text &amp;#43; "'";<br />&amp;#9;SqlDataReader m_reader = m_command.ExecuteReader();<br />&amp;nbsp;&amp;nbsp; &amp;#9;m_conn.Close();<br />&amp;#125;<br />catch &amp;#123;<br />&amp;#9;Response.Write("Application Error - Try again later");<br />&amp;#125;<br /></span>
  </pre>
  <p>Note that the above example is given as a proof-of-concept to show that the try/catch block stops the application from crashing. However, generic try/catch blocks are not good programming practice for exception handling. </p>
  <p>Another way to handle exceptions at the application level in ASP.NET is by adding the Global class to the project (Global.asax). When adding this item in Visual Studio, the <span>Application_Error </span>routine is automatically created. In production sites, this function must be filled with a generic error message that doesn&amp;#8217;t divulge exception information:</p>
  <pre>
    <span>
      <span>void Application_Error(object sender, EventArgs e) <br />&amp;#123; <br />&amp;#9;// Code that runs when an unhandled error occurs<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#9;Response.Write("Application Error");<br />&amp;#125;</span>
    </span>&amp;nbsp;</pre>
  <h2>
    <em>Handling Exceptions at the Page Level</em>
  </h2>
  <p>The ASP.NET default configuration shows too much exception information when an application fails. This happens because the <i>web.config</i> file of an ASP.NET application site doesn&amp;#8217;t fill the <i>customErrors</i> tag by default (see Figure 3).</p>
  <p>&lt;&lt;insert figure&amp;nbsp;3 here&gt;&gt;&amp;nbsp;</p>
  <p>
    <b>
      <span>Figure 3 - <i>customErrors</i> tag in ASP .NET web.config file&amp;nbsp;</span>
    </b>&amp;nbsp;</p>
  <p>As the comment in the illustration above indicates, the developer must set the <i>customErrors</i> tag to protect against this vulnerability. However, you can use the same redirect for all status code in order to reveal as little as possible:</p>
  <pre>
    <span>&lt;customErrors mode="On" defaultRedirect="GenericErrorPage.htm"&gt;<br />&amp;#9;&lt;error statusCode="403" redirect="GenericErrorPage.htm" /&gt;<br />&amp;nbsp;&amp;nbsp; &amp;#9;&lt;error statusCode="404" redirect="GenericErrorPage.htm" /&gt;<br />&amp;nbsp;&amp;nbsp; &amp;#9;&lt;error statusCode="500" redirect="GenericErrorPage.htm" /&gt;<br />&lt;/customErrors&gt;<br />&amp;nbsp; </span>
  </pre>
  <p>An alternative is setting the <i>customErrors</i> mode to <i>RemoteOnly</i> so that internal application developers get detailed error messages while end users get a generic error. The GenericErrorPage.htm would be a simple HTML page with a generic error message:</p>
  <pre>
    <span>&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;<br />&lt;head&gt;<br />&amp;nbsp; &lt;title&gt;Application Error&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&lt;h2&gt;Application Error&lt;/h2&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;<br />&amp;nbsp;</span>
    <span>
      <br />&amp;nbsp;</span>
  </pre>
  <h1>
    <span>Step 3: Start Testing and Exploring</span>
  </h1>
  <p>Now that you understand the attack scenarios, what causes them, and how to protect against exception information disclosure, you must continue by submitting different test cases in order to discover and correct this vulnerability.</p>
  <h2>
    <em>Submit malicious input</em>
  </h2>
  <p>The primary goal when testing for information disclosure bugs is to make the application fail in unexpected ways. Start by submitting unexpected input consisting of malicious attack strings such as OWASP Fuzz Vectors &amp;#91;i&amp;#93;, escape and especial characters, and exceedingly long strings.</p>
  <p>
    <b>
      <i>Change data types</i>
    </b>
  </p>
  <p>Applications may also fail due to incorrect handling of types. For instance, an application uses the id parameter of the URL below to identify a user and get the user&amp;#8217;s profile:<b><span></span></b></p>
  <pre>
    <span>http://www.example.com/getProfile.aspx?id=<strong>112</strong>&amp;username=testuser</span>
  </pre>
  <p>Changing the type of the id to a string might generate and invalid type exception:</p>
  <pre>
    <span>http://www.example.com/getProfile.aspx?id=<span><strong>abc</strong></span>&amp;username=testuser</span>
  </pre>
  <h2>
    <em>Remove parameters</em>
  </h2>
  <p>Along the same lines of changing data types, you must continue by deleting the parameters passed back and forth by the application. This includes parameters passed from hidden input tags in POST web forms; this requires the use of a proxy such as Burp Proxy or WebScarab in order to modify or delete them (see Figure 4). </p>
  <div>
    <p>&lt;&lt;insert figure&amp;nbsp;4here&gt;&gt;&amp;nbsp;</p>
  </div>
  <p>
    <b>
      <span>Figure 4 - Using Burp Suite to modify hidden web form parameters in an ASP .NET request</span>
    </b>&amp;nbsp;</p>
  <p>Finally, make sure to remove all parameters and directly invoke pages in the application; this may also cause the application to fail.</p>
  <h2>
    <em>Observe how the application responds</em>
  </h2>
  <p>It is extremely important that as you execute the test cases above, you pay close attention to how the application reacts to the given input. Sometimes the application won&amp;#8217;t give explicit exception information, but instead provide error messages with subtle differences. In order to infer how the error messaging scheme works and to attack the application, you must be able to catch any subtle differences between error messages.</p>
  <p>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <h1>
    <span>Step 4: Execute Additional Testing</span>
  </h1>
  <p>Now that you&amp;#8217;ve executed the first round of test cases, you need to tune test case data and automate the process.</p>
  <h2>
    <em>Use different encodings</em>
  </h2>
  <p>ASP.NET web applications might choose to use different encoding methods, depending on the underlying platform. For instance, the following two URLs are actually identical:<b><span></span></b></p>
  <pre>
    <span>http://www.example.com/getProfile?id=a'&amp;#43;OR&amp;#43;1&amp;#37;3D1&amp;#37;23&amp;username=testuser</span>
  </pre>
  <pre>
    <span>http://www.example.com/getProfile?id=a'&amp;#37;20OR&amp;#37;021=1#&amp;username=testuser</span>
  </pre>
  <p>Escape and special characters can have different interpretations. It is important that you try different encodings to cause the application to fail.<b><span></span></b></p>
  <h2>
    <em>Automate Test Cases</em>
  </h2>
  <p>Finally, submitting numerous test cases by hand is tedious. Instead, automate the test case submission and verification process. There are many automated malicious string testing tools (<i>fuzzers</i>) online to help you in this process, such as OWASP&amp;#8217;s WebScarab &amp;#91;ii&amp;#93;. Learn to use at least one fuzzing tool in order to help you execute more test cases in less time.</p>
  <p>
    <b>
      <span>&amp;nbsp;</span>
    </b>
  </p>
  <h1>
    <span>Conclusions</span>
  </h1>
  <p>Addressing exception information disclosure bugs is required during the security testing phase of application development, and should become a development policy of any security-conscious team.<span>&amp;nbsp; </span>This paper presented three of the most common attack scenarios to help you understand the impact of this vulnerability, as well as what causes this bug and the methods to protect against it in ASP.NET web applications. The testing sections describe the multiple test methodologies required to properly hunt down information disclosure bugs. Be alert while executing tests on the application with different input strings in order to catch any error messages that may reveal more than they should.<b><span></span></b></p>
  <div>
    <br />
    <hr />
    <div>
      <p>
        <span>&amp;#91;i&amp;#93; <b>Fuzzing with WebScarab</b>. OWASP. </span>
        <a href="http://www.owasp.org/index.php/Fuzzing_with_WebScarab">
          <span>http://www.owasp.org/index.php/Fuzzing_with_WebScarab</span>
        </a>
        <br />
      </p>
    </div>
  </div>
  <p>
    <span>&amp;#91;ii&amp;#93; <strong>OWASP Testing Guide Appendix C: Fuzz Vectors.&amp;nbsp;</strong>OWASP.&amp;nbsp;</span>
    <span>
      <a href="http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors">
        <span>http://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_C:_Fuzz_Vectors</span>
      </a>
    </span>
    <span>
    </span>
  </p>]]></Data>
  </Content>
</TeamMentor_Article>