<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-2090312298" Content_Hash="-1806618194">
  <Metadata>
    <Id>b47363a3-a1da-47dc-880a-91477bd9d9bf</Id>
    <Id_History>1d2ac8cc-b706-4f4f-84b4-773a525a6c8d,</Id_History>
    <Library_Id>c4b9cb6a-4561-4451-9b6c-4e59d73584f6</Library_Id>
    <Title>How to Test for Network Credential Sniffing Bugs in Java</Title>
    <Category>Authentication</Category>
    <Phase>Test</Phase>
    <Technology>Java</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Network Credential Sniffing Bugs in Java</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>
    <span>Applies to</span>
  </h1>
  <ul>
    <li>J2EE applications</li>
  </ul>
  <h1>
    <span>Summary</span>
  </h1>
  <p>Network credential sniffing attacks<span>&amp;nbsp; </span>are network eavesdropping attacks where the attacker&amp;#8217;s goal is to capture authentication packets in order to reveal data that might be used in an authentication scheme, such as username and password.<span></span>Applications that don&amp;#8217;t encrypt client credentials before transmitting them or&amp;nbsp;don't secure the connection through which authentication occurs are vulnerable to this attack.</p>
  <p>Follow these steps to test for network credential sniffing bugs in J2EE:</p>
  <ul>
    <li>Step 1: Understand attack scenarios <li>Step 2: Analyze causes and countermeasures <li>Step 3: Execute test cases</li></li></li>
  </ul>
  <h1>
    <span>Step 1: Understand Attack Scenarios</span>
  </h1>
  <p>First, it is necessary to understand the different attack scenarios pertaining to network credential sniffing bugs. </p>
  <p>A network credential sniffing attack starts with an attacker selecting a victim client that authenticates with a J2EE web application by providing a username and password combination over the network.<span></span>The next step is for the attacker to eavesdrop the network connection in order to monitor -or sniff- the authentication packets exchanged by the client and the application during login.<span>&amp;nbsp;</span>The attacker chooses a specific network eavesdropping attack depending on the attacker&amp;#8217;s access to the target network as well as the type of target network (hub-based, switch-based, etc.).Network eavesdropping attacks include but are not limited to:</p>
  <ul>
    <li>hub-based networks such as promiscuous mode sniffing <li>switch-based networks attacks such as ARP poisoning or DHCP spoofing <li>WLAN attacks, including attacks that need breaking a wireless key <li>attacks where the attacker sniffs packets from the Internet such as attacking a BGP router. </li></li></li></li>
  </ul>
  <p>Note that a credential sniffing attack is an extension of a network eavesdropping attack.<span></span>Thus, the attack scenario described here as well as the test cases in the testing section will not go into detail about a network eavesdropping attack.<span></span>To learn how to&amp;nbsp;handle network eavesdropping attacks, refer to Team Mentor&amp;#8217;s article <a href="/article/9d626c0e-ea08-417f-b6ff-909fc6b850b1">How to Test for Network Eavesdropping Bugs</a><em>.</em></p>
  <p>While eavesdropping on&amp;nbsp;the target&amp;#8217;s client connection, the attacker uses a network monitoring tool to capture and read the authentication packets.<span></span>If the application doesn&amp;#8217;t properly encrypt the connection, the attacker retrieves the client&amp;#8217;s credentials in clear text or in weak encryption that can be broken later. </p>
  <p>In detail:</p>
  <ol>
    <li>The attacker selects a target client. <li>The attacker executes a network eavesdropping attack on the connection between the target client and the J2EE application. <li>The attacker uses a packet monitoring tool to capture authentication packets <li>If the application is vulnerable, the attacker reads the client credentials in clear text or&amp;nbsp;in the case of&amp;nbsp;weak encryption, which is trivial to break and recover the clear text.</li></li></li></li>
  </ol>
  <h1>
    <span>Step 2: Analyze Causes and Countermeasures</span>
  </h1>
  <p>Next, it is necessary to analyze what makes credential sniffing attacks possible and how to protect against them.<span>&amp;nbsp;&amp;nbsp; </span></p>
  <h2>
    <span>
      <em>Authentication Schemes</em>
    </span>
  </h2>
  <p>There are different authentication schemes available to J2EE web applications.</p>
  <span>
  </span>The common authentication schemes available are: <ul><li>basic <li>digest <li>web forms <li>authentication using a secure channel such as SSL/TLS or IPSec.<span></span></li></li></li></li></ul><p>Applications that choose basic or digest authentication are prone to network credential sniffing, as these are weak authentication schemes:</p><ul><li>Basic authentication sends the password as a base-64 encoded value which can be easily decoded by attackers.<span>&amp;nbsp; </span>Most J2EE web applications won&amp;#8217;t use this authentication scheme for remote clients; however, applications might choose to use basic authentication for local network users. <li>Digest authentication is more secure since it uses an MD5 hash with a nonce (number used once) to encrypt the password before sending it over the wire; nonetheless, digest authentication is only secure if properly configured, and it can fall victim to man-in-the-middle (MitM) attacks where an attacker that is intercepting authentication packages can tell the client to use Basic authentication or legacy digest authentication.<span>&amp;nbsp;&amp;nbsp; </span><span>&amp;nbsp;</span></li></li></ul><p>Web applications can also implement authentication using common HTML web forms.<span></span>Here developers must add the necessary code to the application to ask for the client&amp;#8217;s username and password and send the request to the application once the form is submitted.<span>&amp;nbsp;</span>The username and password<span></span>will travel in clear text unless the application encrypts the password before sending it to the server of if the authentication packet is sent over a secure connection such as SSL/TLS.</p><p>Hence, to properly protect against network credential sniffing attacks, applications must perform authentication through a secure channel.<span>&amp;nbsp;</span>This means that before any authentication packets are exchanged between the client and the server, the client and server must establish an encrypted channel using public key encryption using digital certificates like those used in SSL/TLS or HTTPS.</p><h2><span><em>Configuring J2EE Authentication</em></span></h2><p>To avoid network credential sniffing attacks, J2EE web applications must be configured to use HTTPS with SSL/TLS certificates, which&amp;nbsp;depends on the web server used to host the application.</p><p>For instance, if a J2EE application runs in an Apache Tomcat server, the <i>httpd.conf</i> file must be edited to support SSL. To learn more about this, view&amp;nbsp;<a href="http://httpd.apache.org/docs/2.0/ssl/">http://httpd.apache.org/docs/2.0/ssl/</a>.</p><p>Meanwhile, J2EE applications running in JBoss servers can be also enabled by modifying the appropriate configuration files.<span>&amp;nbsp;</span>For more information read JBoss&amp;#8217;s documentation on setting up SSL authentication at&amp;nbsp;<a href="http://www.jboss.org/file-access/default/members/jbossweb/freezone/docs/2.1.0/printer/ssl-howto.html">http://www.jboss.org/file-access/default/members/jbossweb/freezone/docs/2.1.0/printer/ssl-howto.html</a>.</p><p>Apache and JBoss both support OpenSSL certificates although some web servers include special tools for creating certificates.<span></span>It is recommended to review the specific technology used to host your J2EE application to check the specific instructions needed to properly enable SSL/TLS authentication.</p><h2><span><em>Protection at the Network Layer</em></span></h2><p>Network credential sniffing attacks are possible because attackers are able to eavesdrop on&amp;nbsp;the connection between the target client and J2EE applications.<span>&amp;nbsp;</span>To mitigate the risk of eavesdropping attacks, network administrators can deploy security defenses at the network layer.<span>&amp;nbsp;</span>For example, properly deploying and configuring IPSec makes an&amp;nbsp;attacker unable to eavesdrop a connection.</p><p>To defend against promiscuous mode sniffing, administrators can execute tools that check for network interfaces running in promiscuous modes, or they can run a client application like Xarp to protect against ARP poisoning attacks in switched networks.<span></span>For additional protection mechanisms against network eavesdropping attacks, refer to Team Mentor&amp;#8217;s article <a href="/article/9d626c0e-ea08-417f-b6ff-909fc6b850b1">How to Test for Network Eavesdropping Bugs</a>.<b><i><span></span></i></b></p><h1><span>Step 3: Execute Test Cases</span></h1><p>Now that you&amp;#8217;ve learned the theoretical aspects of network credential sniffing bugs, it is necessary to execute the following test cases to check if your application is vulnerable.</p><h2><span><em>Test for Network Credential Sniffing</em></span></h2><p>Follow these steps to test for network credential sniffing in J2EE applications.</p><ol><li>Select a target client. <li>Execute an eavesdropping attack between a client and J2EE application.<span>&amp;nbsp;</span>For details on eavesdropping attacks, refer to Team Mentor&amp;#8217;s article <a href="/article/9d626c0e-ea08-417f-b6ff-909fc6b850b1">How to Test for Network Eavesdropping Bugs</a>. <li>Use a network monitoring tools to check if credentials are transmitted in clear text.</li></li></li></ol><p>Expected results:<span>&amp;nbsp;T</span>he application is vulnerable if credentials are sent in clear text or&amp;nbsp;via weak encryption.</p><h2><span><em>Test for Secure Transport Layer</em></span></h2><p>An additional test that is relevant to network credential sniffing testing is to check if authentication occurs over a secure transport layer such as SSL/TLS or HTTPS.<span>&amp;nbsp;</span>In most cases, web browsers display a padlock (or any other comparable visual indicator) in the browser&amp;#8217;s window if the connection is secure; however, there are cases where the lock doesn&amp;#8217;t show so the tester must monitor authentication packets to check if they are really going over HTTPs.</p><p>Proper testing for a secure transport layer can be done, as proposed by OWASP, by using an HTTP proxy tool and examining the URL of authentication requests &amp;#91;i&amp;#93;. Execute the following steps to test for secure transport layer:</p><ol><li>Download a HTTP proxy tool such as OWASP&amp;#8217;s WebScarab or Burp Proxy and execute it. <li>Open a web browser. <li>Set web browser&amp;#8217;s connection options to use HTTP proxy. <li>Navigate to a&amp;nbsp;J2EE application login/authentication page. <li>In the HTTP proxy, turn intercept option ON. <li>In the web browser, enter username and password and make a request. <li>In the HTTP proxy, check if the authentication request&amp;#8217;s URL is transmitted in plain text.</li></li></li></li></li></li></li></ol><p>Expected results:<span></span>The application is vulnerable if the request URL is made over plain HTTP and not HTTPS.<span>&amp;nbsp;</span>If the application uses plain HTTP, the authentication request&amp;#8217;s URL will start with <i>http</i><strong>:</strong></p><pre>POST <strong>http://www.example.com/login.do</strong> HTTP/1.1<br />Host: www.example.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.14) Gecko/20080404<br />Accept: text/xml,application/xml,application/xhtml&amp;#43;xml,text/html<br />Accept-Language: it-it,it;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,&amp;#42;;q=0.7<br />Keep-Alive: 300<br />Connection: keep-alive<br />Cookie: language=English; <br />Content-Type: application/x-www-form-urlencoded<br />Content-length: 27<br />&amp;nbsp;<br />username=test&amp;password=test</pre><p><span></span></p><p>The application is secure if the request URL is over HTTPS.<span>&amp;nbsp; </span>If the application uses HTTPS, the authentication request&amp;#8217;s URL will start <i>https </i>and it will contain the network port used by HTTPS/SSL (<i>443</i> by default):</p><pre>POST <strong>https://www.example.com:443</strong>/login.do HTTP/1.1<br />Host: www.example.com<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.14) Gecko/20080404<br />Accept: text/xml,application/xml,application/xhtml&amp;#43;xml,text/html<br />Accept-Language: it-it,it;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,&amp;#42;;q=0.7<br />Keep-Alive: 300<br />Connection: keep-alive<br />Referer: https://www.example.com/login.jsp<br />Cookie: language=English; <br />Content-Type: application/x-www-form-urlencoded<br />Content-length: 27<br /><br />username=test&amp;password=test<br /></pre><h1><span>Conclusions</span></h1><p>J2EE applications that don&amp;#8217;t use strong encryption or a secure channel to transmit credentials over the network are vulnerable to credential sniffing attacks.<span>&amp;nbsp;</span>To test for this vulnerability, it is recommended that you familiarize yourself with the different attack scenarios involved as well as why this bug occurs and how to protect against it.<span></span>Then you must execute practical test cases using network monitoring tools such as sniffers and tools necessary to execute network eavesdropping attacks.<span></span>It is also recommended<span>&amp;nbsp; </span>to double check the usage of a secure channel by intercepting and examining authentication packets using an HTTP client proxy tool.<span></span>For unencrypted HTTP traffic, testers can use a network monitoring tool such as Wireshark.</p><div><br /><hr /><div><p>&amp;#91;i&amp;#93;&amp;nbsp; <b>Testing for Credentials Transport</b>. OWASP-AT-001. <a href="http://www.owasp.org/index.php/Testing_for_credentials_transport">http://www.owasp.org/index.php/Testing_for_credentials_transport</a></p><p>&amp;nbsp;</p></div></div><h1>Java Communication Security Guidelines</h1><ul><li><a href="/article/172c224e-c3e5-4a5f-bf7a-26fe2db406a4">Encrypt Communication Links</a><li><a href="/article/32fb66b7-7055-4fa0-a9e3-168cfc829aa2">Protect Sensitive Data Over the Network</a><li><a href="/article/c317a2fc-cf4b-4b21-8523-4c911afca161">Use SSL</a><li><a href="/article/7cf7a8ea-d06a-4442-a2e1-3f01a86b8e8b">Use SSL for All Sensitive Pages</a><li><a href="/article/076f39f5-6055-4309-a459-6072adc6d36d">Use SSL When Transmitting Credentials</a><li><a href="/article/8684d833-6d1c-4b61-958f-2c6e120c5355">Use Valid SSL Certificates</a><li><a href="/article/6db5af3a-1346-4cea-931f-d0400f3f87ef">Use Only Strong SSL Algorithms</a><li><a href="/article/e3bdbea7-92cb-4407-998a-eaa95cb955e9">Do Not Cache Sensitive Data</a><li><a href="/article/19a025b8-9242-4ef5-896b-932828f5f654">Do Not Place Sensitive Data in Parameters</a></li></li></li></li></li></li></li></li></li></ul><h1>Java Communication Security Checklists</h1><ul><li><a href="/article/abd1c0b2-5557-4114-b381-f47f00a70f76">Communication Links are Encrypted</a><li><a href="/article/0d1b6821-8652-43a9-922e-07e38dc07421">Sensitive Data Is Protected Over the Network</a><li><a href="/article/b473157f-aa07-4822-8d35-53ec73da44f4">SSL Is Used</a><li><a href="/article/2fa26367-e627-456d-8931-ac0e86a8e237">SSL Is Used for All Sensitive Pages</a><li><a href="/article/a2000630-b077-45b2-9c05-5b9e2fe7dc13">SSL is Used When Transmitting Credentials</a><li><a href="/article/bcc3bb74-7cdf-4704-99fd-e396c11ce3e1">Valid SSL Certificates Are Used</a><li><a href="/article/c4219e9d-09b1-404c-8390-15f6b0fd3929">Only Strong SSL Algorithms Are Used</a><li><a href="/article/0b672255-10f6-4eb9-a886-e8ee50a927bc">Sensitive Data Is Not Cached</a><li><a href="/article/6adf267f-db7d-4770-86c6-292f9b126874">Sensitive Data Is Not Placed in Parameters</a></li></li></li></li></li></li></li></li></li></ul><h1>Java Communication Security Testing</h1><ul><li><a href="/article/1d2ac8cc-b706-4f4f-84b4-773a525a6c8d">How to Test for Network Credential Sniffing Bugs in Java</a></li></ul>]]></Data>
  </Content>
</TeamMentor_Article>