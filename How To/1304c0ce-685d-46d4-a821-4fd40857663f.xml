<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1897959311" Content_Hash="-199073400">
  <Metadata>
    <Id>1304c0ce-685d-46d4-a821-4fd40857663f</Id>
    <Id_History>1304c0ce-685d-46d4-a821-4fd40857663f,e152ec09-61b2-4d35-a61f-d3f8b4786044,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>How to Use Demand And Assert</Title>
    <Category>Code Access Security</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>How To</Type>
    <DirectLink>How to Use Demand And Assert</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Description</h1>
  <p>If you need to call the <b>CodeAccessPermission</b>.<b> Assert</b> method to prevent a demand from propagating beyond the current stack frame, consider demanding an alternate permission to authorize the calling code before calling <b>CodeAccessPermission</b>.<b> Assert</b>. For example, if you call an unmanaged library and need to assert the unmanaged code permission, consider demanding another built-in or custom permission first. </p>
  <p>If you only need to call <b>Assert</b> to satisfy the demands of a single method that your code calls, then place <b>Assert</b> prior to the method call. Then immediately call the <b>RevertAssert</b> method to keep the assertion window as small as possible, and to ensure that any subsequent code your method calls does not inadvertently succeed because <b>Assert</b> is still in effect. A common practice is to place the call to <b>RevertAssert</b> in a <b>finally</b> block to ensure that it always gets called, even in the event of an exception. </p>
  <h1>&amp;nbsp;</h1>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>