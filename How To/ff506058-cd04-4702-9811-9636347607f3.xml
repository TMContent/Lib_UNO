<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="29323823" Content_Hash="987187463">
  <Metadata>
    <Id>ff506058-cd04-4702-9811-9636347607f3</Id>
    <Id_History>ff506058-cd04-4702-9811-9636347607f3,76318ef0-f8f8-4497-9f8b-aa335c51a35e,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>How to Delegate the Original Caller Using S4U Kerberos Extensions</Title>
    <Category>Impersonation and Delegation</Category>
    <Phase>Implementation</Phase>
    <Technology>WCF 3.5</Technology>
    <Type>How To</Type>
    <DirectLink>How to Delegate the Original Caller Using S4U Kerberos Extensions</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>Microsoft&#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&#174; 2008</li></li>
  </ul>
  <h1>Description</h1>
  <p>Use the following steps to delegate the original caller using S4U Kerberos extensions: </p>
  <ol>
    <li>Grant your WCF process account the <strong>Act as part of the operating system</strong> user right. If you are running using the network service account - by default it has this right. <li>Configure the WCF Process Identity with Trust this computer for delegation to your specified services only, select the option <strong>Use any authentication protocol</strong><li>Get the user name for the original caller and create a UPN for the user like the following format <strong>username&#64;FullyQualifiedDomainName.com</strong><li>Use the <strong>WindowsIdentity </strong>constructor and pass the UPN string as the parameter and get the WindowsIdentity token and impersonate the original caller.<ol><pre>   String username = &#8220;username&#64;FullyQualifiedDomainName.com&#8221;;<br />   WindowsIdentity winId = new WindowsIdentity(userName);<br />   using (winId.Impersonate())<br />   &#123;<br />       // access the remote resources on behalf of the original caller       <br />   &#125;</pre></ol><li>Make sure to revert the impersonation, in the above example the using statement does it automatically for you.</li></li></li></li></li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information, see &#8220;Delegation and Impersonation with WCF&#8221; at <a href="http://msdn2.microsoft.com/en-us/library/ms730088.aspx">http://msdn2.microsoft.com/en-us/library/ms730088.aspx</a><li>For more information, see &#8220;How to Use Protocol Transition for Impersonating and Delegating Original Caller in WCF&#8221; at <a href="http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=How&#37;20To&#37;20-&#37;20Use&#37;20Protocol&#37;20Transition&#37;20for&#37;20Impersonating&#37;20and&#37;20Delegating&#37;20Original&#37;20Caller&#37;20in&#37;20WCF&referringTitle=Home">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=How&#37;20To&#37;20-&#37;20Use&#37;20Protocol&#37;20Transition&#37;20for&#37;20Impersonating&#37;20and&#37;20Delegating&#37;20Original&#37;20Caller&#37;20in&#37;20WCF&referringTitle=Home</a>.</li></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>