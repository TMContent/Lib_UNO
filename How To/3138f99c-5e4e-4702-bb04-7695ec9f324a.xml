<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1432926721" Content_Hash="1676749751">
  <Metadata>
    <Id>3138f99c-5e4e-4702-bb04-7695ec9f324a</Id>
    <Id_History>800e66ed-5b2c-4278-9a00-7253d848f39d,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>How to Use Code Access Security</Title>
    <Category>Code Access Security</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>How To</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>Description</h1>
  <p>You can use code access security to restrict what your code can do, to restrict which code can call your code and to create a restricted execution environment for untrusted code like plug-ins. </p>
  <p>For example, in hosted environments, you can use ASP.NET code access security policy to isolate applications from one another and from accessing shared system resources. For more information, see <a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/paght000020.asp">How to: Use Medium Trust in ASP.NET 2.0</a>. Restricting what code can do is also useful when you need to run untrusted code, such as third-party components and plug-ins. For more information, see the section, <a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGPractices0002.asp?frame=true#pagpractices0002_cahtusesep" target="_self">How to Use Separate Application Domains to Isolate Untrusted Code</a>. </p>
  <p>You can use permission demands to help ensure that only code with the appropriate permissions can call your code. </p>
  <p>You do not need to be concerned with code access security if your code is locally installed because code installed on a computer runs with full trust. Code access security is applicable in the following scenarios: </p>
  <ul>
    <li>Using ClickOnce to deploy and execute applications. <li>Running partial trust ASP.NET Web applications, for example on hosted servers. <li>Running managed controls inside Internet Explorer. <li>Running code from an intranet file share. <li>Running code inside a Microsoft Office application. <li>Developing a class library to be used by other applications, including partial trust applications.</li></li></li></li></li></li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information, see <a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/paght000020.asp">How to: Use Medium Trust in ASP.NET 2.0</a>. Restricting what code can do is also useful when you need to run untrusted code, such as third-party components and plug-ins. <li>For more information, see the section, <a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGPractices0002.asp?frame=true#pagpractices0002_cahtusesep" target="_self">How to Use Separate Application Domains to Isolate Untrusted Code</a>. <li>For more information see, "Security Practices: .NET Framework 2.0 Security Practices at a Glance" at <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnpag2/html/PAGPractices0002.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnpag2/html/PAGPractices0002.asp</a></li></li></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>