<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="766104217" Content_Hash="549502325">
  <Metadata>
    <Id>a6b662f1-1de8-4444-83a1-80230dbc48e9</Id>
    <Id_History>4306e463-9e5b-49b1-aaf6-edaff69ed6e6,</Id_History>
    <Library_Id>e7d92b5b-e1d8-4039-b019-8b02594ea93a</Library_Id>
    <Title>Do Not Develop Your Own Cryptographic Algorithms</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>Any</Technology>
    <Type>Guideline</Type>
    <DirectLink>Do Not Develop Your Own Cryptographic Algorithms</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h2>What to Do</h2>
  <p>They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If your algorithm can be compromised if attackers find out how it works, then it is especially weak.</p>
  <h1>Why</h1>
  <p>Developing cryptogaphic algorithms and the implementations of those algorithms is extremely difficult. Errors which are very hard to spot without a background in cryptanalysis can easily compromise security, while still appearing to be secure. Because reference
 and system implementations are used by many applications, they're tested heavily by people with the appropriate background, ensuring a high level of dependability.</p>
  <h1>When</h1>
  <p>All systems which use encryption should use standard implementations and algorithms.</p>
  <h1>How</h1>
  <p>All platforms provide standard cryptographic libraries, often available as services inside the platform or host operating system. Use those services according to their documentation, taking into account what properties a given algorithm or API can and cannot
 supply.</p>]]></Data>
  </Content>
</TeamMentor_Article>