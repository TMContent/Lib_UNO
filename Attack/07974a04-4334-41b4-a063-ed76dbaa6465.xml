<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1399976231" Content_Hash="76336545">
  <Metadata>
    <Id>07974a04-4334-41b4-a063-ed76dbaa6465</Id>
    <Id_History>fb1d3869-b18f-4712-b659-0da2b1b93acd,</Id_History>
    <Library_Id>c037d0d2-0617-44f3-b846-21dc3d02c4f8</Library_Id>
    <Title>Canonicalization Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Canonicalization Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<br />
  <br />
  <h1>Applies To</h1>
  <p>Any application that builds a file name, or path string, host name, url, or other resource identifier based on user input.</p>
  <h1>Description</h1>
  <p>Different forms of input that resolve to the same standard name (the canonical name), is referred to as canonicalization. Code is particularly susceptible to canonicalization issues if it makes security decisions based on the name of a resource that is passed to the program as input. Files, paths, host names, and URLs are resource types that are vulnerable to canonicalization because in each case there are many different ways to represent the same name. </p>
  <h1>Impact</h1>
  <ul>
    <li>Unauthorized access <li>Information disclosure <li>Elevation of privilege</li></li></li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Making security decisions based on the non-canonical form of resources strings supplied by untrusted input. Common examples of such resource strings include URLs, file names, and file paths.</li>
  </ul>
  <a name="Countermeasures">
  </a>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <p>Choose a standard 'canonical' representation for all strings that are used to make security decisions.</p>
      <li>
        <p>Convert all such strings to their canonical form before making security decisions. For example:</p>
        <ul>
          <li>Convert URL encoded strings into their unicode equivalent <li>Convert relative paths to absolute paths for files and URL strings.</li></li>
        </ul>
        <li>
          <p>If available, use common libraries for canonicalization. Only write your own canonicalization routines if absolutely necessary.</p>
          <li>
            <p>Avoid input file names where possible and instead use absolute file paths that cannot be changed by the end user.</p>
            <li>
              <p>Reject incorrectly encoded characters and do not accept alternate representations of standard characters.</p>
              <li>
                <p>Check all resource via whitelist, not blacklist.</p>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>Examples</h1>
  <p>
    <strong>Directory traversal</strong>:</p>
  <p>Suppose a server has a rule to only execute files stored in the C:\inetpub\wwwroot\cgi-bin directory. When a path is supplied to the server, if it does not begin with C:\inetpub\wwwroot\cgi-bin, then it will not be run. Now consider the following path:</p>
  <pre>C:\inetpub\wwwroot\cgi-bin\..\..\..\Windows\System32\cmd.exe</pre>
  <p>This is sufficient to pass the validating rule, but when it is run by the shell, it resolves to the following canonical representation:</p>
  <pre>C:\Windows\System32\cmd.exe</pre>
  <p>This is clearly not what was intended and provides a clear example of why canonicalization is a security risk.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://en.wikipedia.org/wiki/Canonicalization">http://en.wikipedia.org/wiki/Canonicalization</a>
      <li>
        <a href="http://www.nextgenss.com/papers/unicodebo.pdf">http://www.nextgenss.com/papers/unicodebo.pdf</a>
        <li>
          <a href="http://www.owasp.org/index.php/Canoncalization,_locale_and_Unicode">http://www.owasp.org/index.php/Canoncalization,_locale_and_Unicode</a>
          <li>
            <a href="http://www.faqs.org/rfcs/rfc3492.html">http://www.faqs.org/rfcs/rfc3492.html</a>
            <li>
              <a href="http://projects.cerias.purdue.edu/secprog/class2/7.Canon_&amp;_DT.pdf">http://projects.cerias.purdue.edu/secprog/class2/7.Canon_&amp;_DT.pdf</a>
              <li>
                <a href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html">http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html</a>
                <li>
                  <a href="http://en.wikipedia.org/wiki/File_format">http://en.wikipedia.org/wiki/File_format</a>
                  <li>
                    <a href="http://channel9.msdn.com/wiki/default.aspx/SecurityWiki.CanonicalizationLab">http://channel9.msdn.com/wiki/default.aspx/SecurityWiki.CanonicalizationLab</a>
                    <li>
                      <a href="http://support.microsoft.com/kb/887459">http://support.microsoft.com/kb/887459</a>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/79717ecf-2a2b-497b-b52c-758e48ace4fb">Attack: Command Injection Attack</a>
      <li>
        <a href="/article/06bce0ad-bb7d-40f4-9111-1853871546b5">Attack: Alternate Data Streams Attack</a>
        <li>
          <a href="/article/07eeb3d8-643c-4aa5-9c76-a3077a08b8be">Attack: File Name and Path Manipulation Attack</a>
          <li>
            <a href="/article/b3ebf814-8af6-4317-8985-c0b0e1df8e0c">Attack: Forceful Browsing Attack</a>
            <li>
              <a href="/article/1479b992-bbc9-4e22-84dd-091de288a0ca">Attack: Information Disclosure Attack</a>
              <li>
                <a href="/article/4cd042e8-2394-4546-aa99-759d0be8007d">Attack: Phishing Attack</a>
                <li>
                  <a href="/article/ce899ba6-8ae2-4494-8706-ce863fae58e7">Guideline: Filter All User-Supplied Filename and Path Input </a>
                  <li>
                    <a href="/article/946a5edb-e8f8-4365-8675-b8a5032c201b">Guideline: Validate All Data Passed Between Native and Java Code </a>
                    <li>
                      <a href="/article/40eea61e-c8bd-494a-b75d-c18c2074c752">Guideline: Validate Input from All Sources </a>
                      <li>
                        <a href="/article/f29fac90-c626-41d6-9184-acd6007696cf">Guideline: Validate Input for Length, Range, Format, and Type </a>
                        <li>
                          <a href="/article/6e981095-84bd-4158-a212-8f9937bcb336">Guideline: Do Not Rely on Client-Side Validation </a>
                          <li>
                            <a href="/article/88f49e05-f101-4764-b8e3-b31cd7507071">Guideline: Do Not Rely on Request Validation </a>
                          </li>
                        </li>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>