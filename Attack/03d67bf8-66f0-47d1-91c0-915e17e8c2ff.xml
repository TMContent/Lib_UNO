<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1286621346" Content_Hash="-1656453444">
  <Metadata>
    <Id>03d67bf8-66f0-47d1-91c0-915e17e8c2ff</Id>
    <Id_History>99e57fc7-4783-448e-b109-b85dfb1b65b2,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Format String Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Attack</Type>
    <DirectLink>Format String Attack</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>Applications written in any languages which provides string methods that accept a format specifier.</p>
  <h1>Description</h1>
  <p>Format string attacks are a class of vulnerabilities that can be used to crash a program or to execute harmful code. If unfiltered user input is used as the format string parameter in C functions that perform formatting, such as printf(), an attacker can use the %s, %x, and other format tokens to print data either from the stack or sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token, used to specify that the number of bytes formatted should be written to the supplied pointer argument. More stack manipulation is required, but this argument can be inserted as part of a format string attack. [<a href="http://en.wikipedia.org/wiki/Format_string_attacks">http://en.wikipedia.org/wiki/Format_string_attacks</a>] </p>
  <h1>Impact</h1>
  <ul>
    <li>Elevation of Privilege </li>
    <li>Read or Write sensitive information in memory </li>
    <li>Arbitrary code execution</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Inserting untrusted user input into a format string parameter.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>Hard code the format string. </li>
    <li>Format strings should not contain any user controlled data.</li>
  </ul>
  <h1>Example</h1>
  <pre>printf (varUserSuppliedData);</pre>
  <p>This will allow the user or attacker to provide the format specifier. Here, the attacker will be able to use format string tokens like %x and %n to compromise the security of the application.</p>
  <p>The correct way of writing this line of code is to provide the format specifier ourselves:</p>
  <pre>printf ("%s", varUserSuppliedData);</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on finding format string vulnerabilities, see <a href="http://www.owasp.org/index.php/Format_String_Testing_AoC">Format String Testing.</a></li>
    <li>For examples of Format String Vulnerabilities in non-C languages, see <a href="http://www.ddj.com/dept/security/197002914">Programming Language Format String Vulnerabilities</a></li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/07cc45f2-bcbe-4399-b66f-76f8b697fca1">Attack: Double Encoding Attack</a>
    </li>
    <li>
      <a href="/article/9f8d1872-4048-4df0-899c-38e0c7e81d79">Attack: Client-side Validation Attack</a>
    </li>
    <li>
      <a href="/article/829b7182-7cf9-48b9-a25e-3a02f0685f49">Attack: Information Disclosure Attack</a>
    </li>
    <li>
      <a href="/article/b431b7df-36d8-461b-a437-675a20e9548b">Guideline: Validate All Input Passed to Database </a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>