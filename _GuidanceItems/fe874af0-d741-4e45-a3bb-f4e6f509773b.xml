<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>fe874af0-d741-4e45-a3bb-f4e6f509773b</Id>
    <Id_History>00000000-0000-0000-0000-0000007f43b7,</Id_History>
    <Library_Id>b6f408c5-6e6e-4bc0-90a5-0bb10becc2ce</Library_Id>
    <Title>Use Role-based Access Control</Title>
    <Category>Authorization</Category>
    <Phase>Deployment</Phase>
    <Technology>iOS</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Role-based Access Control</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==Applies To==

*iOS applications that access resources on a remote server.

==What to Do==

Enumerate the different types of users and create specific roles for them. When authorizing access to a resource, build the security checks on a per-role basis rather than on a per-user basis.

==Why==

Application roles allow administrators to group users into categories that need the same level of privilege. The mechanism provides an easy and clear way to discover and manage the least privileges necessary for the execution of a given task. It provides a robust and flexible way to manage the application's users.

==How==

Use the following steps when designing role-based security:

# **Understand the different types of users.** Enumerate the different types of users of the application. Understand how they will use the application and to which resources they will need access. Create a spreadsheet mapping the actions each role is authorized to perform with the corresponding system components. Use this spreadsheet to identify the different types of users according to the functionality they need. Creating a threat model may be a useful step to ensure that you correctly understand the implications of this spreadsheet.
# **Establish the roles.** Define which resources can be accessed by each role. There are two approaches to enforcing role-based security - programmatic and declarative.
#* **The programmatic approach.** The programmatic approach to role-based security is written inside the code and provides additional runtime flexibility. It allows your application to dynamically create and assign roles so that user privileges can be granted and revoked without restarting your application. When using the programmatic approach to role-based security, place access control checks at the appropriate locations in your application.
#* **The declarative approach.** The declarative approach to role-based is implemented through the configuration files. It is easy to manage as the declarations can be modified without having to recompile. Using the declarative approach, you can easily manage the security settings for large portions of the application without changing the source code.
# **Manage the users.** Assign the users to their respective user roles. The application should enforce the security policy on a per-role rather than per-user basis.

==Authorization Guidelines==
* [[00000000-0000-0000-0000-0000007bc9f5|Disable File Sharing in Applications by Default]]
* [[00000000-0000-0000-0000-0000007f43b7|Use Role-based Access Control]]

==Authorization Checklists==
* [[00000000-0000-0000-0000-00000092d7fb|File Sharing Is Disabled in Applications by Default]]
* [[00000000-0000-0000-0000-000000732de4|Role-based Access Control Is Used]]
]]></Data>
  </Content>
</TeamMentor_Article>