<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000005ad6ba</Id>
    <Id_History>00000000-0000-0000-0000-0000005ad6ba,1e0d6489-a567-4d45-9efa-94bfa968f4b9,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Parameterized APIs Are Used to Launch External Processes </Title>
    <Category>Dangerous APIs</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Parameterized APIs Are Used to Launch External Processes </DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* ASP.NET

==What to Check For==

Make sure that parameterized APIs are used to launch external processes.

==Why==

Using parameterized APIs helps prevent injection attacks.

==How to Check==

To make sure that parameterized APIs are used to launch external processes:

# **Identify all calls to external commands.** Search for the following APIs to find code that executes external commands: //AppCommandHandler.ExecuteCommand//, //System.Diagnostics.Process//
# **Make sure that parameterized APIs are used to execute external processes.** For each piece of code that executes external commands, make sure that //System.Diagnostics.Process// is used. 
# **Make sure that data passed to external commands is validated.** For each piece of code that executes external commands, make sure that any user data is validated using positive validation before being passed to external processes as parameters. Be particularly cautious if passing user data to a command interpreter, such as cmd.exe or PowerShell. Be careful when passing user data to any program that may spawn another application, for example explorer.exe. Even if parameterized APIs are used, passing untrusted user data to such processes may result in command injection vulnerabilities. It is best to avoid calling programs that may spawn other programs based on parameters passed to them. If such programs cannot be avoided, user data has to be positively validated before being passed in parameters.

==How to Fix==

To use parameterized APIs to launch external processes:

# **Identify all calls to external commands.** Search for the following APIs to find code that executes external commands: //AppCommandHandler.ExecuteCommand//, //System.Diagnostics.Process//.
# **Use parameterized APIs.** The //System.Diagnostics.Process// object provides a parameterized API for executing external commands. Command parameters can be set using a //System.Diagnostics.ProcessStartInfo// object, which is passed as an argument to the constructor of the //System.Diagnostics.Process// object. Use these APIs whenever executing external commands from your applications. This is the most common way to do it, so your application is probably already doing it this way.
# **Validate data passed to command execution APIs.** Input passed to external commands should be very carefully validated. Be particularly cautious if passing user data to a command interpreter, such as cmd.exe or PowerShell. Be careful when passing user data to any program that may spawn another application, for example explorer.exe. Even if parameterized APIs are used, passing untrusted user data to such processes may result in command injection vulnerabilities. It is best to avoid calling programs that may spawn other programs based on parameters passed to them. If such programs cannot be avoided, user data has to be positively validated before being passed in parameters.
]]></Data>
  </Content>
</TeamMentor_Article>