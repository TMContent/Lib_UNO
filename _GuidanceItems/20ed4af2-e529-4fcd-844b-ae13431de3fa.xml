<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>20ed4af2-e529-4fcd-844b-ae13431de3fa</Id>
    <Id_History>00000000-0000-0000-0000-000000467952,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Store Cached Authentication Data in the Keychain</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>iOS</Technology>
    <Type>Guideline</Type>
    <DirectLink>Store Cached Authentication Data in the Keychain</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==Applies To==

* iOS applications that cache authentication data.

==What to Do==

Store sensitive data such as encryption keys and cached authentication credentials in the //keychain//.

==Why==

Authentication credentials and encryption keys should be stored in the //keychain//, because the //keychain// encrypts data stored in it and is designed for storing such information. The //keychain// is also suitable for storing application configuration settings.

==How==

To use the //keychain// to store cached authentication data and encryption keys:

# **Identify cached authentication data.** Make a list of all cached authentication data used by your application. Some examples are:
#* Passwords
#* Certificates
#* Encryption keys
#* Authentication tokens
# **Define encryption requirements for sensitive data stored in files.** Choose the level of protection that is most appropriate for each type of sensitive data that is stored in files and handled by the application. The iOS Data Protection API provides the following protection levels:
#* //FileProtectionNone// - no encryption.
#* //FileProtectionComplete// - encrypt the file and deny access when the device is locked.
#* //FileProtectionCompleteUnlessOpen// - encrypt the file until it is open, leave it decrypted while it is open even if the device is locked.
#* //FileProtectionCompleteUntilFirstUserAuthentication// - encrypt the file until the device is unlocked for the first time after a reboot.
# **Define encryption requirements for sensitive data that is stored in the keychain.** Choose the level of protection that is the most appropriate for each type of sensitive data that is stored in the keychain and handled by the application. The keychain provides the following protection levels:
#* //kSecAttrAccessibleAlways// - the item is always available.
#* //kSecAttrAccessibleWhenUnlocked// - the item is only available when the device is unlocked.
#* //kSecAttrAccessibleAfterFirstUnlock// - the item is only available after the device is unlocked for the first time after a reboot.
#* //kSecAttrAccessibleAlwaysThisDeviceOnly// - the item is always available, but is not moved to other devices.
#* //kSecAttrAccessibleWhenUnlockedThisDeviceOnly// - the item is only available when the device is unlocked and is not moved to other devices.
#* //kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly// - the item is only available after the device is unlocked for the first time after a reboot and is not moved to other devices.
# **Identify the code that caches authenticaton data.** Find all application code that handles data that should be stored in the //keychain//.
# **Store cached authentication credentials in the keychain.** Edit code that handles cached authentcation data to store such data in the keychain. 

==Cryptographic Storage Guidelines==
* [[00000000-0000-0000-0000-0000002a5e0d|Encrypt Stored Sensitive Data]]
* [[00000000-0000-0000-0000-000000467952|Store Cached Authentication Data in the Keychain]]

==Cryptographic Storage Checklists==
* [[00000000-0000-0000-0000-0000002bf00e|Stored Sensitive Data Is Encrypted]]
* [[00000000-0000-0000-0000-0000004b75cb|Cached Authentication Data Is Stored in the Keychain]]

]]></Data>
  </Content>
</TeamMentor_Article>