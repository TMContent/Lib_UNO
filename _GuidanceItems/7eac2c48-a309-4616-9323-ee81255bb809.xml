<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>7eac2c48-a309-4616-9323-ee81255bb809</Id>
    <Id_History>00000000-0000-0000-0000-00000071b4f0,</Id_History>
    <Library_Id>f215ceee-9a08-41d9-b2c1-bbcc058a8f32</Library_Id>
    <Title>Data Inserted into XML Documents Is Validated and Encoded</Title>
    <Category>Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Android</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Data Inserted into XML Documents Is Validated and Encoded</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==What to Check For==

Verify that data inserted into XML documents is validated and encoded.

==Why==

Validating and encoding data inserted into XML documents helps prevent XML injection vulnerabilities.

==How to Check==

To verify that data inserted into XML documents is validated and encoded:

# **Identify XML documents used by the application.** Examine the application design to identify all XML documents and XML document types used by the application.
# **Identify code that uses XML documents.** Review application code to find code that uses XML documents.
# **Review validation code.** Make sure there are clear validation functions defined for each type of XML data handled by the application.
# **Review encoding code.** Make sure there are encoding functions defined for XML data. Consider the following when evaluating XML encoding: data has to be converted to a uniform character encoding first, XML entities have to be escaped properly, and code that loads XML documents should be able to restore the original data from the encoded data.
# **Verify that validation and encoding are used.** Make sure that all XML data is validated and encoded before being inserted into XML documents.

==How to Fix==

To validate and encode data inserted into XML documents:

# **Identify XML documents used by the application.** Examine the application design to identify all XML documents and XML document types used by the application.
# **Identify code that uses XML documents.** Review application code to find code that uses XML documents.
# **Add data validation code.** Add methods that validate all the data types that are stored in XML documents and used by the application.
# **Use validation code.** Add code that uses the data validation methods from the previous step to code that uses XML documents. Validation should be performed before encoding.
# **Add encoding code.** Add methods that escape XML entities. Unfortunately, there are no stable libraries available for escaping XML entities for iOS. When writing code that escapes XML entities, consider the following: data has to be converted to a uniform character encoding first, XML entities have to be escaped properly, and code that loads XML documents should be able to restore the original data from the encoded data.
# **Use encoding code.** Add code that encodes data to code that uses XML documents. 

==Data Validation Guidelines==

* [[00000000-0000-0000-0000-0000008d3cec|Canonicalize File Names and Paths]]
* [[00000000-0000-0000-0000-0000008149ca|Validate All Input]]
* [[00000000-0000-0000-0000-0000006c7089|Validate and Encode Data Inserted into XML Documents]]
* [[00000000-0000-0000-0000-0000007635ae|Validate File Formats]]

==Data Validation Checklists==

* [[00000000-0000-0000-0000-0000009763b8|File Names and Paths Are Canonicalized]]
* [[00000000-0000-0000-0000-0000004f2fec|All Input Is Validated]]
* [[00000000-0000-0000-0000-00000071b4f0|Data Inserted into XML Documents Is Validated and Encoded]]
* [[00000000-0000-0000-0000-00000080c790|File Formats Are Validated]]]]></Data>
  </Content>
</TeamMentor_Article>