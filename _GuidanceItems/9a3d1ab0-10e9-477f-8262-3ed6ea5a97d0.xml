<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>9a3d1ab0-10e9-477f-8262-3ed6ea5a97d0</Id>
    <Id_History>00000000-0000-0000-0000-0000008149ca,</Id_History>
    <Library_Id>f215ceee-9a08-41d9-b2c1-bbcc058a8f32</Library_Id>
    <Title>Validate All Input</Title>
    <Category>Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Android</Technology>
    <Type>Guideline</Type>
    <DirectLink>Validate All Input</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==What to Do==

Validate all user input using whitelist/positive input validation. Whitelist input validation allows only input that is explicitly defined as valid, as opposed to blacklist input validation, which filters out known bad input.

==Why==

Properly implemented input validation mitigates many types of injection vulnerabilities, such as Cross-Site Scripting and SQL injection.

==How==

To validate all user input using whitelist input validation:

# **Identify all entry points for user input.** Make a list of all possible sources of user input in your application.
# **Identify all types of input accepted by the application.** For each source of user input on the list, define valid characters, length, format, and range (for numerical values).
# **Define an input validation subsystem.** Define a set of validator functions that should be used to validate each type of input handled by the application. Input should be validated on the server.
# **Validate characters.** Restrict the acceptable range of characters in text input using regular expressions.
# **Validate length.** Check that the length of the user input is valid.
# **Validate format.** If the input type has a specific pattern, such as a date or a phone number, use regular expressions to make sure user input matches the input type specified by the application. Use regular expressions to enforce strong password requirements.
# **Validate range.** Restrict the acceptable range of numerical input by comparing the input to the maximum and minimum acceptable values.
# **(Optional) Reject and respond to known bad input.** This step does not add much actual security, but it provides some defense in depth. The input validation subsystem may check for known attack strings and respond to these likely attacks by alerting the user. The application may respond to invalid input by rejecting invalid input, logging invalid input, and/or taking evasive action.
# **(Optional) Encode input.** If the input is going to be displayed back through the web application, consider encoding it to prevent Cross-Site Scripting attacks.

==Data Validation Guidelines==

* [[00000000-0000-0000-0000-0000008d3cec|Canonicalize File Names and Paths]]
* [[00000000-0000-0000-0000-0000008149ca|Validate All Input]]
* [[00000000-0000-0000-0000-0000006c7089|Validate and Encode Data Inserted into XML Documents]]
* [[00000000-0000-0000-0000-0000007635ae|Validate File Formats]]

==Data Validation Checklists==

* [[00000000-0000-0000-0000-0000009763b8|File Names and Paths Are Canonicalized]]
* [[00000000-0000-0000-0000-0000004f2fec|All Input Is Validated]]
* [[00000000-0000-0000-0000-00000071b4f0|Data Inserted into XML Documents Is Validated and Encoded]]
* [[00000000-0000-0000-0000-00000080c790|File Formats Are Validated]]

==Additional Resources==
* For more information on input validation, see https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet]]></Data>
  </Content>
</TeamMentor_Article>