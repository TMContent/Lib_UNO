<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-00000097f1a4</Id>
    <Id_History>00000000-0000-0000-0000-00000097f1a4,9fd1ed5c-5b26-4bb7-86f2-8a65fc62f1ab,</Id_History>
    <Library_Id>c4b9cb6a-4561-4451-9b6c-4e59d73584f6</Library_Id>
    <Title>Proper Thread Safety of HttpSession Object Access Is Assured</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Proper Thread Safety of HttpSession Object Access Is Assured</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* Java


==What to Check For==

Identify code that makes use of the //HttpSession// object and look for blocks of code that make assumptions about session values.


==Why==

Improper handling of //HttpSession// objects can lead to race conditions and concurrency issues.


==How to Check==

To ensure proper thread safety of //HttpSession// objects:

# **Identify all //HttpSession// objects that may be modified by multiple threads.** Find all code that modifies //HttpSession// objects, which may be accessed by multiple threads. One approach is to search code for the //HttpSession// keyword and then trace each //HttpSession// object throughout the code.
# **Follow the progress of data values throughout a session and consider values that might be changed from another thread.** Make special note of atomic operations that must be executed together.


==How to Fix==

To ensure thread safety:

# **Identify all //HttpSession// objects that may be modified by multiple threads.** Find all code that modifies //HttpSession// objects, which may be accessed by multiple threads. One approach is to search code for the //HttpSession// keyword and then trace each //HttpSession// object throughout the code.
# **Use immutable objects as much as possible.** Using immutable objects is a sound practice for avoiding concurrency issues and should be used as much as possible. The specifics of using immutable objects are different for different applications.
# **Use class methods and local variables data handling.** For each piece of code that modifies //HttpSession// objects, use thread-safe class methods and local variables if possible. 
# **Synchronize critical sections that must be executed as a single operation.** For complex operations on //HttpSession// objects, make sure that critical sections are synchronized.


==Problem Example==

A shopping cart has a Pay Now button that finalizes a purchase and charges the customerâ€™s credit card. An application that is not thread safe may allow for a user to double-click the button and charge the customer twice for the same transaction.


==Solution Example==

Synchronized critical sections or immutable objects both can help prevent concurrency issues that might lead to simultaneous credit card transactions.  


==Additional Resources==

* For more information about using immutable objects, see http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html

]]></Data>
  </Content>
</TeamMentor_Article>