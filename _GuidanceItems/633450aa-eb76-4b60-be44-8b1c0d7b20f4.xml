<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>633450aa-eb76-4b60-be44-8b1c0d7b20f4</Id>
    <Id_History>00000000-0000-0000-0000-0000006dd207,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>A Secure Administrative Interface that Allows Changing Passwords Is Provided</Title>
    <Category>Administration</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>A Secure Administrative Interface that Allows Changing Passwords Is Provided</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* ASP.NET

==What to Check For==

Verify that there is a page for users to change their own passwords. Verify that there is a page for administrators to change users' passwords.

==Why==

Any application that uses authentication should allow the passwords to be changed to prevent hard-coded password vulnerabilities. If passwords are hard-coded, they cannot be changed easily by the customer/user. Hard-coded passwords need to be disclosed for them to be usable. Once the hard-coded passwords are known, anybody that knows them can access the application. If an attacker knows the hard-coded passwords, he can access the application with the corresponding privileges and do whatever the account that has the hard-coded credentials can do. This issue is further compounded by the fact that it is usually the administrative users that have the hard-coded passwords. Many application have a hard-coded administrative user, which is then used to set up other user accounts. This is very dangerous if the password for that administrative user cannot be changed. The solution is to create a page that allows the users to change their own passwords. There should be another page, available only to administrators, that allows changing other users' passwords.

==How to Check==

To make sure that password management pages are implemented:

# **Examine the password management page for regular users.** Review the application to find the page that allows the users to change their own passwords. Ideally, this page should not be combined with changing other user details, such as changing the users' names, e-mail addresses associated with the application, etc. The password changing page should have one field for the user to enter his current password and two fields for entering the new password. All three password fields should be masked. The user's current password should be validated to reduce the threat of CSRF and session hijacking attacks. The new password should be entered twice to reduce the risk of typos creating a password that is different from the one that the user intended. Upon submitting the password change request, the page should call the password management functions used by the application to validate the old password and store the new password. The submitted data should be validated using positive input validation. The new password should be checked against the application password complexity requirements. The new password may also need to be checked against a history of old passwords(which should not be stored in plain-text, but should be stored as hashes).
# **Examine the password management page for administrator.** Review the application to find the page that allows the administrator to change the users' passwords. Ideally, this page should not be combined with changing other user details, such as changing the users' names, e-mail addresses associated with the application, etc. Upon issuing a request to change user passwords, the administrator should be asked to re-enter his password to reduce the threat of CSRF and session hijacking attacks. Upon issuing the password changing request, the page should use positive input validation to check the new password(s). The new passwords should be checked against application the application password complexity requirements. The new password(s) may also need to be checked against a history of old passwords(which should not be stored in plain-text, but should be stored as hashes).

==How to Fix==

To create pages where passwords can be changed:

# **Identify password management functions.** Find the functions that are responsible for setting and validating user passwords. There should be no functions that can retrieve passwords, because passwords should be stored using one-way hashing. The functions for setting and validating passwords will be needed for wiring up the pages that allow users to change their passwords. The setting password function(s) should be used to set the new password. The password validation function(s) should be used when asking the user to enter their current password.
# **Create a password management page for regular users.** Make a page where users can change their own passwords. It is not recommended to combine this page with changing other user details, such as changing the users' names, e-mail addresses associated with the application, etc. It is recommended to keep the password management page as simple as possible to reduce the risk of introducing vulnerabilities into it via some other functions. The password changing page should have one field for the user to enter his current password and two fields for entering the new password. All three password fields should be masked. The user's current password should be validated to reduce the threat of CSRF and session hijacking attacks. The new password should be entered twice to reduce the risk of typos creating a password that is different from the one that the user intended. Upon submitting the password change request, the page should call the password management functions used by the application to validate the old password and store the new password. The submitted data should be validated using positive input validation. The new password should be checked against the application password complexity requirements. The new password may also need to be checked against a history of old passwords(which should not be stored in plain-text, but should be stored as hashes).
# **Create a password management page for administrative users.** Make a page that is only accessible to administrators where administrators can change user passwords. Ideally, this page should not be accessible from the Internet. It is recommended to write this and other administrative pages in such a way that their files can be renamed or moved around the application web directory in an attempt to hide these pages from attackers. Hiding administrative pages should not be relied on for security, but it does reduce the threat of automated attacks. The admin password changing page should list all the users of the application and allow the administrator to change their passwords. It is not recommended to combine the password management page with functions for managing other user account information, such as usernames or e-mail addresses associated with the application, to reduce the risk of introducing vulnerabilities via these other functions. Upon issuing a request to change user passwords, the administrator should be asked to re-enter his password to reduce the threat of CSRF and session hijacking attacks. Upon issuing the password changing request, the page should use positive input validation to check the new password(s). The new passwords should be checked against application the application password complexity requirements. The new password(s) may also need to be checked against a history of old passwords(which should not be stored in plain-text, but should be stored as hashes).]]></Data>
  </Content>
</TeamMentor_Article>