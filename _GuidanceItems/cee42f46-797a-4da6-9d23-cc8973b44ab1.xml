<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>cee42f46-797a-4da6-9d23-cc8973b44ab1</Id>
    <Id_History>00000000-0000-0000-0000-0000007dc07e,</Id_History>
    <Library_Id>c037d0d2-0617-44f3-b846-21dc3d02c4f8</Library_Id>
    <Title>Information Leak through Persistent Cookies</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Information Leak through Persistent Cookies</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

Cookies are used by web applications to store data on the browser. Cookies may be marked as persistent and stored for an extended period of time. An attacker may gain access to the drive that stores the cookies and recover the sensitive data from them. The exact impact depends on the nature of the sensitive data in the cookies. This vulnerability applies to web applications that use cookies. To prevent this vulnerability, don't store sensitive data in persistent cookies. To check for this vulnerability, find all code that stores cookies and check what kind of data is stored in the cookies.

==Impact==

The exact impact of this vulnerability depends on the sensitive data stored in the cookies. Usually this is session data that keeps a user authenticated to an application. In that case, the attacker is able to impersonate the authenticated user. Being able to impersonate an authenticated user allows the attacker to carry out any actions that are available to that user within the application. That might be enough for the attacker or he may use that access to leverage additional vulnerabilities for additional privileges.

==Countermeasures==

Implement the following countermeasure to protect your application against information leaks through persistent cookies.

* [[00000000-0000-0000-0000-0000004e3194|Do Not Store Sensitive Data in Persistent Cookies]]

==Checklists==

Use the following checklist item to make sure that sufficient countermeasures against information leaks through persistent cookies have been implemented.

* [[00000000-0000-0000-0000-000000152037|Sensitive Data Is Not Stored in Persistent Cookies]]

==Computer Based Training Links==

Use the following Computer Based Training courses to learn more about Information Leaks through Persistent Cookies including techniques for remediation and prevention.

===Creating Secure PHP Code===

This course introduces best practices for developing secure PHP code. The course also identifies common PHP vulnerabilities that attackers can exploit to gain access to critical information. In addition, the course explains mitigation techniques that you can use to avoid common PHP vulnerabilities and write secure code. After completing this course, you will be able to describe the best practices for developing secure PHP code, explain common PHP vulnerabilities and learn mitigation techniques to avoid common PHP vulnerabilities and write secure code. 

For more information about Information Leaks through Persistent Cookies in PHP applications, see screen 9 in [[http://teamprofessor.absorbtraining.com/ninja/#/courses/course/127620|COD 315 Creating Secure PHP Code]].

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//

==Additional Resources==

*For the CWE page about this vulnerability type, see http://cwe.mitre.org/data/definitions/539.html

*For more information about this vulnerability type, see http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Information_Leak_Through_Persistent_Cookies]]></Data>
  </Content>
</TeamMentor_Article>