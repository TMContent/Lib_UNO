<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-00000063561d</Id>
    <Id_History>00000000-0000-0000-0000-00000063561d,1fcfbe04-bb81-4e55-80dc-6ce15bf3fcbb,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use the Strict-Transport-Security Header to Enforce HTTPS</Title>
    <Category>Communication Security</Category>
    <Phase>Implementation</Phase>
    <Technology>HTML5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use the Strict-Transport-Security Header to Enforce HTTPS</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* HTML5

==What to Do==

Use the Strict-Transport-Security response header to enforce secure communication with the browser via HTTPS. This header is often referred to as HTTP Strict Transport Security, or simply HSTS.

==Why==

The Strict-Transport-Security header instructs the browser to communicate with the server only via HTTPS, a secure communication tunnel that prevents eavesdropping. Without the header, there is no way for the browser to “know” that a web page should be accessed over HTTPS. This leaves open the possibility of using standard, unencrypted HTTP whether through a malicious link or direct URL access. 

==When==

Use this guideline when implementing HTML5 web applications that transmit confidential data.

==How==

Note that, as of this writing, the latest releases of Mozilla Firefox, Google Chrome, and Opera all support the HSTS header. However, Internet Explorer does not.

# **Enable the //mod_header// module in the //httpd.conf// configuration file (if it is not already enabled).** For example, if you are using Apache Web Server, first enable
//LoadModule headers_module modules/mod_headers.so//
# **Add the HSTS header to the //httpd.conf// configuration file.** Include the required directive //max-age//. This specifies the time, in seconds, that a compliant browser will abide by forced HTTPS, even in the event a standard HTTP connection is attempted. For example, in the Apache //httpd.conf// configuration file, add the following line: //Header always append Strict-Transport-Security: "max-age=7776000"//. This directive instructs the browser to connect only via HTTPS for the next 90 days. The server will inject this header information into each application page rendered.
# **Reload or restart the web server configuration.** The first time the user connects to your website using HTTPS, the browser reads the HSTS header, including the //max-age// directive. The browser will know it should connect only via HTTPS for the specified //max-age// time period.

==Problem Example==

Example.com is a popular stock-trading site that handles confidential financial information for its users. In this scenario, it is the intention that all requests from users are sent using HTTPS. However, no Strict-Transport-Security response header is sent from the Example.com server.

A hacker at a coffee shop uses his laptop to intercept all unencrypted traffic on the local wireless network. A user visits the coffee shop, and clicks a link to log in to the secure Example.com website. However, the link is http://www.example.com/login.php instead of https://www.example.com/login.php. Though the user is visiting the correct website, the hacker can eavesdrop, because the communication tunnel is unencrypted.

{{{

<a href="http://www.example.com/login.php"> Click here </a> to login securely connect to example.com

}}}

Even though the verbiage indicates a secure connection, the hyperlink clearly is not secure.

{{{

Server Response:
HTTP/1.1 200 OK
Date	Thu, 25 Apr 2013 06:49:05 GMT
Server	Apache/2.2.22 (Win32) mod_ssl/2.2.22 OpenSSL/0.9.8t
X-Powered-By	PHP/5.3.8-ZS5.5.0 ZendServer
Set-Cookie	ZDEDebuggerPresent=php,phtml,php3; path=/
Keep-Alive	timeout=5, max=100
Connection	Keep-Alive
Transfer-Encoding	chunked
Content-Type	text/html

}}}

\\
==Solution Example==

To correct the situation, the developers at Example.com include the Strict-Transport-Security response header. In the configuration file of their Apache 2 server, they enable //mod_header//, and then add:

{{{

Header always append Strict-Transport-Security: "max-age=7776000 " 

}}}

Assuming that the user has logged in previously to Example.com, the browser will now detect that the connection should be HTTPS and connect securely.

{{{

Server Response:
HTTP/1.1 200 OK
Date	Thu, 25 Apr 2013 07:01:05 GMT
Server	Apache/2.2.22 (Win32) mod_ssl/2.2.22 OpenSSL/0.9.8t
X-Powered-By	PHP/5.3.8-ZS5.5.0 ZendServer
Set-Cookie	ZDEDebuggerPresent=php,phtml,php3; path=/
Strict-Transport-Security	max-age=7776000
Keep-Alive	timeout=5, max=100
Connection	Keep-Alive
Transfer-Encoding	chunked
Content-Type	text/html

}}}

\\
==Additional Resources==

* For information about the Strict-Transport-Security header, see http://tools.ietf.org/html/draft-ietf-websec-strict-transport-sec-14#section-6.1
* For the TLS protocol specs, see http://tools.ietf.org/html/rfc5246
* For a list of useful HTTP headers, see https://www.owasp.org/index.php/List_of_useful_HTTP_headers


==HTTP Header Guidelines==

* [[00000000-0000-0000-0000-00000028bb7d|Use X-Content-Security-Policy to Mitigate XSS]]
* [[00000000-0000-0000-0000-0000009026c0|Use X-XSS-Protection to Prevent Reflected XSS]]
* [[00000000-0000-0000-0000-000000204a22|Use X-Frame-Options to Prevent ClickJacking]]
* [[9e0f93ba-0b80-4aab-b93c-c17b9af2a19c|Use a Filter to Inject X-Frame-Options]]
* [[ae2dc4f8-af3d-4002-9417-f3f1d5c9128b|Add X-Frame Options to Responses]]
* [[00000000-0000-0000-0000-00000063561d|Use the Strict-Transport-Security Header to Enforce HTTPS]]
* [[00000000-0000-0000-0000-000000225f24|Use includeSubDomains with Strict-Transport-Security]]

==HTTP Header Checklist Items==

* [[00000000-0000-0000-0000-0000006b6766|X-Content-Security-Policy Is Used to Mitigate XSS]]
* [[00000000-0000-0000-0000-0000007122c6|X-XSS-Protection Is Used to Prevent Reflected XSS]]
* [[00000000-0000-0000-0000-000000498810|X-Frame-Options Are Used to Prevent Clickjacking]]
* [[0d1871fe-76d3-4ea3-87be-ef63662dd772|A Filter Is Used to Inject X-Frame Options]]
* [[26caffea-d597-40fd-9ed0-36fb025d188b|X-Frame Options Are Added to Responses]]
* [[00000000-0000-0000-0000-0000001b501f|The Strict-Transport-Security Header is Used to Enforce HTTPS]]
* [[0078cd3f-9e84-4eb4-9a2f-7f51e3100801|IncludeSubDomains is Used with Strict-Transport-Security]]

]]></Data>
  </Content>
</TeamMentor_Article>