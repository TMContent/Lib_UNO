<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-000000732de4</Id>
    <Id_History>00000000-0000-0000-0000-000000732de4,4880babd-c76d-487f-a247-618ce029ad04,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>[1612Dupe] Role-based Authorization Is Used</Title>
    <Category>Authorization</Category>
    <Phase>Design</Phase>
    <Technology>iOS</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Role-based Access Control Is Used</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==Applies To==

*iOS applications that access resources on a remote server.

==What to Check For==

Verify that role-based access control is used.

==Why==

Application roles allow administrators to group users into categories that need the same level of privilege. The mechanism provides an easy and clear way to discover and manage the least privilege necessary for the execution of a given task. It provides a more robust and flexible way of managing the application's users than per-user access control.

==How to Check==

To verify that role-based access control is used:

# **Understand the different types of users.** Enumerate the different types of users needed for the application. Understand how they will use the application and to which resources they will need access. Create a spreadsheet mapping the actions each role is authorized to perform with the corresponding system components. Use this spreadsheet to identify the different types of users according to the functionality they need. Creating a threat model may be a useful step to ensure that you correctly understand the implications of this spreadsheet.
# **Verify that roles have been defined.** Determine which resources can be accessed by each role.
# **Verify that access control is implemented.** Examine code that accesses each type of resource to make sure that it performs access control checks before accessing the resource.
# **Verify that access control enforces defined roles.** Examine the code that performs access control checks to make sure that it enforces the defined roles.

==How to Fix==

Use the following steps when designing role-based security:

# **Understand the different types of users.** Enumerate the different types of users needed for the application. Understand how they will use the application and to which resources they will need access. Create a spreadsheet mapping the actions each role is authorized to perform with the corresponding system components. Use this spreadsheet to identify the different types of users according to the functionality they need. Creating a threat model may be a useful step to ensure that you correctly understand the implications of this spreadsheet.
# **Establish the roles.** Define which resources can be accessed by each role. Place access control checks at the appropriate locations in your application.
# **Manage the users.** Assign the users into their respective user roles. The application should enforce the security policy on a per-role rather than per-user basis.

==Authorization Guidelines==
* [[00000000-0000-0000-0000-0000007bc9f5|Disable File Sharing in Applications by Default]]
* [[00000000-0000-0000-0000-0000007f43b7|Use Role-based Access Control]]

==Authorization Checklists==
* [[00000000-0000-0000-0000-00000092d7fb|File Sharing Is Disabled in Applications by Default]]
* [[00000000-0000-0000-0000-000000732de4|Role-based Access Control Is Used]]
]]></Data>
  </Content>
</TeamMentor_Article>