<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-000000570fbb</Id>
    <Id_History>00000000-0000-0000-0000-000000570fbb,335540da-16a3-4fa4-a783-dcfc25621f69,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>HTTP-Only and Secure Flags Are Set on Session Cookies</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>HTTP-Only and Secure Flags Are Set on Session Cookies</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* ASP.NET

==What to Check For==

Make sure that //HTTPOnly// and //Secure// flags are set on session cookies.

==Why==

The //Secure// flag should be set on session cookie to protect its contents from eavesdropping attacks.  These attacks, if successful, can be used to hijack the userâ€™s session and interact with the application as if they were the real user. Setting the //Secure// flag on session cookie ensures it is only transferred over connections that are secured by SSL and prevents eavesdropping.

The //HTTPOnly// flag should be set on session cookie to mitigate Cross-Site Scripting attacks. Setting the //HTTPOnly// flag on session cookie prevents the contents of the cookie from being transmitted by a client-side script. Since in a Cross-Site Scripting attack  an arbitrary script runs in the context of the user's browser, the //HTTPOnly// flag effectively prevents the malicious script from using the cookie in the attack.

==How to Check==

To check if //HTTPOnly// and //Secure// flags are set on session cookies:

# **Load the application and authenticate.** Open the application with a web browser and authenticate. It's okay to start the session in some other way and many applications will create sessions even for users that aren't authenticated. Logging in is a certain way to start a session for any reasonably designed application that uses sessions. Make sure that the application uses SSL - most browsers indicate that with an icon in the URL bar.
# **Examine the session cookies.** Use a web browser option or plugin that shows detailed information about the current cookies. Examine the session cookie created by the application. Make sure that it has the //HTTPOnly// and //Secure// flags set.
# **Examine Web.config.** Review the Web.config configuration file on the server side to make sure that //httpOnlyCookies// and //requireSSL// properties are set to //true// for the //httpCookies// element. These settings will actually set //HTTPOnly// and //Secure// flags for all cookies. This is not strictly required to pass this checklist, but these settings are recommended.

==How to Fix==

To set //HTTPOnly// and //Secure// flags on session cookies:

# **Configure IIS to use SSL/TLS.** Get a valid certificate. Hosting service providers often sell valid SSL certificates. Install the certificate. Create an HTTPS binding for the site. A link in the "Additional Resources" section describes how to do this in detail.
# **Set the //Secure// and //HTTPOnly// flags for session cookies.** Edit the Web.config file. Set the //httpOnlyCookies// property to //true// for the //httpCookies// element. Set the //requireSSL// property to //true// for the //httpCookies// element. There are different ways to write this in XML. Here is one: <httpcookies httponlycookies="true" requiressl="true"></httpcookies>

==Additional Resources==

* For information about how to setup SSL on IIS, see http://www.iis.net/learn/manage/configuring-security/how-to-set-up-ssl-on-iis]]></Data>
  </Content>
</TeamMentor_Article>