<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-00000060779f</Id>
    <Id_History>00000000-0000-0000-0000-00000060779f,d00e5e57-9ca7-4118-b0d9-05be302f8d00,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use TLS to Protect Communications</Title>
    <Category>Communication Security</Category>
    <Phase>Implementation</Phase>
    <Technology>iOS</Technology>
    <Type>How To</Type>
    <DirectLink>Use SSL to Protect Communications</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* iOS applications that send or receive sensitive data over the network.

==What to Do==

Use TLS to protect network communications.

==Why==

Properly using TLS to encrypt network communications prevents eavesdropping attacks and other types of man-in-the-middle attacks.

==How==

To use TLS to protect communications:

# **Identify all communications performed by the application.** Review the application design to identify all network communications performed by the application.
# **Define communication security requirements.** Define which network communications need to be encrypted. All transmissions that include sensitive data, including authentication credentials and session IDS, should be encrypted. In some cases, it might be practical to encrypt all network connections.
# **Identify code that uses the network.** Identify code that is responsible for each network communication that needs to be encrypted.
# **Add code that uses TLS.** Rewrite code that performs sensitive network communications to use TLS. The //NSURLRequest// and //NSURLConnection// classes support TLS with an acceptably secure default configuration starting with iOS 5 - this is the most practical way to use TLS on iOS and should be sufficient for most applications. 

]]></Data>
  </Content>
</TeamMentor_Article>