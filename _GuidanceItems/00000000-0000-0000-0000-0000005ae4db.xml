<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000005ae4db</Id>
    <Id_History>00000000-0000-0000-0000-0000005ae4db,2dda9407-0de5-4a2b-aa20-cc8f6f2b9fbf,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>1sink dupe URL-encode Data in HTTP Response Headers</Title>
    <Category>Encoding</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Guideline</Type>
    <DirectLink>URL-encode Data in HTTP Response Headers</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==
* Java

==What to Do==
URL-encode any user supplied data that is sent back in HTTP response header.

==Why==

If the application accepts user input and includes such input in HTTP response headers the application will be vulnerable to response splitting vulnerability unless headers are URL-encoded or data is sanitized. Attackers can execute a cross site scripting attack by forcing your application to send carriage return (CR) and line feed (LF) followed by malicious content to the users browser. Because CRLF is a response header separator and CRLF CRLF separates headers from the body, the browser sees attackers content as legitimate. 

==How==

To URL-encode data in HTTP Response headers:

# **Identify all data included in HTTP response headers.** Search your code for calls to // HttpServletResponse.AddHeader// and for //HttpServletResponse.AddCookie// to find all code that adds data to HTTP response headers.
# **Validate all data included in HTTP response headers.** Use positive validation routines to check all data that gets included in HTTP response headers.
# **URL-encode all data included in HTTP response headers.** Use //java.net.URLEncoder// class to URL-encode data that gets includes in HTTP response headers.
]]></Data>
  </Content>
</TeamMentor_Article>