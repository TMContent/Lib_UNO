<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000004f2fec</Id>
    <Id_History>00000000-0000-0000-0000-0000004f2fec,cde61562-aff2-40a0-beb9-d5bc580df781,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>All Input Is Validated</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Android</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>All Input Is Validated</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## What to Check For ##

Verify that all input is validated.


## Why ##

Properly implemented input validation mitigates many types of injection vulnerabilities. Input validation should be used as a part of a defense-in-depth strategy.


## How to Check ##

To verify that all input is validated:

1. **Identify all entry points for user input.** Make a list of all possible sources of user input in your application.

2. **Identify all types on input accepted by the application.** For each source of user input on the list, define valid characters, length, format, and range (for numerical values).

3. **Trace data from source to sink.** Trace each source of input through your application until you find its ultimate destination.  The ultimate sink may be in memory, on the hard drive, or in a database, or the data may ultimately be sent over the network.

4. **Inspect the input validation subsystem.** Each input source should have a data validation routine associated with it. The validation should occur as soon as possible after the input reaches your application. Shared validation routines are better than many different routines spread throughout your code base. Check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing. 

5. **Ensure quality of validation routines.** Make sure that each validator verifies the characters, length, format, and range (for numerical values) of its respective type of input. Validation should check first for known valid and safe data and then for malicious, dangerous data. Do not rely on filtering out all malicious data, as it is easy to miss something.


## How to Fix ##

To validate all user input using whitelist input validation:

1. **Identify all entry points for user input.** Make a list of all possible sources of user input in your application.

2. **Identify all types of input accepted by the application.** For each source of user input on the list, define valid characters, length, format, and range (for numerical values).

3. **Define an input validation subsystem.** Define a set of validator functions that should be used to validate each type of input handled by the application.

4. **Validate characters.** Restrict the acceptable range of characters in text input using regular expressions.

5. **Validate length.** Add code to check that the length of the user input is valid.

6. **Validate format.** If the input type has a specific pattern, such as a date or a phone number, use regular expressions to make sure user input matches the input type specified by the application. 

7. **Validate range.** Restrict the acceptable range of numerical input by comparing the input to the maximum and minimum acceptable values.

8. **(Optional) Reject and respond to known bad input.** This step does not add much actual security, but it may provide some defense in depth. The input validation subsystem may check for known attack strings and respond to these likely attacks by alerting the user. The options for responding to invalid input are: reject invalid input, log invalid input, take evasive action.

9. **(Context-sensitive) Encode input.** If the input is going to be displayed back through a web browser, consider encoding it to prevent Cross-Site Scripting attacks.
]]></Data>
  </Content>
</TeamMentor_Article>