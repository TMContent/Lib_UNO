<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-00000016b3b2</Id>
    <Id_History>00000000-0000-0000-0000-00000016b3b2,0b3ddffc-d52b-43af-bcdb-09aeaa1495e9,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Scala Validate All Input Passed to the Database</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Scala Play</Technology>
    <Type>Code Example</Type>
    <DirectLink>Validate All Input Passed to the Database</DirectLink>
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Scala and Play Framework 2.1.0 
* Database

## Problem Example ##

The following code allows the user to query a database. Unfortunately, the application fails to validate the user's input. Therefore, an attacker can access the back-end database on behalf of the application through the use of SQL injection.

For example, say a MongoDB collection contains some documents that represent books, some that represent movies, and some that represent music albums. This JavaScript query function will select all the documents in the specified collection that were written, filmed, or recorded in the specified year:

If the developer were building this application using a given programming language, the source code might look like this:

~~~~
$query = 'function() {var search_year = \'' .
$_GET['year'] . '\';' .
'return this.publicationYear == search_year || ' .
' this.filmingYear == search_year || ' .
' this.recordingYear == search_year;}';
$cursor = $collection->find(array('$where' => $query));
~~~~

This code uses the value of the request parameter “year” as the search parameter. Just as in a traditional SQL injection attack, since the query syntax is being constructed in an ad-hoc fashion (i.e. query syntax concatenated along with user input), this code is vulnerable to a server-side JavaScript injection attack. For example, the following request would be an effective DoS attack against the system:

~~~~
http://server/app?year=1995';while(1);var%20foo='bar
~~~~

## Solution Example ##

Strong input validation can be used to prevent SQL/NoSQL Injection attacks on an application. Prepared Statements must be used. Additionally, precompiled queries can also be used to prevent these attacks.

Care should be taken while using precompiled queries to make sure that the internal queries do not contain dynamic content.

Bind parameters are the best way to pass data to the database. Instead of putting the values directly into the SQL statement, you just use a placeholder like ?, :name or @name and provide the actual values using a separate API call.

Below example shows a secure implementation of using Bind variable in Play Framework:

~~~~
public static void searchString(String keyword) {
String trimedkeyword = keyword.trim();
String keypattern = "%"+trimedkeyword+"%";
String query="select distinct item from Item where item.name like :keypattern";
List items = Item.find(query).bind("keypattern", keypattern).fetch();
...
}
~~~~

Play Framework supports “Anorm” to access database. According to the Play Framework source code here, Anorm builds only java.sql.PreparedStatements, which prevents SQL injection attack.

Below is an example of how Anorm can be used safely in Play Framework:

~~~~
object Person {
def save(p:Person) {
DB.withConnection ("default") { implicit connection =>
SQL("""
INSERT INTO person(firstName,lastName)
values ({firstName}, {lastName})
"""
).on(
"firstName" -> p.firstName,
"lastName" -> p.lastName
).executeUpdate()
}
}
}
~~~~]]></Data>
  </Content>
</TeamMentor_Article>