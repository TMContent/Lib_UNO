<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-000000736a21</Id>
    <Id_History>00000000-0000-0000-0000-000000736a21,fc53bc00-ad07-4652-8ef1-1b646ba12649,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Check the Origin Attribute of WebSocket Messages</Title>
    <Category>WebSockets</Category>
    <Phase>Implementation</Phase>
    <Technology>HTML5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Check the Origin Attribute of WebSocket Messages</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* HTML5 and JavaScript

==What to Do==

When processing events such as {{{onmessage}}} using WebSocket, always check the origin attribute to make sure the message is coming from the source you expect.

==Why==

If you do not check the origin of the MessageEvent to confirm that it is coming from a safe domain, your application may be open to attacks. These attacks may be in the form of messages sent from other servers and may contain messages harmful to your application.

==When==

Always verify the origin attribute of the incoming message.

==How==

The technique for checking the origin attribute depends on whether you would like to verify a specific server or a specific domain. 

# **If the origin is expected to be a specific server, check it against the server name.** Use the JavaScript {{{===}}} operator to verify equality between the expected server name and the value of the origin attribute. 
# **If the origin is expected to be from one or more domains, check it against the domain name(s).** Use a regular expression to provide wildcard-type functionality. To do so, continue with Steps 3-9 below.
# **Identify the allowed domains from which a message will be accepted.** Always use a white list approach. Gather a list of the valid domains and be as strict as possible. Include only the domains from which you want to process messages.
# **Create a function for validating the domains to centralize the logic.** Creating a function also allows you to test the code more easily.
# **Check the length of the domain before validating it.** Use the length property to ensure the size of the domain is not so large that it will cause a RegEx DoS. 
# **Build the regular expression for validating your domains.** The expression will look like this one, which tests valid host names using Internet Engineering Task Force Request for Comments 1035: {{{ ^https?:\/\/([a-z][-a-z0-9]+[a-z0-9]\.)*mydomain\.com$ }}}. This expression allows both HTTP and HTTP over Secure Sockets Layer (HTTPS). It white lists the allowed characters for a host name in a URL. The question mark [?] is a qualifier that matches the previous character(s) once at most. The expression {{{([a-z][-a-z0-9]+[a-z0-9]\.)*}}} will match one or more host names, so {{{ http://myserver.example.com }}} as well as {{{ http://www.mysubdomain.example.com }}} will match.
# **Inside the new function, create a regular expression object with your expression.** Pass the expression to the RegExp constructor, as shown here: {{{ var re = new RegExp(/^https?:\/\/([a-z][-a-z0-9]+[a-z0-9]\.)*mydomain\.com$/); }}}
# **Use the test() method of the RegExp object to verify that the origin attribute matches.** The test() method can be used like this: {{{ return pattern.test(origin); }}}
# **Call the function from your {{{onmessage}}} event handler.** Pass the value of the origin attribute to your function: {{{ webSocket.onmessage = function(event) ... }}}
# **Test thoroughly.** Test the code thoroughly with both positive and negative matches to be sure that it properly handles the validation.

==Problem Example==

The following code handles the event message without checking the origin attribute. In this example, the message could be sent from almost anywhere, including an attacker sending malicious content:

{{{

var socket = new WebSocket("ws://echo.websocket.org");

socket.onmessage = function(event) {
var mydiv = document.getElementById("div1");
mydiv.innerHTML = event.data;
}

}}}

\\
==Solution Example==

The following code properly checks the origin attribute using a custom function that verifies that the message has been sent from an expected source:

{{{

function isOriginValid(origin) {
var pattern = new RegExp(/^https?:\/\/([a-z][-a-z0-9]+[a-z0-9]\.)*mydomain\.com$/);
	return pattern.test(origin);
}
var socket = new WebSocket("ws://echo.websocket.org");

socket.onmessage = function(event) {
	if (isOriginValid(event.origin)) {
	var mydiv = document.getElementById("div1");
	mydiv.innerHTML = event.data;
}

}}}

The expression in the {{{isOriginValid()}}} method ensures that the origin string starts with {{{ http:// }}} or {{{ https:// }}} and ends with example.com, which in this case represents the expected domain.


==WebSocket Guidelines==

* [[00000000-0000-0000-0000-000000869806|Validate Data Coming from WebSockets]]
* [[00000000-0000-0000-0000-00000093dea4|Check the Origin Header in the WebSocket Handshake]]
* [[00000000-0000-0000-0000-0000005f2e4a|Use TLS to Encrypt WebSocket Connections]]
* [[00000000-0000-0000-0000-000000736a21|Check the Origin Attribute of WebSocket Messages]]
* [[00000000-0000-0000-0000-0000005326a8|Use the Latest WebSocket RFC 6455 Standard]]
* [[00000000-0000-0000-0000-00000085bc2f|Do Not Tunnel TCP via WebSockets]]

==WebSocket Checklist Items==

* [[00000000-0000-0000-0000-00000086537e|Data Coming from WebSockets Is Validated]]
* [[00000000-0000-0000-0000-00000077e316|The Origin Header in WebSocket Handshake is Checked]]
* [[bd870268-f104-4f6f-ba0d-6628dc34eb2a|TLS is Used to Encrypt WebSocket Connections]]
* [[00000000-0000-0000-0000-0000002f39d7|The Origin Attribute of WebSocket Messages Is Checked]]
* [[18d5564d-00a4-4afe-a853-707269df2566|Latest RFC 6455 Standard is Used]]
* [[00000000-0000-0000-0000-00000091ce5a|TCP Is Not Tunneled via WebSockets]]
]]></Data>
  </Content>
</TeamMentor_Article>