<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000002e3de4</Id>
    <Id_History>00000000-0000-0000-0000-0000002e3de4,4602a341-99a3-4b53-9218-6028a3ede913,</Id_History>
    <Library_Id>b6f408c5-6e6e-4bc0-90a5-0bb10becc2ce</Library_Id>
    <Title>Implement Code Integrity Checks</Title>
    <Category>Code Integrity</Category>
    <Phase>Implementation</Phase>
    <Technology>iOS</Technology>
    <Type>Guideline</Type>
    <DirectLink>Implement Code Integrity Checks</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="WikiText">
    <Data><![CDATA[==Applies To==

* All iOS applications.

==What to Do==

Implement code integrity checks that are difficult to bypass.

==Why==

Code integrity checks help prevent software piracy and unauthorized modifications to the application. Code integrity checks do not provide 100% assurance of code integrity, but they make it harder for an attacker to modify the application binary code without breaking it.

==How==

To check code for integrity:

# **Write piracy check functions.** Piracy check functions often try to determine whether the application is running on a jailbroken device. The application is not necessarily pirated if it is on a jailbroken device, but there are no fool-proof anti-piracy or code integrity measures for jailbroken devices. Piracy checks can determine whether a device is jailbroken by looking for files that only appear on jailbroken devices, such as Cydia. If piracy is not a concern, this step may be omitted.
# **Write integrity check functions.** The most common ways to implement code integrity checks is to check classes for expected addresses or checksums. The //class_getMethodImplementation// method returns a pointer to a method; checking the value of this pointer against the expected value provides reasonable assurance that the method has not been modified during runtime.
# **Define integrity check functions as inline.** The integrity check functions written in the previous step should be defined as //inline// so that the compiler inserts the full integrity checking code wherever it is invoked.
# **Scatter integrity check functions throughout the application.** Multiple integrity check function calls spread out throughout the application make it harder for an attacker to find them all and patch them.

==Code Integrity Guidelines==
* [[00000000-0000-0000-0000-0000002e3de4|Implement Code Integrity Checks]]
* [[00000000-0000-0000-0000-000000470103|Sign iOS Application Updates]]
* [[00000000-0000-0000-0000-000000986af1|Sign iOS Applications]]

==Code Integrity Checklists==
* [[00000000-0000-0000-0000-0000002d9dac|Code Integrity Checks Are Implemented]]
* [[00000000-0000-0000-0000-000000892dc7|iOS Application Updates Are Signed]]
* [[00000000-0000-0000-0000-00000039db6a|iOS Applications Are Signed]]

==Additional Resources==

* For more information about the //class_getMethodImplementation// method, please see https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html]]></Data>
  </Content>
</TeamMentor_Article>