<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-000000582050</Id>
    <Id_History>00000000-0000-0000-0000-000000582050,7ec97602-1922-43c2-b442-45fffad929b8,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Authentication Credentials Sent over the Network Are Encrypted</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>Android</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Authentication Credentials Sent over the Network Are Encrypted</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==What to Check For==

Verify that authentication credentials sent over the network are encrypted.

==Why==

Encrypting authentication credentials sent over the network helps prevent various man-in-the-middle attacks, such as spoofing or hijacking.

==How to Check==

To verify that authentication credentials are encrypted when sent over the network:

# **Identify the authentication mechanism used by the application.** Most applications use usernames and passwords for authentication, however there are other options available, such as certificates. 
# **Identify the authentication code.** Identify the code that is responsible for authentication both on the iOS device and on the remote server. The authentication itself should be implemented on the server. To protect authentication credentials in transit, both end points need to support TLS.
# **Review authentication code.** Examine authentication code to make sure that it uses TLS to send authentication credentials.
# **Inspect packet captures.** Use a tool such as //Wireshark// to capture packets sent by the application during authentication. Inspect the captured packets to make sure that authentication credentials are not sent in plain-text.

==How to Fix==

To encrypt authentication credentials sent over the network:

# **Identify the authentication mechanism used by the application.** Most applications use usernames and passwords for authentication, however there are other options available, such as certificates. 
# **Identify the authentication code.** Identify the code that is responsible for authentication both on the iOS device and on the remote server. The authentication itself should be implemented on the server. To protect authentication credentials in transit, both end points need to support TLS. 
# **Encrypt authentication credentials in transit.** Add code that uses TLS to protect authentication credentials in transit. 

==Authentication Guidelines==

* [[00000000-0000-0000-0000-000000589e46|Encrypt Authentication Credentials Sent over the Network]]
* [[00000000-0000-0000-0000-0000002eb5bd|Implement a Secure Password Reset Function]]
* [[00000000-0000-0000-0000-0000002a1fe0|Throttle Authentication Attempts]]
* [[00000000-0000-0000-0000-00000081c795|Use Server-side Authentication]]

==Authentication Checklists==

* [[00000000-0000-0000-0000-000000582050|Authentication Credentials Sent over the Network Are Encrypted]]
* [[00000000-0000-0000-0000-00000035726e|A Secure Password Reset Function Is Implemented]]
* [[00000000-0000-0000-0000-00000016d320|Authentication Attempts Are Throttled]]
* [[00000000-0000-0000-0000-00000029e0c4|Authentication Is Implemented on the Server-side]]
]]></Data>
  </Content>
</TeamMentor_Article>