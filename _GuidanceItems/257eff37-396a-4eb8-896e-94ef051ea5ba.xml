<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>257eff37-396a-4eb8-896e-94ef051ea5ba</Id>
    <Id_History>00000000-0000-0000-0000-0000005f2e4a,</Id_History>
    <Library_Id>7d2d0571-e542-45cd-9335-d7a0556c2bea</Library_Id>
    <Title>Use TLS/SSL to Encrypt WebSocket Connections</Title>
    <Category>WebSockets</Category>
    <Phase>Implementation</Phase>
    <Technology>HTML5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use TLS/SSL to Encrypt WebSocket Connections</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* HTML5

==What to Do==

When using WebSockets, connect with Transport Layer Security (TLS)/Secure Sockets Layer (SSL).

==Why==

Just as TLS/SSL protects and encrypts the communication tunnel in HTTP, it can encrypt a WebSockets tunnel to protect against eavesdropping and man-in-the-middle attacks. (By default, the communication tunnel with the WebSocket protocol is not encrypted.) 

==When==

Use this guideline for applications that employ the WebSocket protocol and need to protect sensitive data.

==How==

The WebSockets protocol specification is built on HTTP. With that in mind:

# **Enable security certificates and keys.** Consult your web server documentation to ensure that your web site produces a valid certificate with HTTPS connections.
# **Enable TLS/SSL on the WebSocket server.** The configuration may vary depending upon the Websocket server implementation in use. 
# **Connect the client to the WebSocket server and ensure connections to the WebSocket are secure.** When connecting to HTML5 web applications, ensure that client browsers connect with HTTPS. Note that the code accessing the WebSocket server should use the wss protocol, which is basically ws over TLS. As such, use {{{wss://<url>}}} instead of the typical {{{ws://<url>}}} in the HTML5 application code. 


==Problem Example==

Below is a client-side code connection to a WebSocket server. The connection uses standard ws over standard, unencrypted HTTP. An intruder who has access to the communication stream over the network could easily intercept the communication.

Client Connection:

{{{

$("#open").click (function (evt) {
evt.preventDefault();

var host = ‘example.com’;
var port = ‘8887’;
var uri = ‘very_private’;

ws = new WebSocket("ws://” + host + “:” + port + “/” + uri );

ws.onmessage = function(evt) {alert("Non encrypted message has been received”)};
ws.onclose = function(evt) { alert("Non encrypted connection is closed"); };
ws.onopen = function(evt) { alert(“Non encrypted connection has opened”) };
});

}}}

\\
==Solution Example==

Below is a client-side code connection to a WebSocket server using wss, which takes advantage of TLS/SSL over HTTP port 443. This change makes it much more difficult for an intruder to intercept the communication tunnel.

Client Connection:

{{{

$("#open").click(function(evt) {
evt.preventDefault();

var host = ‘example.com’;
var port = ‘8887’;
var uri = ‘very_private’;

ws = new WebSocket("wss://” + host + “:” + port + “/” + uri );
ws.onmessage = function(evt) {alert("TLS/SSL message has been received”)};
ws.onclose = function(evt) { alert("TLS/SSL connection is closed"); };
ws.onopen = function(evt) { alert(“TLS/SSL connection has opened”) };
});

}}}

When the handshake is performed using wss, you’ll see the typical handshake for TLS over port 443 to establish the secure connection.

Below is a partial communication stream seen when connecting to a WebSocket testing server at http://www.websocket.org/echo.html, and the view of the stream using a web debugging tool.

{{{

HTTP/1.1 200 Connection Established
FiddlerGateway: Direct
StartTime: 22:24:09.760
Connection: close

Encrypted HTTPS traffic flows through this CONNECT tunnel. HTTPS Decryption is enabled in Fiddler, so decrypted sessions running in this tunnel will be shown in the Web Sessions list.

Secure Protocol: Tls
Cipher: Rc4 128bits
Hash Algorithm: Sha1 160bits
Key Exchange: RsaKeyX 2048bits

== Server Certificate ==========
[Subject]
  CN=*.websocket.org, OU=Domain Control Validated, O=*.websocket.org

[Issuer]
  SERIALNUMBER=07969287, CN=Go Daddy Secure Certification Authority, OU=http://certificates.godaddy.com/repository, O="GoDaddy.com, Inc.", L=Scottsdale, S=Arizona, C=US

[Serial Number]
  27F9ADF2DB9921

[Not Before]
  10/19/2012 2:43:55 AM

[Not After]
  10/28/2014 5:06:24 PM

[Thumbprint]
  8A95FEB7BE9825FBE3F4F50A6662DC880764C876

}}}


==WebSocket Guidelines==

* [[00000000-0000-0000-0000-000000869806|Validate Data Coming from WebSockets]]
* [[00000000-0000-0000-0000-00000093dea4|Check the Origin Header in the WebSocket Handshake]]
* [[00000000-0000-0000-0000-0000005f2e4a|Use TLS/SSL to Encrypt WebSocket Connections]]
* [[00000000-0000-0000-0000-000000736a21|Check the Origin Attribute of WebSocket Messages]]
* [[00000000-0000-0000-0000-0000005326a8|Use the Latest WebSocket RFC 6455 Standard]]
* [[00000000-0000-0000-0000-00000085bc2f|Do Not Tunnel TCP via WebSockets]]

==WebSocket Checklist Items==

* [[00000000-0000-0000-0000-00000086537e|Data Coming from WebSockets Is Validated]]
* [[00000000-0000-0000-0000-00000077e316|The Origin Header in WebSocket Handshake is Checked]]
* [[bd870268-f104-4f6f-ba0d-6628dc34eb2a|TLS/SSL is Used to Encrypt WebSocket Connections]]
* [[00000000-0000-0000-0000-0000002f39d7|The Origin Attribute of WebSocket Messages Is Checked]]
* [[18d5564d-00a4-4afe-a853-707269df2566|Latest RFC 6455 Standard is Used]]
* [[00000000-0000-0000-0000-00000091ce5a|TCP Is Not Tunneled via WebSockets]]
]]></Data>
  </Content>
</TeamMentor_Article>