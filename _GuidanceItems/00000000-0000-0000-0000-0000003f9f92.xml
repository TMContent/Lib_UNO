<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000003f9f92</Id>
    <Id_History>00000000-0000-0000-0000-0000003f9f92,598e5aba-cb44-4278-b5a5-cda7d688901e,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>External Commands Are Avoided</Title>
    <Category>Dangerous APIs</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>External Commands Are Avoided</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* ASP.NET

==What to Check For==

Verify that calls to external commands are avoided as much as possible.

==Why==

Applications often use external commands to carry out some functionality. This helps programmers save time by having to write less code. Calling external commands is dangerous, as it creates the risk of introducing command injection vulnerabilities in your application. Command injection vulnerabilities allow attackers to execute external commands other than the ones intended by application. Most APIs used to execute external commands do not inherently provide protection against command injection. As a result, likelihood of introducing such vulnerability when calling external command is high. . It is recommended to avoid using external commands.

==How to Check==

To verify that calls to external commands are avoided:

# **Identify calls to external commands.** Search for the following APIs to find code that executes external commands: //AppCommandHandler.ExecuteCommand//, //System.Diagnostics.Process//.
# **Identify all calls to external commands that include user input.** Narrow down the list of calls to external commands to those that include user data in parameters or, worse, specify the application to run. Pay particular attention to these calls, because they are extremely dangerous and error prone.
# **Determine if calls to external commands can be replaced.** For each piece of code that executes external commands, consider if it can be replaced with code that does the same thing without external commands or whether this code can be removed altogether.

==How to Fix==

To avoid using external commands:

# **Identify calls to external commands.** Search for the following APIs to find code that executes external commands: //AppCommandHandler.ExecuteCommand//, //System.Diagnostics.Process//.
# **Identify all calls to external commands that include user input.** Narrow down the list of calls to external commands to those that include user data in parameters or, worse, specify the application to run. 
# **Determine if calls to external commands can be replaced.** For each piece of code that executes external commands, consider if it can be replaced with code that does the same thing without external commands or whether this code can be removed altogether.
# **Replace calls to external commands, if possible.** Rewrite each piece of code that executes external commands without calling external commands or remove such code altogether.

]]></Data>
  </Content>
</TeamMentor_Article>