<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000000960a4</Id>
    <Id_History>00000000-0000-0000-0000-0000000960a4,b7d224f1-cefd-4ee7-bd5a-81b05ddeafd2,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>PHP Encode Untrusted Data in Output</Title>
    <Category>Encoding</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Code Example</Type>
    <DirectLink>Encode Input Included in Output</DirectLink>
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* PHP

## Summary ##

Encode untrusted user data that is going to be included in HTML output. It is recommended to encode user data right before displaying it in HTML contexts. Another option is to encode user data when it is stored.

Encoding untrusted data before displaying it prevents Cross-Site Scripting vulnerabilities.

## Problem Example ##

Simply rendering user data submitted as a post parameter is dangerous and will result in a reflected XSS vulnerability:

	<?php
	echo $_REQUEST['data'];
	?>	

## Solution Example ##

Use the htmlspecialchars() function to encode untrusted data before displaying it to prevent reflected XSS. Unfortunately, PHP has a limited built-in support for encoding functions, that essentially only support HTML and URL contexts. These are the two most common contexts, but it is a serious limitation that the developer has to be aware of. It is best to simply not include untrusted data in other contexts and that should be possible for most common applications.

	<?php
	echo htmlspecialchars($_REQUEST['data']);
	?>	
	
## Guideline ##

* [Encode Untrusted Data in Output](9b0ef1a5-c143-4e64-81cc-9e02ccbd9fbd)]]></Data>
  </Content>
</TeamMentor_Article>