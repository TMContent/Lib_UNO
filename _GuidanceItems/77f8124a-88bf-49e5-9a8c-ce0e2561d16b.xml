<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>77f8124a-88bf-49e5-9a8c-ce0e2561d16b</Id>
    <Id_History>00000000-0000-0000-0000-0000001bf5e7,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Information Exposure Through an Error Message</Title>
    <Category>Error Handling</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Information Exposure Through an Error Message</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

Information exposure through an error message occurs when an error message discloses sensitive information that may help an attacker. Typical examples include disclosing whether a username is valid during failed authentication and disclosing SQL queries that cause database errors. The latter example is particularly dangerous because it greatly simplifies SQL injection attacks. The danger of error message information disclosure is that it makes other attacks easier and in some cases it is required for an attack to succeed. All applications are affected by this vulnerability type, but especially ones that use authentication and SQL databases. To prevent error message information disclosure, handle all errors, use simple error messages, and log detailed error information. To check for adequate protection against error message information disclosure, verify that all errors are handled, that simple error messages are used, and detailed error information is logged.

==Impact==

Error message information disclosure provided information to the attacker that enables him to carry out additional attacks. The two most common and dangerous scenarios are disclosing SQL queries after database errors and whether a username is valid during authentication. Disclosing SQL queries during errors helps the attacker determine whether a SQL injection vulnerability is present and what exactly the syntax of the vulnerability is. Displaying invalid SQL queries to the attacker also makes extracting data from the database via SQL injection a lot easier, because SQL injection can be formed in such a way that sensitive data is displayed as a part of an invaild query. This scenario is commonly used to extract password hashes from the database for administrative accounts. Another common error message disclosure scenario is when authentication errors indicate whether a username is valid or not. Knowing the username greatly simplifies password guessing attacks. In general, error messages should not disclose sensitive information to the end user.

==Countermeasures==

Implement all of the following countermeasures to prevent information exposure through error messages.

* [[461370b3-66e7-4ac3-900f-7e2f757c54a8|Use a Global Exception Handler for Unhandled Exceptions]]
* [[00000000-0000-0000-0000-00000020f866|Use Simple Error Messages]]
* [[14f3d913-78ec-4ff5-99aa-56b32faa67c4|Log Important Event Details]]

==Checklists==

Use each of the following checklist items to make sure that information is not being exposed through error messages. 

* [[f0c2bed2-b530-46bc-9e64-8041e0def190|Global Error Handlers Are Used to Catch Unhandled Exceptions]]
* [[00000000-0000-0000-0000-0000002f7a79|Simple Error Messages Are Used]]
* [[088663ea-793b-4fdd-9b66-d4c34a59da2c|Important Event Details Are Logged]]

==Computer Based Training Links==

Use the following Computer Based Training courses to learn more about Information Exposure Through an Error Message including techniques for remediation and prevention.

===Creating Secure ASP.NET Code===

This in-depth course examines the development of secure Web applications in ASP.Net. It provides developers and testers with an overview of common Web application vulnerabilities and a set of nine best practices and techniques to follow in order to avoid them. Throughout the course, students are provided with interactive games and simulations designed to reinforce the secure design and coding concepts that were introduced.

For more information about Information Exposure Through an Error Message in ASP.NET applications, see screen 55 in [[http://teamprofessor.absorbtraining.com/ninja/#/courses/course/127607|COD 311 Creating Secure ASP.NET Code]].

===Creating Secure C# Code===

This course will provide a deep understanding of application security risks and secure coding standards for C# applications. The main lesson guides students through the concepts underlying the coding principles and illustrates real-world best practices and techniques, and the labs allow students to test what they have learned.

For more information about Information Exposure Through an Error Message in ASP.NET applications, see screens 53-54 and 80-81 in [[http://teamprofessor.absorbtraining.com/ninja/#/courses/course/127608|COD 314 Creating Secure C# Code]].

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//]]></Data>
  </Content>
</TeamMentor_Article>