<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>00000000-0000-0000-0000-0000005ab7c3</Id>
    <Id_History>00000000-0000-0000-0000-0000005ab7c3,c0371a9e-c337-45a1-9751-4c90376e438a,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>1sink dupe Data in HTTP Response Headers Is URL-encoded</Title>
    <Category>Encoding</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Data in HTTP Response Headers Is URL-encoded</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==
* Java

==What to Check For==

Verify that data sent to the user in HTTP response headers is URL-encoded.

==Why==

If the application accepts user input and includes such input in HTTP response headers the application will be vulnerable to response splitting vulnerability unless headers are URL-encoded or data is sanitized. Attackers can execute a cross site scripting attack by forcing your application to send carriage return (CR) and line feed (LF) followed by malicious content to the users browser. Because CRLF is a response header separator and CRLF CRLF separates headers from the body,  the browser sees attackers content as legitimate. 

==How to Check==

To verify that data in HTTP response headers is URL-encoded:

# **Identify all data included in HTTP response headers.** Search your code for calls to //HttpServletResponse.AddHeader// and for //HttpServletResponse.AddCookie// to find all code that adds data to HTTP response headers.
# **Verify that data included in HTTP response headers is validated.** Examine code that adds data to response headers. Make sure that any user data is passed through positive validation routines before being included in HTTP response headers.
# **Verify that data included in HTTP response headers is URL-encoded.** Examine code that adds data to response headers. Make sure that any user data is URL-encoded using //java.net.URLEncoder// class before being included in HTTP response headers.

==How to Fix==
To URL-encode data in HTTP Response headers:
# **Identify all data included in HTTP response headers.** Search your code for calls to // HttpServletResponse.AddHeader// and for //HttpServletResponse.AddCookie// to find all code that adds data to HTTP response headers.
# **Validate all data included in HTTP response headers.** Use positive validation routines to check all data that gets included in HTTP response headers.
# **URL-encode all data included in HTTP response headers.** Use //java.net.URLEncoder// class to URL-encode data that gets includes in HTTP response headers.

==Additional Resources==

* For more information about the //URLEncoder.encode// method, see http://docs.oracle.com/javase/1.5.0/docs/api/java/net/URLEncoder.html]]></Data>
  </Content>
</TeamMentor_Article>