<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>80bb57aa-9af6-47ce-83f8-4f3fa6b4c459</Id>
    <Id_History>7088b485-e0de-4649-8c0e-1a9c40619436,</Id_History>
    <Library_Id>d9c2b53f-5b05-4152-be72-e79d72854707</Library_Id>
    <Title>Command Injection Attack</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Scala with Play Framework</Technology>
    <Type>Attack</Type>
    <DirectLink>Command Injection Attack</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>Scala applications that import sys.* to run external commands in the application.</p>
  <h1>Description</h1>
  <p>Command injection attacks are a subset of injection attacks in which the process is tricked into either executing code or calling external processes of the attacker's choice through the injection of control information into the data stream.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Elevation of Privilege:</strong>&amp;nbsp;Command injection can allow the attacker to execute arbitrary commands and code.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>
      <strong>Failure to Validate User Input:</strong> Command injection opportunities are created when control information and data are mixed.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <strong>Validate user input</strong>. To prevent commands from being included in data, validate input for type, length, range, and format. Whitelist acceptable input and reject everything else. Escape meta characters and be aware of canonicalization issues. Remember that data may be changed as it flows through the program, so it is often appropriate to validate at multiple stages.</li>
    <li>
      <strong>Do not use input data in commands directly</strong>. An attacker may use clever formatting so that the user's input is treated as its own separate command instead of as data. Therefore, validate the input and explicitly type it as data so that it cannot be interpreted as a command even if it contains one.</li>
    <li>
      <strong>Avoid using command interpreters</strong>. Although not always practical, using a well maintained API will produce better results than invoking commands through an interpreter or external process.</li>
  </ul>
  <h1>Example</h1>
  <p>
  </p>
  <div>
    <div>The example below shows how easy it is to run external commands in Scala if “sys.process” is imported in the application.</div>
    <div>
      <pre>scala&gt; import sys.process._

import sys.process._

scala&gt; "ls -al" !

total 64

drwxr-xr-x 10 Al staff 340 May 18 18:00 .

drwxr-xr-x 3 Al staff 102 Apr 4 17:58 ..

-rw-r--r-- 1 Al staff 118 May 17 08:34 Foo.sh

-rw-r--r-- 1 Al staff 2727 May 17 08:34 Foo.sh.jar

res0: Int = 0

</pre>
    </div>
  </div>
  <div>
    <p>Similarly, the code below shows how assigning user input to the parameter directly with no sanitization can lead to OS level injection.</p>
    <p />
    <pre>scala&gt; val result = "ls -al" !!

result: String =

"total 64

drwxr-xr-x 10 Al staff 340 May 18 18:00 .

drwxr-xr-x 3 Al staff 102 Apr 4 17:58 ..

-rw-r--r-- 1 Al staff 118 May 17 08:34 Foo.sh

-rw-r--r-- 1 Al staff 2727 May 17 08:34 Foo.sh.jar"

scala&gt; println(result)

total 64

drwxr-xr-x 10 Al staff 340 May 18 18:00 .

drwxr-xr-x 3 Al staff 102 Apr 4 17:58 ..

-rw-r--r-- 1 Al staff 118 May 17 08:34 Foo.sh
</pre>
    <pre>-rw-r--r-- 1 Al staff 2727 May 17 08:34 Foo.sh.jar</pre>In the above example, Positive or "whitelist" input validation ie "<i>result"</i> with appropriate canonicalization to help protect against injection.&amp;nbsp;<a href="https://www.owasp.org/index.php/ESAPI">OWASP's ESAPI</a>&amp;nbsp;has an extensible library of&amp;nbsp;<a href="http://owasp-esapi-java.googlecode.com/svn/trunk_doc/latest/org/owasp/esapi/Validator.html">white list input validation routines</a>.</div>
  <p />
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on Command Injection, see the&amp;nbsp;<a href="http://www.e-articles.info/e/a/title/Command-Injection/">Command Injection&amp;nbsp;</a>article at e-articles.info.</li>
    <li>For more information on the Javascript Eval function, see the Wikipedia Eval article at&amp;nbsp;<a href="http://en.wikipedia.org/wiki/Eval">http://en.wikipedia.org/wiki/Eval</a>.</li>
    <li>For more information on script blocks in XSL, see&amp;nbsp;<a href="http://msdn2.microsoft.com/en-us/library/wxaw5z5e.aspx">Script Blocks Using msxsl:script&amp;nbsp;</a>on MSDN.</li>
    <li>For more information on XSL transformations, see&amp;nbsp;<a href="http://en.wikipedia.org/wiki/XSL_Transformations">XSL Transformations</a>&amp;nbsp;on wikipedia.</li>
  </ul>
  <div>
    <h1 style="margin: 0px; padding: 10px 0px 0px; font-size: 17px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif;">Related Items</h1>
    <ul style="margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;">
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="00000000-0000-0000-0000-0000001bfead">Attack: Injection Attack</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="86060870-16cd-4115-a5cf-ba47e61f9f0b">Attack: XML Injection Attack</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="00c12016-5b40-405d-8dd8-9969b30604ef">Attack: Xpath-XQuery Attack</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <b style="color: rgb(51, 51, 153);">
          <a href="3b45dd83-7d7b-4e2e-a5ca-83a9a3eaec56">Attack: Cross Site Scripting Attack</a>
        </b>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="c4fb3614-f35d-45db-b576-f99bb34de516">Attack: AJAX Injection Attack</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <b style="color: rgb(51, 51, 153);">
          <a href="05480b9c-955f-41bb-9e52-e922f53a92e6">Guideline: Filter All User-Supplied Filename and Path Input</a>
        </b>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="af528b9a-af5f-49b8-a314-4578c0b31273">Guideline: Validate Input from All Sources</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="b6795407-d01e-44ec-8aed-a440d388902b">Guideline: Validate Input for Length, Range, Format, and Type</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="97d61072-14e2-48dd-a1bf-ec149efbcb54">Guideline: Do Not Rely on Client-Side Validation</a>
          </b>
        </font>
      </li>
    </ul>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>