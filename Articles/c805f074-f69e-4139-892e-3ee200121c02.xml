<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>c805f074-f69e-4139-892e-3ee200121c02</Id>
    <Id_History>c805f074-f69e-4139-892e-3ee200121c02,4778b167-7815-4e98-9415-dd06d29ccd5a,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Validate the Length of XML Data</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Validate the Length of XML Data</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* ASP.NET 4.0

==What to Do==

Validate the length of XML data.

==Why==

Validate the length of XML data to prevent multiple types of XML denial-of-service attacks. Most types of XML denial-of-service attacks can either be prevented or mitigated by limiting the size of XML data that is passed to the parser.

==How==

To validate the length of XML data:

# **Find all code that parses XML data.** Determine what XML parser your application uses. Search application code for all references to the XML parser. Make a spreadsheet about all the code that passes XML data to the parser.
# **Determine valid lengths of XML data.** For each piece of code that passes XML data to the parser, determine what the maximum reasonable length of the XML data is. Record this information in the spreadsheet.
# **Validate the length of XML data before parsing.** For each piece of code that passes XML data to the parser, add code that makes sure that the XML data does not exceed the length specified in the previous step of this guideline. If the XML data exceeds the maximum reasonable length, it should not be passed to the parser and an error condition should be triggered.
]]></Data>
  </Content>
</TeamMentor_Article>