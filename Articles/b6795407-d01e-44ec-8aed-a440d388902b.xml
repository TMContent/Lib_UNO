<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>b6795407-d01e-44ec-8aed-a440d388902b</Id>
    <Id_History>b6795407-d01e-44ec-8aed-a440d388902b,17e2f87d-6497-43bc-837d-c315774022f9,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Validate Input</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Scala Play</Technology>
    <Type>Code Example</Type>
    <DirectLink>Validate Input for Length, Range, Format, And Type</DirectLink>
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Scala and Play Framework 2.1.0+


## Problem Example ##

The following code shows how a user registers for an account. Post-registration, when the user logs in, the registered name is reflected back on the screen. Because it does not HTML encode the echoed input, the application is vulnerable to persistent cross-site scripting.

Code for the User creation model -- notice that the name is a String object with no validations and allows special characters:

~~~~
object User extends UserInfoService[String, User] {

  val passwordService = MyPasswordService
  def register(email: String, name:String, password: String) : User = {
    val encryptedPassword = passwordService.encryptPassword(password)
    val user = User(email, name, encryptedPassword)
    create(user)
  }

def create(user: User): User = {
    DB.withConnection {
      implicit connection =>
        SQL(
          """
          insert into user values (
            {email}, {name}, {password}
          )
          """
        ).on(
          'email -> user.email,
          'name -> user.name,
          'password -> user.password.underlying
        ).executeUpdate()

        user
    }
  }
~~~~    

Code for the Signup Controller:
  
~~~~
val signupForm = Form(
mapping(
  "email" -> email,
  "fullName" -> text,
  "password" -> weakPassword
)(SignupData.apply)(_ => None)
)

case class SignupData(email: String, fullName: String, password: String)
~~~~


Code for the HTML template where the user is redirected after successful login--notice that the name, which is not sanitized, is reflected back as raw HTML:
    
~~~~  
@()(implicit ctx: MyContext[_])

@base.layout() {
  <div class="container">
    <div class="row">
      <div class="span12">
        <div class="well" style="height: 600px">
          <h1 style="text-align: center">Main Page</h1>

          <p style="font-size: 20px; text-align: center; margin-top: 15px">
            @ctx.me match {
              case None => {
                You are anonymous.
              }
              case Some(user) => {
                You are currently logged in as @Html(user.name).
              }
            }
          </p>
        </div>
      </div>
    </div>
  </div>
}
~~~~


## Solution Example ##

The following code shows how a user registers for an account, Again, post-registration, when the user logs in, the registered name is reflected back on the screen. But this time the play framework automatically performs HTML encoding of all the entries in the HTML template. This protects the application from XSS. Additionally, there should be regex validation on the Name parameter to make sure that the user is not able to enter malicious names into the application.

Regex validation for Name:

~~~~
val pid = SignupForm.empid
val name = SignupForm.productname
val emp = Emp.findEmp(pid, name)
val whitelistPattern = "(\\w|\\d)+".r
val issafe =whitelistPattern.pattern.matcher(name).matches
if (issafe){
...... //Code for Action
}else{
...... //Code for Exception
}
Code for HTML template:

@()(implicit ctx: MyContext[_])

@base.layout() {
  <div class="container">
    <div class="row">
      <div class="span12">
        <div class="well" style="height: 600px">
          <h1 style="text-align: center">Main Page</h1>

          <p style="font-size: 20px; text-align: center; margin-top: 15px">
            @ctx.me match {
              case None => {
                You are anonymous.
              }
              case Some(user) => {
                You are currently logged in as @user.name.
              }
            }
          </p>
        </div>
      </div>
    </div>
  </div>
}
~~~~

  
## Guideline ##

* [Validate All Input](11a15f3a-7fe8-4e4c-be5e-309ab7227b3d)]]></Data>
  </Content>
</TeamMentor_Article>