<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>2c16f803-990f-4013-afcb-88db4765873d</Id>
    <Id_History>2c16f803-990f-4013-afcb-88db4765873d,7fdb4ab1-e118-410b-9e43-7be3837f41fa,</Id_History>
    <Library_Id>c037d0d2-0617-44f3-b846-21dc3d02c4f8</Library_Id>
    <Title>Scramble Names of Uploaded Files</Title>
    <Category>File I/O</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Guideline</Type>
    <DirectLink>Scramble Names of Uploaded Files</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* PHP

==What to Do==

Scramble names and extensions of uploaded files.

==Why==

Scramble names and extensions of uploaded files to make it more difficult for attackers to upload and execute malicious code. Even if an attacker is able to upload a malicious script, changing its file extension should prevent it from being executed. Changing the name of the file should also make it more difficult for the attacker to create an HTTP request to access the malicious script.

==How==

To scramble names and extensions of uploaded files:

# **Find all code used to upload files.** Search your application code for calls to move_uploaded_files(). Make a spreadsheet of this code.
# **Add code to maintain an uploaded-file lookup table.** If the original file names need to be preserved, they should be stored in a lookup table, either in a database or in an XML file.
# **Add code to access uploaded files indirectly.** For accessing the uploaded files, use a PHP script to read the specified file and return its contents. This can be used to show uploaded images in the browser or for any other purpose where users need to access the uploaded files. Using a PHP script to return the contents (rather than the web server processing the uploaded files as a result of direct request) ensures that the uploaded files will not be executed as code.
# **Change code to scramble file names.** Web servers execute PHP files as code based on file extensions. If a file has an extension that is defined as code in the server's configuration, it will be executed. Common PHP file extensions are .php and .php5, but there may be others, depending on the server configuration. Scrambling the file extensions, or even removing them completely, prevents execution. Scrambling the file names also makes it more difficult for the attacker to find the uploaded file(s) and thus makes it harder to create HTTP requests that access those files directly.

]]></Data>
  </Content>
</TeamMentor_Article>