<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>dfb4d68d-95a5-4a66-86c3-d1e6b7c1784e</Id>
    <Id_History>dfb4d68d-95a5-4a66-86c3-d1e6b7c1784e,2239a5fd-8a06-4d4d-b1d7-0df70883563c,</Id_History>
    <Library_Id>c4b9cb6a-4561-4451-9b6c-4e59d73584f6</Library_Id>
    <Title>Disable Dangerous Functions by Default</Title>
    <Category>Hardening</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Guideline</Type>
    <DirectLink>Disable Dangerous Functions by Default</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* Java

==What to Do==

Disable dangerous functions by default.

==Why==

Disable dangerous functions by default so that attackers do not abuse them.

==How==

To disable dangerous functions by default:

# **Identify code that implements dangerous functions.** Determine which application features implemented by your application might be dangerous. Some examples are: file uploads, code execution, direct database access, and data deletion. Make a spreadsheet about all code that implements dangerous features.
# **Make dangerous functions configurable.** Modify each piece of code that implements a dangerous function to check application settings to see whether the user has explicitly enabled the dangerous feature. Only allow a dangerous feature to be executed if the user has explicitly enabled it.
# **Disable dangerous functions by default.** For each dangerous feature, write code so that the feature can only be executed if it has been explicitly enabled by the user.
# **Document the dangerous functions.** Add information about all the dangerous features to the documentation. Explain why each feature is dangerous. Describe how to configure each feature.

]]></Data>
  </Content>
</TeamMentor_Article>