<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>94e002ef-f4db-4d6f-81ab-272ae6d9ba78</Id>
    <Id_History>3f5d01b6-b871-4d6c-9314-7826e8fd91cd,</Id_History>
    <Library_Id>7d2d0571-e542-45cd-9335-d7a0556c2bea</Library_Id>
    <Title>A Control Flow Analysis Is Performed</Title>
    <Category>Security Engineering</Category>
    <Phase>Implementation</Phase>
    <Technology>Web Application</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>A Control Flow Analysis Is Performed</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==What to Check For==

Project documentation should include the results of a control flow analysis.

==Why==

Control flow analysis helps find vulnerabilities caused by logic errors.

==How to Check==

Examine project documentation to make sure it includes the results of a control flow analysis.

==How to Fix==

Control flow analysis is the mechanism used to step through logical conditions in the code. The process works as follows:

# Look at a function and determine each branch condition. These can include loops, if statements, and try/catch blocks.
# Understand the conditions under which each block will be executed.
# Move to the next function and repeat.

As you investigate the control flow keep the following questions in mind:

# **Does the application rely on client side validation?** Managed or web app code is easy to modify on the client, the server should never trust client code. It is easy to modify the behavior of the client or just write a new client from scratch that doesn’t observe the same data validation rules. 
# **Are there secrets or critical IP embedded in the code?** Managed code is easy to decompile, in fact it is possible to recover code from the final executable that is very similar to the original code. Any sensitive IP or hard coded secrets can be stolen with ease. An obfuscator can make this type of theft more difficult but cannot completely prevent it. Another common problem is to use hidden form fields thinking this information will not be visible to the user.
# **Is sensitive data being stored in predictable locations (such as temp files), or being sent in clear text over the network?** Sensitive data should be stored and transmitted in encrypted form, anything less invites theft. 
# **Is cryptography being used?** Look for poor random number generators. Look for poor management of keys. Flag hard coded key values, leaving these in the code will help to ensure your cryptography is broken. Ensure that key values are not passed from method to method by-value as this will leave many copies of the secret in memory to be discovered by an attacker. Look for failure to clear secrets from memory after use. Look for custom cryptographic routines. Some think that a less well known algorithm equals more security but this is not true. Cryptographic algorithms are mathematically proven, and as such the more eyes on them the better; obscurity will not protect your flawed implementation from a determined attacker. 
# **Are there undocumented public interfaces?** Look for public interfaces that have not been documented as well as the other interfaces in your application. Is the interface you are looking at a test interface or a backdoor administrative interface? Many times these shouldn’t be in the product at all, and they are almost never given the same level of design and test scrutiny as the rest of the product.
# **Is the component giving dependencies too much trust?** Without explicit safeguards it is possible for an attacker to trick your code into loading a malicious library instead of trusted code.
# **Is there proper and consistent error checking?** Ensure that there is consistent use of try/catch and return value checking. Keep an eye out for empty catch blocks. Also look for cases where impersonation or elevated privileges may not be lowered in the case an exception is thrown. This can occur either due to a logic bug - catch doesn’t contain the right code - or due to a subtle misuse of a finally block by an attacker. Exception filters run before the finally block so it may result in malicious code executing in the context of the privileged code rather than in the partially trusted context it should be running in.
# **Do error messages give away too much information?** Error messages should be helpful to the average user without giving away information that an attacker could use against you. Ensure that the code doesn’t give away call stacks, lines of code, server file paths or anything else internal to the application. This information is not helpful to a user but can be very helpful to an attacker. 
# **Does your application expose sensitive information via user session?** If you are reviewing a web application and it reveals sensitive information via user session then pay particular attention to how the session is managed.
# **Can write operations be performed with a GET request?** Check to see if it is possible to modify data or content with a GET request. This opens the door for an attacker to trick a legitimate user into performing illegitimate actions with their account.
# **Is the code multithreaded?** Check for race conditions, especially in static methods and constructors.
]]></Data>
  </Content>
</TeamMentor_Article>