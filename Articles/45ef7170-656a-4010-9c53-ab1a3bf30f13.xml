<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>45ef7170-656a-4010-9c53-ab1a3bf30f13</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Directory Traversal</Title>
    <Category>Authorization</Category>
    <Phase>Implementation</Phase>
    <Technology>Technology Independent</Technology>
    <Type>Vulnerability</Type>
    <DirectLink />
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[=Description

Some applications allow the user to choose what files or directories to access. Some of these applications don't validate the selected path sufficiently or fail to canonicalize it before validation. The result is that the attacker is able to access files outside of the locations authorized by the application. Directory traversal vulnerabilities typically affect web applications, but can affect other application types. Directory traversal is also known as path traversal. 

=Impact

Using directory traversal, an attacker is able to access files outside of the scope allowed by the application. The attacker can leverage this vulnerability to access sensitive operating system files, application configuration files that include connection strings, application source code, and other sensitive data. The attacker will usually attempt to leverage information gathered using path traversal to take full control of the application or the application server. 

=Countermeasures

To prevent this problem, canonicalize all paths, validate all input, and perform access control checks for any filesystem access.

=Specific Technologies

* [[ee22e5e0-0953-4276-b0e6-955becda5ee8|ASP.NET Path/Directory Traversal]]
* [[a1d217c4-2d2f-4657-99cd-7e4cd69411bd|C++ Path/Directory Traversal]]
* [[b88255fa-86f1-4d3b-9f7f-66bc144e985c|PHP Path/Directory Traversal]]]]></Data>
  </Content>
</TeamMentor_Article>