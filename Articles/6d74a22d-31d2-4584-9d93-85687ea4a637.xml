<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>6d74a22d-31d2-4584-9d93-85687ea4a637</Id>
    <Id_History>6d74a22d-31d2-4584-9d93-85687ea4a637,174834f9-652b-47c9-bf9f-a4807143d955,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Scala Enforce Strong Passwords</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>Scala Play</Technology>
    <Type>Code Example</Type>
    <DirectLink>Enforce Strong Passwords</DirectLink>
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Scala and Play Framework 2.1.0+


## Summary ##

Enforce the use of strong passwords. Enforcing strong passwords minimizes the risk of a Credentials Dictionary Attack or guessing another user's password.


## Problem Example ##

The following code creates a new user to the application. It stores the username and password into the credential repository. Unfortunately, the password is not being verified against a password policy.

~~~~
  def addUser(username:String,pass:String ) = Action{ implicit request =>
    // Check if user exists in the user database
      // The application fails to check that the
      // given password meets the password policy
      // Add user to the application's user database

  }
~~~~


## Solution Example ##

The following code adds a new user to the application. Before it stores the user's credentials into the repository, it verifies that the password meets the application's password requirements.

~~~~    
  def addUser(username:String,pass:String ) = Action{ implicit request =>      
      // Check if user exists in the user database
      // The application verifies that the given
      // password meets the password requirements
      if (!goodPassword(pass))
      {
            String errMsg = "User's password does not meet"
                           + " the password requirements";
            Ok(html.message.main(errMsg))
      }

      // Add user to the application's user database
      ...
}


  def goodPassword(pass:String ) = Action{ implicit request =>  
{
      boolean alpha = false;
      boolean num = false;
      boolean sp = false;

      if (pass.length 
      {
            return false;
      }

      for (int i = 0; i 
      {
            if (!alpha && Character.isLetter(pass[i]))
            {
                  alpha = true;
            }

            if (!num && Character.isDigit(pass[i]))
            {
                  num = true;
            }

            if (!sp && (pass[i] == '!' ||
                  pass[i] == '@' || pass[i] == '#' ||
                  pass[i] == '$' || pass[i] == '%' ||
                  pass[i] == '^'))
            {
                  sp = true;
            }
      }

      return (alpha & num) & sp;
}

~~~~]]></Data>
  </Content>
</TeamMentor_Article>