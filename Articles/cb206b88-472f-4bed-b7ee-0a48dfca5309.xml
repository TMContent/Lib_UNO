<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>cb206b88-472f-4bed-b7ee-0a48dfca5309</Id>
    <Library_Id>de693015-55c9-4328-bbc8-42db82ae8b7a</Library_Id>
    <Title>Concurrency</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[Computers are never likely to be devoted to one application at a time, and often hundreds or even thousands of processes may be running at a given point. Concurrency involves ensuring that your application runs in a way that prevents other applications from interfering with its processes and that it gracefully shares resources. This includes proper management of temporary files and caches, while limiting the use of code that may stop the proper execution pipeline. View this room to better understand the techniques and code that can prevent your applications from interfering with other running processes.

==Use Locks with Mutexes==

Use locks with mutexes to take advantage of automatic unlocking for preventing deadlocks.

* [[41b5df05-32be-44df-93b6-f3cb4117f676|C++]]

==Use Semaphores Correctly==

If a semaphore becomes unbalanced it could either block system execution (too many acquires) or it could allow too many threads to access a resource (too many releases). Other reference counting mechanisms could cause other unexpected results such as memory leaks or release of interfaces before your code is done using them.

* [[09603b85-0c14-493e-b611-c10b60e5c6a9|C++]]

==Create Temporary Files Carefully==

Placing temporary files in locations where other programs and users may access them may result in multiple vulnerabilities, depending on exactly what the temporary files are used for.

* [[f1d46ddd-8464-4ce0-9fae-22493ddbbe9e|C++]]

[[bcbbe5c7-95c3-468d-9371-6eb42f9b93e6|Back to the Programming Best Practices Area]]]]></Data>
  </Content>
</TeamMentor_Article>