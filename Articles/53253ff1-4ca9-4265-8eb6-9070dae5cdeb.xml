<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>53253ff1-4ca9-4265-8eb6-9070dae5cdeb</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Encode Data in Response Headers</Title>
    <Category />
    <Phase />
    <Technology>Ruby</Technology>
    <Type />
    <DirectLink />
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

- Ruby


## What to Do ##

Use `URI.escape` to URL encode data that gets included in HTTP response headers.


## Why ##

If an application accepts user input and includes it in HTTP response headers, there is vulnerability to response-splitting. Data in HTTP response headers should be URL-encoded or sanitized to mitigate this occurrence.

A cross site scripting (XSS) attack can force your application to send carriage return (CR) and line feed (LF) followed by malicious content to the user's browser. Because CRLF is a response header separator and CRLF CRLF separates headers from the body, the browser sees the attacker's malignant content as legitimate.


## How ##

Use `URI.escape` to escape the string and replace all unsafe characters with codes. In Ruby, encode is an alias for escape. These steps sanitize the data in response headers:

1. **Identify all data included in HTTP response headers.** Identify programming functions that include data in HTTP response headers. Search your code for calls to these functions in order to find code instances that add data to HTTP response headers.

2. **Validate all data included in HTTP response headers.** Use positive validation routines to check all data that gets included in HTTP response headers.

3. **Encode all data included in HTTP response headers.** Use `URI::Escape` to encode data that gets included in HTTP response headers:

       `require 'uri'`

       `enc_uri = URI.escape("http://example.com/?a=\11\15")`<br>
       `p enc_uri`<br>
       `# => "http://example.com/?a=%09%0D"`
]]></Data>
  </Content>
</TeamMentor_Article>