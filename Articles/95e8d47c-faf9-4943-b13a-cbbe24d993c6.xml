<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>95e8d47c-faf9-4943-b13a-cbbe24d993c6</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Integrate Authentication Credential Repositories</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[##Applies To##

- Amazon Web Services (AWS)


##What to Do##

Integrate cloud application authentication with existing directory services and user accounts.


##Why##

Reducing the number of authentication repositories simplifies the secure management of access accounts. With a centralized Lightweight Directory Access Protocol (LDAP) repository, for example, you enforce one username/password for internal and external application access across the organization. With centralized directory services and single account location, you can apply security policy more consistently. Disabling access and restricting user permissions can be performed rapidly if there is no need to make multiple changes in separate directory services location.

If users are required to create multiple accounts for use with separate web and internal applications, the attack surface increases. It becomes possible for users to exceed the central policy level of authorized access for their role.

Management and control of authentication credentials is required by security standards such as NIST SP800-53 (AC-3 Access Enforcement).


##When##

Integrate authentication credential repositories in these situations:

1. Leverage existing directory services (for example, LDAP installation)

2. Allow users to log into all applications using one set of credentials

3. Manage users in a unified console.


##How##

Use the following steps for integrated authentication with existing repositories:

1. **Identify location of repositories.** Determine if existing credential repositories can be used for authentication with your application.

2. **Determine the type of repository.** Identify the type of existing credential repositories. If multiple directories are in use, determine the login priority.

3. **Identify network topography requirements.** Plan for access through protected network nodes by examining rules and policies that will require modification.

4. **Establish connectivity to repository.** Modify configuration of network routing and protective devices to allow communications between your application and directory services.

5. **Add code to application.** Code your application to integrate authentication with existing repositories. Specifics will depend on your development environment, including APIs and SDK libraries.


##Additional Resources##

- [Amazon Web Services: Overview of Security Processes](http://aws.amazon.com/compliance/aws-whitepapers/ "Amazon Web Services: Overview of Security Processes")
- [Amazon Web Services: Risk and Compliance](http://aws.amazon.com/compliance/aws-whitepapers/ "Amazon Web Services: Risk and Compliance")
- [NIST SP 800-53 Security and Privacy Controls for Federal Information Systems and Organizations](http://csrc.nist.gov/publications/PubsSPs.html "NIST SP 800-53 Security and Privacy Controls for Federal Information Systems and Organizations")
]]></Data>
  </Content>
</TeamMentor_Article>