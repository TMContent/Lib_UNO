<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>067e2f72-18f0-4f5a-ba9c-287691cd9ed3</Id>
    <Id_History>067e2f72-18f0-4f5a-ba9c-287691cd9ed3,d57eba16-ea05-41b2-8bb4-a4f107c68413,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Scala Validate Input for Length, Range, Format and Type</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Scala Play</Technology>
    <Type>Code Example</Type>
    <DirectLink>Input Is Validated for Length, Range, Format And Type</DirectLink>
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Scala and Play Framework 2.1.0+


## Solution Example ##

Input can vary in length, data type, and content. Validate that all input meets your application's expectations.

1. **Validate length.** Your application should check a string's length or the number of bits in a numeric value. Checking the length can help prevent buffer overflows as well as integer overflows in numeric values. A simple way to validate the numeric value for forms is through the use of minLength(length: Int) and maxLength(length: Int) from the play.api.data.validation constraints object of Play Framework:

	~~~~
	object SignUp extends Controller {
	  
	  /**
	   * Sign Up Form definition.
	   */
	  val signupForm: Form[User] = Form(
		
		// Define a mapping that will handle User values
		mapping(
		  "firstname" -> text(maxLength = 20),
		  "lastname" -> text(maxLength = 20),
		  "username" -> text(minLength = 4),
		  "password" -> text(minLength = 6),   
		  // Create a tuple mapping for the password/confirm
		  "password" -> tuple(
			"main" -> text(minLength = 6),
			"confirm" -> text
		  ),

		)
	  )
	  }
	~~~~

	You can also validate any numeric value through the use of BigInt/BigDecimal as follows: 

	~~~~
	def productcheck = Action { implicit request =>
		prodForm.bindFromRequest.fold(
		  errors => BadRequest(views.html.index(errors, "There is some error")),
		  prodForm => {

			val proname = prodForm.pname
			val prodprice = prodForm.price
			if(prodprice.compare(BigInt(0)) > -1
			  && prodprice.compare(BigInt(Integer.MAX_VALUE)) 
			{
			  println("true")
			  ............ //code for true
			}
			else
			{
			  println("false")
			  ............ // code for exception
			}
	~~~~	
	
2. **Validate type.** Validating the input's data type is important when your application expects a specific non-string parameter. Difference in data type can trigger unhandled exceptions that would throw your application into an unknown state. The following is an example of validating in forms:

	~~~~
	object ContactForm extends Controller {
	  
	  /**
	   * Contact Form definition.
	  */
	  val appointmentMapping = tuple(
	  "location" -> text,
	  "start" -> tuple(
		"date" -> date,
		"time" -> text),
	  "attendees" -> list(mapping(
		"name" -> text,
		"email" -> email)
	)}
	~~~~

3. **Validate contents.** Use whitelist and blacklist techniques to validate the input's contents, based on the constraints that are imposed on the input: If the input follows a tight structure and format, you can use whitelisting alone to weed out malicious input. If there are unknowns about the input, you'll need a combination of whitelisting and blacklisting. In general, use blacklisting as a backup to whitelisting, through a spiral-out approach: Use whitelisting for the initial validation. If whitelisting cannot validate the input, then fall back to blacklisting. If blacklisting cannot validate, then discard the input. The following is an example of implementing this technique using forms:

	~~~~
	object ValidateProduct extends Controller {

	  val productForm = Form(mapping(
		"ean" -> longNumber.verifying("This product already exists!", Product.findByEan(_).isEmpty),
		"name" -> nonEmptyText,
		"description" -> text,
		"pieces" -> number,
		"active" -> boolean)(Product.apply)(Product.unapply).verifying(
		  "Product can not be active if the description is empty", product =>
			!product.active || product.description.nonEmpty))
	}
	~~~~

	Using regular expressions, the fix would be as below:

	~~~~
	val pid = ProductForm.productid
	val pname = ProductForm.productname
	val products = Product.findProduct(pid, pname)
	val whitelistPattern = "(\\w|\\d)+".r
	val issafe =whitelistPattern.pattern.matcher(pname).matches
	if (issafe){
	...... //Code for Action
	}else{
	...... //Code for Exception
	}
	~~~~]]></Data>
  </Content>
</TeamMentor_Article>