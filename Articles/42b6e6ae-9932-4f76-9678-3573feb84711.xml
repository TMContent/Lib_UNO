<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>42b6e6ae-9932-4f76-9678-3573feb84711</Id>
    <Id_History>42b6e6ae-9932-4f76-9678-3573feb84711,35ed492a-b592-4839-8c68-d1990214d305,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Authentication Credentials Are Sent Over Encrypted Tunnels</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Authentication Credentials Are Sent Over Encrypted Tunnels</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* PHP

==What to Check For==

Verify that authentication credentials are sent over encrypted tunnels.

==Why==

Using encrypted communication tunnels prevents the credentials from being sniffed or tampered with as they are transmitted over the network. 

==How to Check==

To verify that authentication credentials are protected in transit:

# **Verify that the server uses TLS for authentication.** Connect to the application and attempt to authenticate using plain HTTP and HTTPS. Make sure that it is only possible to authenticate when using the HTTPS protocol. The authentication page should always redirect to the HTTPS version when accessed via plain HTTP.
# **Verify that the certificate is valid.** Use the web browser to examine the certificate used by the application during authentication to make sure that the certificate is valid. A browser can be intentionally misconfigured to accept invalid certificates, but most mainstream browsers in their default configuration should be able to determine whether a certificate is valid.


==How to Fix==

To protect authentication credentials in transit:

# **Get a valid certificate.** Purchase a valid certificate from a trusted Certificate Authority. This must be done for each separate domain that hosts the application.
# **Set up the server to use TLS.** Configuring the server to use TLS is different for different server platforms, but this process is always very well documented. Consult documentation or search the Internet for instructions on how to set up your server(s) to use TLS. The valid certificate that you purchased is going to be necessary for setting up TLS properly.
# **Configure the server to use TLS for the application.** The server has to also be configured to use TLS for your specific application. Again, follow the instructions for your platform to make sure that TLS is used by your application. It is best to use TLS for the entire application and to redirect plain HTTP requests to the TLS version of the site.
# **Document the TLS requirement.** Since configuring the server to use TLS for the application is ultimately done by the end-user, the developers might not have direct control over whether that is actually being done. It is recommended to document the fact that TLS should be used by the application for security reasons and include this together with the rest of the application documentation, for example in the installation instructions.
]]></Data>
  </Content>
</TeamMentor_Article>