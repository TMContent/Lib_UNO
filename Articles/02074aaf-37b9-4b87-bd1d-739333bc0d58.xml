<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>02074aaf-37b9-4b87-bd1d-739333bc0d58</Id>
    <Library_Id>de693015-55c9-4328-bbc8-42db82ae8b7a</Library_Id>
    <Title>Error Handling</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[While modern security and functionality testing allows for applications to ship with a minimal amount of bugs, it is not possible to consider a deployment completely issue free. Issues may be caused through user input or an unexpected use case, but the way in which issues are handled is an important step in securing code. If an error message displays too much information or if the error handling process only catches certain issues, this can allow an attacker to easily gain an understanding of the systemâ€™s processes and potential weaknesses. View this room to learn how errors can be caught, sanitized and processed to better secure your application.

==Use Global Exception Handlers==

Unhandled exceptions must be avoided as they can result in the application entering an unknown state and may  reveal sensitive internal application details. Using a global exception handler will prevent unhandled exceptions.

* [[461370b3-66e7-4ac3-900f-7e2f757c54a8|.NET]]
* [[3e815c74-4d57-4c1b-8446-750b319ea046|Java]]
* [[8f5ac742-ecc6-4909-9aaa-2501572b5d2f|PHP]]

==Display Simple Error Messages==

Error messages should be simple to prevent attackers from gathering sensitive information from them. Simple error messages are also more user-friendly. 

* [[00000000-0000-0000-0000-00000020f866|.NET]]
* [[00000000-0000-0000-0000-0000005c37eb|Java]]
* [[fd1d911e-c8ad-4951-a047-62e5b422f094|PHP]]
* [[5c0c50cf-d3ed-462c-8ec7-2eb96cf23680|C++]]

==Handle Exceptions==

Using structured exception handling simplifies and de-clutters the application code. This improves robustness and avoids leaving the application in an inconsistent state. 

* [[afb7610c-53ab-49dd-a425-f3e3272f7749|.NET]]
* [[fceefe0c-900a-4c29-9c2e-ee662aa9e1f1|Java]]
* [[a706450d-653c-4928-84ea-b9f754db8644|PHP]]
* [[25d6522f-77d2-4f08-abee-88247a7b4118|C++]]

==Check Return Values for Errors==

Many important functions will work in most cases but will occasionally cause an error under exceptional circumstances such as low system resources or a corrupt file system. To build a system that is both more reliable and more secure, check error codes for any API call that may return an error code.

* [[b8e66d3c-a6a8-415a-abaa-142bb4467c6b|C++]]

==Do Not Throw Exceptions During Deallocation==

Deallocation functions may be called when exceptions are thrown. If a deallocation function throws an exception after being called when an exception is thrown, the program may terminate. This may result in a denial-of-service vulnerability.

* [[441b4138-1866-442f-8abb-6d05236d6fcb|C++]]

[[bcbbe5c7-95c3-468d-9371-6eb42f9b93e6|Back to the Programming Best Practices Area]]]]></Data>
  </Content>
</TeamMentor_Article>