<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>94184ae5-1b96-4507-8956-2543ffe40361</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Canonicalize Paths Before Validation</Title>
    <Category />
    <Phase />
    <Technology>C++</Technology>
    <Type />
    <DirectLink />
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

Embedded systems. 


## What to Do ##

Canonicalize all input used for filesystem access, including resource names, filenames, paths, and URLs, before validation.


## Why ##

Canonicalization means reducing to the simplest form. There are often many ways to access the same resources by name. One example is addressing files: the same file on a Windows system may be addressed as file, C:\file, C:\\file, ..\file, ..\..\..\file, etc.

Canonicalization is particularly important for systems that use Unicode, because there are many different Unicode strings that have the same meaning to the OS  .


## When ##

Canonicalize all input used to identify resources and validate it before using it for access.


## How ##

1. **Identify all functions used to access resources, such as files or folders, by name**. On UNIX-type systems, named pipes and devices are other resources that might be accessed by name. Add code that canonicalizes and validates this input. The recommended practice is to create a separate class or library for data validation routines, and include functions for canonicalizing input in it.

2. **Use realpath() on POSIX systems**. The POSIX C++ standard includes a ``realpath()`` function, which is suitable for canonicalization.

3. **Use canonicalize_file_name() on glibc systems**. Glibc includes a ``canonicalize_file_name()`` function, which works a lot like ``realpath()``, but automatically allocates a new buffer for its output. Free the memory allocated by ``canonicalize_file_name()`` after canonicalization, because it is not freed automatically.

4. **Don't rely on canonicalization in Windows**. Canonicalization in Windows is performed by the ``GetFullPathName()`` function; however, this function is very limited and provides a very low degree of assurance. Use ACLs on Windows to implement filesystem security, and avoid making decisions based on file or folder names.
]]></Data>
  </Content>
</TeamMentor_Article>