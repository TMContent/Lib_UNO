<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>ed71bd10-21eb-445c-ae11-d376f0bd8188</Id>
    <Id_History>1051e478-c59a-4aca-96af-481355b309be,</Id_History>
    <Library_Id>51eb81c3-1d23-4146-ba83-8a6bb9233c11</Library_Id>
    <Title>Sensitive and Resource Intensive Operations Are Throttled</Title>
    <Category>Other</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Sensitive and Resource Intensive Operations Are Throttled</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* C++

==What to Check For==

Make sure that sensitive and resource intensive operations are throttled.

==Why==

Throttle sensitive and resource intensive operations to thwart automated attack tools.

==How to Check==

To make sure that sensitive and resource intensive operations are throttled:

# **Identify code that implements sensitive operations.** Make a spreadsheet about sensitive operations performed by the application and the code that implements them. Some examples of sensitive operations are: authentication, user management, administrative actions, and file uploads.
# **Identify code that implements resource intensive operations.** Make a spreadsheet about resource intensive operations performed by the application and the code that implements them. Some examples are: search functionality, anything that performs expensive database lookups, anything that performs a lot of computations, anything that performs a lot of disk access, anything that takes up a lot of memory, anything that sends a lot of network traffic, anything that sends email.
# **Verify that sensitive operations are throttled.** Examine the code that performs sensitive operations to make sure that some kind of throttling mechanism is used to limit the frequency with which a user is able to perform each sensitive operation.
# **Verify that resource intensive operations are throttled.** Examine the code that performs resource intensive operations to make sure that some kind of throttling mechanism is used to limit the frequency with which a user is able to perform each resource intensive operation.

==How to Fix==

To throttle sensitive and resource intensive operations:

# **Identify code that implements sensitive operations.** Make a spreadsheet about sensitive operations performed by the application and the code that implements them. Some examples of sensitive operations are: authentication, user management, administrative actions, and file uploads.
# **Identify code that implements resource intensive operations.** Make a spreadsheet about sensitive operations performed by the application and the code that implements them. Some examples are: search functionality, anything that performs expensive database lookups, anything that performs a lot of computations, anything that performs a lot of disk access, anything that takes up a lot of memory, anything that sends a lot of network traffic, anything that sends email.
# **Choose a throttling mechanism.** Choose  a throttling mechanism for each sensitive and resource intensive operation. Some common throttling mechanisms are: CAPTCHA, time-out per user session, and time-out per IP. The amount of throttling depends on the amount of resources available to the application and the cost of performing the operation that is being throttled. It is recommended to only allow authenticated users to perform sensitive and resource intensive operations and to impose time-outs per user session. For example, only authenticated users should be allowed to perform searches and only one search per second. Authentication is a sensitive operation that cannot be performed by authenticated users, so it can either be throttled by IP, using a CAPTCHA, using time-outs per username or using time-outs per session. It is recommended to throttle authentication by IP and by time-outs per username. (A session state can be created for unauthenticated users and this session state can be used to impose time-outs on authentication but this isn't sufficient, because the attacker can drop the session state cookie.) 
# **Add throttling to sensitive operations.** Add code that implements the chosen throttling mechanism to each sensitive operation.
# **Add throttling to resource intensive operations.** Add code that implements the chosen throttling mechanism to each resource intensive operation.
]]></Data>
  </Content>
</TeamMentor_Article>