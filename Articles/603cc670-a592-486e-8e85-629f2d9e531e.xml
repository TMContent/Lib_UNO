<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>603cc670-a592-486e-8e85-629f2d9e531e</Id>
    <Id_History>603cc670-a592-486e-8e85-629f2d9e531e,9947126c-b638-445f-a08d-200fbef3f40e,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use a Strong PRNG</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>How To</Type>
    <DirectLink>Use a Strong PRNG</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* Java

==What to Do==

Use a cryptographically strong pseudo-random number generator (PRNG) whenever it is necessary to generate random numbers for cryptography.

==Why==

Most common encryption algorithms rely on difficult to predict random numbers to be used properly. The level of difficulty to predict or enumerate the output of a random number generator is called its entropy. Cryptographically strong PRNGs are software algorithms that produce pseudo-random numbers considered to have sufficient entropy to be suitable for use in cryptography. Using PRNGs that have low entropy is likely to make the resulting cryptographic solution easier to break and thus compromise the data or the authentication mechanism that the solution is used for.

==How==

To use cryptographically strong PRNGs:

# **Find code that uses PRNGs.** Review all code that uses cryptography to find code that uses pseudo-random numbers. Make a spreadsheet of all the code that uses pseudo-random numbers for cryptography.
# **Use the java.security.SecureRandom class.** Update all code that uses PRNGs for cryptography to use the java.security.SecureRandom class.

]]></Data>
  </Content>
</TeamMentor_Article>