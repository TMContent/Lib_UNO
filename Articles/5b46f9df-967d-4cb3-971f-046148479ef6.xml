<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>5b46f9df-967d-4cb3-971f-046148479ef6</Id>
    <Id_History>5b46f9df-967d-4cb3-971f-046148479ef6,6e54d782-eedc-440b-b011-cb85685299d0,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Centralize Logging</Title>
    <Category>Auditing and Logging</Category>
    <Phase>Implementation</Phase>
    <Technology>Technology Independent</Technology>
    <Type>Guideline</Type>
    <DirectLink>Centralize Logging</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* Web Applications
* Server-side

==What to Do==

Write a dedicated logging library or class and use it whenever log entries have to be generated.

==Why==

A centralized logging subsystem is simpler to maintain and implement correctly.

==When==

Use this guideline when writing an application that generates log entries.

==How==

Perform the following actions to centralize logging: 

# **Identify existing logging functionality.** Examine the application architecture to identify logging facilities, such as the logging API and where audit trails are actually stored. Make a list of APIs used to log events, document how to use them, and where they store logs.
# **Design the logging subsystem.** Design and implement a class or library specifically for logging. When designing the logging subsystem, consider sending logs to a remote log server. Consider the following factors when designing the logging subsystem:
## Log throttling
## Logging important event details for both successful and failed operations
## Logging important security operations
## Logging important business operations
## Monitoring the use of privileged accounts
## Logging user management events
## Avoiding including sensitive information in logs
## Logging unusual activity
## Sending logs to a centralized server
# **Implement the logging subsystem.** Write code that generates log entries according to your design. 
# **Use the logging subsystem.** Use the logging class or library whenever logs are generated. If earlier code exists that generates log entries, replace it with calls to the new logging subsystem API.]]></Data>
  </Content>
</TeamMentor_Article>