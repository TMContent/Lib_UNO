<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>b7059fcb-71ac-409d-95ff-b5d483ef2552</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Centralize Authentication</Title>
    <Category />
    <Phase>Implementation</Phase>
    <Technology>Technology Independent</Technology>
    <Type />
    <DirectLink />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## What to Do ##

Centralize authentication controls.

## Why ##

Implementing a single set of centralized authentication controls helps implement them correctly, use them correctly in the application, and manage them later on.

## How ##

To centralize authentication controls:

1. **Identify application requirements.** Consider the following aspects of authentication controls:
 - Authentication should be required for all protected functionality.
 - All password fields should be masked.
 - Accounts should be locked after multiple failed authentication attempts.
 - Authentication should be implemented on the server-side.
 - Authentication controls should be centralized.
 - Authentication controls should fail securely.
 - Strong authentication credentials (passwords) should be enforced.
 - Account management functions should be protected.
 - User credential (password) changing functions should be protected.
 - Re-authentication should be required for sensitive operations.
 - Authentication credentials (passwords) should expire.
 - Authentication events should be logged.
 - Authentication attempts should be throttled.
 - Passwords should be hashed and salted using an iterative hashing algorithm.
 - Authentication credentials (connection strings) for external resources should be protected.
 - Authentication with external services.
2. **Define authentication control APIs.** Make the exposed APIs simple to use for developers. Define authentication APIs to satisfy all application requirements. Include functionality to authenticate with external services.
3. **Implement and document authentication controls.** Implement and document authentication APIs to satisfy all application requirements.
4. **Use authentication controls in the application.** Developers should use the centralized authentication controls whenever authentication is necessary.

]]></Data>
  </Content>
</TeamMentor_Article>