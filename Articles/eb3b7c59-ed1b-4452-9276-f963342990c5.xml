<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>eb3b7c59-ed1b-4452-9276-f963342990c5</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Logging Events Are Logged</Title>
    <Category>Auditing and Logging</Category>
    <Phase>Implementation</Phase>
    <Technology>Technology Independent</Technology>
    <Type>Checklist Item</Type>
    <DirectLink />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==What to Check For==

Verify that events associated with the logging subsystem, such as the beginning and the end of logging, are logged.


==Why==

Log events such as the initialization of the logging subsystem to help detect when logs have been stopped to conceal malicious activity.


==How to Check==

To make sure that events associated with the logging subsystem are logged:

# **Identify code used to start and stop logging.** Make a spreadsheet of code that initializes, pauses, or stops logging. This code should naturally be a part of the logging subsystem itself, so it should be easy to find.
# **Verify that logging subsystem events are logged.** Examine each piece of code that starts or stops logging to make sure that it creates corresponding log entries.
# **Examine logs.** Examine logs to make sure that initialization and stopping of the logging subsystem is logged.


==How to Fix==

To log events associated with the logging subsystem:

# **Identify code used to start and stop logging.** Make a spreadsheet of code that initializes, pauses, or stops logging. This code should naturally be a part of the logging subsystem itself, so it should be easy to find.
# **Add code that generates log entries.** To each piece of code that starts or stops logging, add code that generates log entries indicating that the logging subsystem has been started or stopped.
]]></Data>
  </Content>
</TeamMentor_Article>