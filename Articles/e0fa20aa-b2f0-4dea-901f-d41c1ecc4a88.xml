<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>e0fa20aa-b2f0-4dea-901f-d41c1ecc4a88</Id>
    <Id_History>e0fa20aa-b2f0-4dea-901f-d41c1ecc4a88,e9d6e542-74b6-4745-963d-95e09b5ed23d,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use the clearCache() Method to Delete Sensitive Information from the Cache </Title>
    <Category>Privacy</Category>
    <Phase>Implementation</Phase>
    <Technology>Android</Technology>
    <Type>How To</Type>
    <DirectLink>Use the clearCache() Method to Delete Sensitive Information from the Cache </DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* Google Android applications that use an instance of the //WebView// class to process sensitive or personal information.

==What to Do==

When using the //WebView// class, call the //clearCache()// method after a session finishes to remove any sensitive information from the cache.

==Why==

Your application maintains its own cache for cookies and session information. If users access a //WebView// that allows sensitive information to enter the cache, clear the cache database to prevent information leakage.

==When==

When accessing sensitive information in a //WebView//.

==How==

To clear sensitive information from cache:

# **Call the clearCache() method.** After initializing a reference to the //WebView// (i.e., //myWebView//), call the //clearCache()// method: //final WebView myWebView = (WebView) findViewById (R.id.webView_name); myWebView.clearCache (boolean includeDiskFiles);// Typically include true on the //clearCache()// method to wipe any cache files on the drive. Call this method in the activities’ //onPause()// or //onDestroy()// method to ensure that the cache data is removed upon exiting the application. Note that doing so could cause a performance issue if the screen is reoriented during use and the site must reload the //onResume()// method for the activity, call //myWebView.reload()// so that the user does not have to reinitiate the URL load.
# **Clear the cache database.** You can also call //getApplicationContext().deleteDatabase(web.getSettings().getDatabasePath())// to completely delete the cache database. However, this should be unnecessary if the cache files are properly deleted.
# **Disable loading data from the cache.** Enforce no loading from the cache on a //WebView//. When creating the //WebView//, invoke: //myWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);//
Note that this call only prevents loading from the cache and does not prevent or clear cached data.

==Problem Example==

As the MyApp developer, you are using a //WebView// to allow users to purchase items off the company’s auctioning website. The application uses cookies that contain personal information.

You clear the cache each time a user clicks a button to load the page. You use an //onClick// listener with the following code:

{{{
private static final String WEB_SITE = www.myapp.com;

public void onClick(View v) {			
  myWebView.getSettings().setJavaScriptEnabled(false);
  myWeb.loadUrl(WEB_SITE);
  myWeb.clearCache(true);
}
}}}

To continually refresh the page content with new auction updates, you instantiate a thread that calls //myWeb.reload()// every 60 seconds. A few months after running this code in production, a user loses his Android device. During an incident investigation, the development team discovers that cached data, including the user’s personal information, is still resident in the application’s cache database.

==Solution Example==

You made the mistake of not clearing the cache each time a user left the application. Although the //clearCache// method was enforced each time a user-initiated URL lookup occurred, the thread reloading the application continued to create cached data.
To remedy this, create two methods within the activity:

{{{
public void onResume() {
  super.onResume();
  if (myWeb!=null) {web.reload();}
}
	
public void onDestroy() {
  super.onDestroy();
  web.clearCache(true);
}
}}}

This code allows the application to clear the cache for each user session.
]]></Data>
  </Content>
</TeamMentor_Article>