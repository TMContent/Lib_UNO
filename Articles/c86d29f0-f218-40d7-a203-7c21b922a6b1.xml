<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>c86d29f0-f218-40d7-a203-7c21b922a6b1</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Validate Results of Calculations</Title>
    <Category />
    <Phase>Implementation</Phase>
    <Technology>Technology Independent</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## What to Do ##

Perform range checks before values of mathematical operations or conversions are assigned to integer-type variables.

## Why ##

Integer-type variables have minimum and maximum limits on data that they can store. Placing too much data in an integer-type variable results in an integer overflow. Different platforms fail differently as a result of integer overflows, but there is a possibility of an arbitrary code execution resulting from an integer overflow bug. When values that are too high or too low are assigned to unsigned integers, integer-wrapping results, which usually means that unexpected values are produced. Conversions between signed and unsigned integers, and other data types, may result in truncation or losing sign information. All of these bugs may result in very dangerous vulnerabilities. All of these bugs can be prevented by validating values of integer operations before assigning them to variables.

## When ##

Validate data when assigning it to integer-type variables.

## How ##

1. **Identify code.** Identify all code that assigns values to integer-type variables. For existing code, it may be a good idea to prioritize components, so that the most critical elements are checked first. Some development environments and compilers may be able to detect these types of errors, but automatic detection should not be relied on for critical software components.

2. **Add range checks.** Use platform-defined constants to check that values being assigned to integer-type variables are valid. 


## Computer Based Training ##

Use the following Computer Based Training course for more information about data validation:

* [AWA 101 Fundamentals of Application Security](https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127105) - This two-part course is ideal for security and development practitioners that want to understand software security risk and seek specific implementation guidance on how to build and deploy more secure software applications.  It starts off describing why software security is critical and the risk that software vulnerabilities represent, and proceeds to lay the foundation for secure software development by presenting specific security controls and principles that development teams can implement immediately to reduce software risk. 

*Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.*


## Related Pages ##

* [C++ Validate Ranges of All Integer Values](eeb8a6d5-2181-48fa-8b2a-3e44a532a50a)
* [Data Validation Guide](bf53d602-1d86-489c-858d-f5efb6424412)

]]></Data>
  </Content>
</TeamMentor_Article>