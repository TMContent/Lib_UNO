<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>ea697bed-a2a0-4375-8e9c-4e476e3aecff</Id>
    <Id_History>42ba62d9-49e7-4dd0-a7de-8f768f2055d9,</Id_History>
    <Library_Id>d9c2b53f-5b05-4152-be72-e79d72854707</Library_Id>
    <Title>How to Test for Memory Sniffing Bugs</Title>
    <Category>Information Disclosure</Category>
    <Phase>Test</Phase>
    <Technology>Any</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Memory Sniffing Bugs</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
  </ul>All software applications.<ul></ul><h1>Summary</h1><p>Applications must store sensitive data such as passwords or cryptographic values in system memory in order to properly operate. However, secrets might be stored in memory that is accessible to an attacker or swapped out of memory and into swaps files. During this attack, the attacker sniffs the different types of memory available, including random access memory (RAM), virtual memory, dump files, and swap files in an attempt to recover sensitive information such as passwords or cryptographic keys.</p><p>Follow these steps to test for this bug:</p><ul><li>Step 1: Understand attack scenarios</li><li>Step 2: Analyze causes and countermeasures</li><li>Step 3: Start testing and exploring</li><li>Step 4: Execute additional testing</li></ul><p><b>&amp;nbsp;</b></p><h1>Step 1: Understand attack scenarios</h1><p>First, it is necessary to properly understand the types of temporary memory related to this vulnerability:</p><ul><li>RAM - Physical memory that stores data used by running processes.</li><li>Virtual memory - Logical address space given by the system to each running process. It gets copied into random access memory and swapped out to swap files by the operating system.</li><li>Swap files - RAM’s auxiliary storage. The operating system performs paging to swap the contents of RAM in and out of swap files.</li><li>Memory dumps - Memory dumps are snapshots of a process’s virtual memory. They are created by the system when the process crashes.&amp;nbsp;</li></ul><p>Note that permanent storage of user files, databases, and the Windows registry is outside of the scope of this vulnerability. Permanent memory can be protected using permissions and relate to information disclosure attacks.</p><p>Memory sniffing bugs commonly relate to local attacks requiring access to the target computer. Once the attacker is logged in, he uses a tool to recover sensitive data such as passwords or keys from temporary memory.</p><p>In detail:</p><ol><li>Attacker logs in to the target machine.*</li><li>Attacker uses a script or tool to search memory for sensitive data. The attack ends if sensitive data is recovered is an unhashed/unencrypted form.</li><li>If sensitive data is hashed or encrypted, the attacker uses a cryptographic attack to recover sensitive data in plain-text.</li></ol><p>* Variations of this attack focus on capturing sensitive information without access to the target machine. For instance, forensic research shows that the contents of a computer’s RAM can be retrieved through a FireWire cable [i]. Furthermore, recent discoveries indicate that sensitive information from DRAM chips can be restored by removing them after the computer has been turned off.</p><p>&amp;nbsp;</p><h1>Step 2: Analyze Causes and Countermeasures</h1><p>The next step in testing for memory sniffing is to understand what causes this vulnerability and how to countermeasure it.</p><p><b><i>Clearing data structures containing sensitive information</i></b></p><p>A classic approach to protect against memory sniffing attacks is to clear data structures, such as arrays, used to temporarily store sensitive information. For instance, the code below is insecure:</p><pre></pre><pre>void GetData(char *MFAddr) { <br />	char pwd[64];<br />&amp;nbsp;	if (GetPasswordFromUser(pwd, sizeof(pwd))) {<br />&amp;nbsp;&amp;nbsp;		if (ConnectToMainframe(MFAddr, pwd)) {<br />&amp;nbsp;<br />&amp;nbsp;		&amp;nbsp;// Interaction with mainframe<br />&amp;nbsp;<br />&amp;nbsp;		&amp;nbsp;}<br />&amp;nbsp;	}<br />}</pre><p>The function&amp;nbsp;<i>GetPasswordFromUser</i>&amp;nbsp;copies a password provided by the user to the&amp;nbsp;<i>pwd</i>&amp;nbsp;character array. The application then returns from the function without cleaning the password from memory. To mitigate this attack, developers are encouraged to set the memory contents to zero after the process is done with the structure used to store it:&amp;nbsp;</p><pre>    void GetData(char *MFAddr) { <br />	char pwd[64];<br />&amp;nbsp;	if (GetPasswordFromUser(pwd, sizeof(pwd))) {<br />		if (ConnectToMainframe(MFAddr, pwd)) {<br />&amp;nbsp;<br />&amp;nbsp;		&amp;nbsp;// Interaction with mainframe<br />&amp;nbsp;<br />		&amp;nbsp;&amp;nbsp;}<br />&amp;nbsp;	}<br />&amp;nbsp;	<strong>memset(pwd, 0, sizeof(pwd));<br /></strong>}<br /></pre><p>However, it is extremely important to know that&amp;nbsp;<i>memset</i>&amp;nbsp;might not work as intended if compiler optimizations are on. Make sure to turn off compiler optimizations if protecting your code using&amp;nbsp;<i>memset</i>&amp;nbsp;as shown above. For more information, refer to&amp;nbsp;<em>OWASP’s Insecure Compiler Optimization&amp;nbsp;</em>[ii].</p><p>Another way of clearing out memory is by traversing the array and setting each element to zero:</p><pre><br />void erase_string(char *s) {</pre><pre>	while(*s) { *s++ = 0; }</pre><pre>}</pre><p>This technique is recommended, because it doesn’t depend on compiler optimizations or knowledge of the array’s size. To properly secure your application, it is suggested that you add similar zeroing-out techniques after returning from function calls that deal with sensitive data and also in every destructor of classes that deal with secrets such as passwords and cryptographic elements.</p><h2><em>Locking sensitive memory</em></h2><p>Zeroing out sensitive memory is an effective technique to keep sensitive data in virtual memory (and consequently in RAM and swap files) as briefly as possible. However, this data might still get swapped by the operating system’s paging system into swap files before the application has a chance to clean it, increasing the risk of harm from a memory sniffing attack.</p><p>To mitigate this condition, lock virtual address pages from being swapped. In UNIX platforms, use <i>mlock</i>, as below [iii]:</p><pre>#include &lt;sys/mman.h&gt;</pre><pre><br />void *locking_alloc(size_t numbytes) {</pre><pre>	static short have_warned = 0;</pre><pre>&amp;nbsp;	void *mem = malloc(numbytes);</pre><pre><br />	if(mlock(mem, numbytes) &amp;&amp; !have_warned) {<br />&amp;nbsp;<br />		/* We probably do not have permission.<br />&amp;nbsp;&amp;nbsp; &amp;nbsp; 	 	 * Sometimes, it might not be possible to lock enough memory.<br />&amp;nbsp;&amp;nbsp; &amp;nbsp; 	 	 */</pre><pre>		fprintf(stderr, "Warning: Using insecure memory!\n");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;		have_warned = 1;<br />&amp;nbsp;<br />	} </pre><pre>	return mem;<br />}</pre><p>In Windows, use the Win32 API VirtualLock for the same purpose.</p><h2><em>Disable the creation of dump files</em></h2><p>An attacker might execute a memory sniffing attack by crashing an application and accessing the core dumps created by the system upon the crash. Any sensitive data loaded by the application into any data structure will appear in dump files for the attacker to leverage. To mitigate this condition, processes must disable the creation of dump files right from the start. To do this, use the&amp;nbsp;<i>setrlimit</i>&amp;nbsp;API both in UNIX and Windows platforms [iv]:</p><pre>    
      char pwd[MAX_PWD_LEN];<br />if(setrlimit(RLIMIT_CORE, 0) != 0) {<br />	/* deal with error */<br />}<br />&amp;nbsp;<br />fgets(pwd, MAX_PWD_LEN, stdin);
    
  </pre><h2><em>Additional countermeasures</em></h2><p>Additional defenses against memory sniffing attacks include deleting the page file on reboot or shutdown (this can be done by setting a registry value in Windows), and using forensic tools to scrub all different types of system memory. In addition, research is moving towards encrypting the contents of RAM and swap files and storing the encryption key in hardware.</p><p>&amp;nbsp;</p><h1>Step 3: Start Testing and Exploring</h1><p>Now that you understand the basic theory behind memory sniffing attacks, execute practical test cases to check if your application is vulnerable. If you plan to implement countermeasures, it is important to execute these tests before and after adding the countermeasures to test their effectiveness.</p><h2><em>Test for sensitive data in RAM</em></h2><p>In Windows platforms, follow these steps to create a record of physical memory in a text file:</p><ol><li>Log into a Windows host running the application under test. <br /></li><li>Download and install ManTech’s Memory DD (<a href="https://sourceforge.net/projects/mdd/)">https://sourceforge.net/projects/mdd/)</a>.</li><li>Open command prompt with administrative privileges.</li><li>Run mdd as follows:&amp;nbsp;<b>mdd_1.3.exe -o c:\ram.txt -v</b></li><li>Once mdd finishes executing, read output file ram.txt for sensitive information.</li></ol><p>Expected results: ram.txt must not show any sensitive data.</p><h2><em>Test for sensitive data in virtual memory</em></h2><p>The best way to search your application’s virtual memory for secrets is to use a debugger to create a dump of the virtual memory space at any given time:</p><ol><li>Log into a Windows host running the application under test.&amp;nbsp;&amp;nbsp;</li><li>Download and run user-mode Windows debugging&amp;nbsp;<i>windbg.</i></li><li>Attach windbg to the application under test.</li><li>Break into the debugger and specify the option to create a full dump for the application’s virtual memory:&amp;nbsp;<b>.dump /f c:\dump.txt</b></li></ol><p>Expected results: dump.txt must not show any sensitive data.</p><h2><em>Test for sensitive data in swap files</em></h2><p>In Windows, swap files are stored in the&amp;nbsp;<i>pagefile:</i></p><ol><li>Log into a Windows host running the application under test.&amp;nbsp;<font color="#ff0000"></font></li><li>Find pagefile<i>.&amp;nbsp;</i>It is named&amp;nbsp;<i>pagefile.sys</i>&amp;nbsp;and is usually on the root drive of the Windows partition (i.e. c:\pagefile.sys).</li><li>Open read-only copy of a file.</li><li>Search for sensitive information in pagefile.</li></ol><p>Expected results: pagefile must not show sensitive information.</p><h2><em>Test for sensitive data in dump files</em></h2><p>Follow these steps test for sensitive information in dump files:</p><ol><li>Log into a Windows host running the application under test.&amp;nbsp;</li><li>Find the dump files (in Windows, this is indicated in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\CrashControl).</li><li>Open a dump file and search for sensitive information.</li><li>Repeat for each of the dump files</li></ol><p>Expected results: dump files must not show sensitive information.</p><p>&amp;nbsp;</p><h1>Step 4: Execute Additional Testing</h1><p>If the sensitive data cannot be easily recognized, you must do additional testing. During each of the tests above, the attacker needs to interpret the output. Running each of the tools creates an output file with a large quantity of data that is irrelevant to the test. A good way to find secrets is to run a command such as <i>strings</i>&amp;nbsp;on the output file [v] in order to display all character arrays in the file:</p><pre><br />C:\Documents and Settings\All Users\Documents\DrWatson&gt;strings user.dmp<br />12</pre><pre>…<br />kernel32.dll<br />RASAPI32<br />C:\WINNT\tracing<br />C:\Documents and Settings\Administrator\My Documents\PGP\pubring.pkr<br />C:\Documents and Settings\Administrator\My Documents\PGP\secring.skr<br />&amp; !<br />IN PGP MESSAGE-----<br />Version: PGP 7.1<br />qANQR1DBwU4DSL6Q3OHRwOYQB/9pKnnhZGQRFwykWzBO1EWkzW336QOkUaHj0aVj<br />P1MgxDWQWi3kZpOfGnDg6kbQriWBiIgD/z8p5xGN+WcksytlLJv8OxvTGMepx7u8<br />h5aVRXZd8YPM+h5ROpbnNw+SiT/w9oCy/ChWeiCHV1swQSzwBHx2Ye+yxO70Moxc<br />...<br />frAG3nM7kOnChQp4jxhv2J0p7fL1vteI9EGbcimC9QCVBwC1U++mQIqbTyIw5gWK<br />Io11yl8P+wKjcHsLfi2hTE+NIRb+VORWhVoCDHgNKV1nSFNTK0LEnvz84OFyRc1z<br />-----END PGP MESSAGE-----<br /><strong>&lt;pgppassphrase!&gt;</strong><br />…<br /></pre>&amp;nbsp;<p>Hex editors and similar low-level file processing tools must be used to identify sensitive data. Additional techniques include performing dictionary or linear searches. For example, in Linux refer to&amp;nbsp;<em>Cryptographic Key Recovery from Linux Memory Dumps&amp;nbsp;</em>[vi]<em>.</em></p><p>&amp;nbsp;</p><h1>Conclusions</h1><p>Memory sniffing attacks aim at recovering sensitive data in system memory, including virtual memory, RAM, and swap files. To properly test for this bug, it is necessary to understand the anatomy of the attack scenario as well as why it is caused and how to protect against it. Then, you must use a set of available tools to check for the bug in your application by making records of the different types of memory and searching them for sensitive data.</p><p />&amp;nbsp;<br /><hr /><p /><div><p>[i]<b>Hit by a Bus: Physical Access Attacks with Firewire.&amp;nbsp;&amp;nbsp;Adam Boileau.&amp;nbsp;&amp;nbsp;</b>Security-Assesment.com.&amp;nbsp;&amp;nbsp;<a href="http://www.security-assessment.com/files/presentations/ab_firewire_rux2k6-final.pdf">http://www.security-assessment.com/files/presentations/ab_firewire_rux2k6-final.pdf</a><b></b></p><p><b></b></p><p>[ii]<b>Insecure Compiler Optimization</b>. OWASP.&amp;nbsp;<a href="http://www.owasp.org/index.php/Insecure_Compiler_Optimization">http://www.owasp.org/index.php/Insecure_Compiler_Optimization</a></p><p>[iii]<b>Protecting sensitive data in memory.&amp;nbsp;&amp;nbsp;</b>John Viega.&amp;nbsp;&amp;nbsp;CGI Security.&amp;nbsp;&amp;nbsp;<a href="http://www.cgisecurity.com/lib/protecting-sensitive-data.html">http://www.cgisecurity.com/lib/protecting-sensitive-data.html</a></p><p>[iv]<b>VOID MSC14-A. Protect memory when working with sensitive data</b>. Alex Volkovitsky CERT.&amp;nbsp;&amp;nbsp;<a href="https://www.securecoding.cert.org/confluence/display/seccode/VOID+MSC14-A.+Protect+memory+when+working+with+sensitive+data">https://www.securecoding.cert.org/confluence/display/seccode/VOID+MSC14-A.+Protect+memory+when+working+with+sensitive+data</a></p><p>[v]<b>Practical Approaches to Recovering Encrypted Digital Evidence.&amp;nbsp;</b>Eoghan Casey<strong>.&amp;nbsp;&amp;nbsp;</strong><a href="http://www.utica.edu/academic/institutes/ecii/publications/articles/A04AF2FB-BD97-C28C-7F9F4349043FD3A9.pdf">http://www.utica.edu/academic/institutes/ecii/publications/articles/A04AF2FB-BD97-C28C-7F9F4349043FD3A9.pdf</a></p><p>[vi]<b>Cryptographic Key Recovery from Linux Memory Dumps</b>.&amp;nbsp;Torbjörn Pettersson.&amp;nbsp;&amp;nbsp;<a href="http://events.ccc.de/camp/2007/Fahrplan/attachments/1300-Cryptokey_forensics_A.pdf">http://events.ccc.de/camp/2007/Fahrplan/attachments/1300-Cryptokey_forensics_A.pdf</a></p></div>]]></Data>
  </Content>
</TeamMentor_Article>