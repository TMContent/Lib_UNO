<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>1e23dcb8-a007-4080-b841-41485a012945</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Do Not Hardcode Keys into Embedded Systems</Title>
    <Category />
    <Phase />
    <Technology>Embedded</Technology>
    <Type />
    <DirectLink />
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

Embedded systems.


## What to Do ##

Ensure that your application code does not contain hardcoded secret keys and data.

Find out about vendor-provided services and mechanisms for data protection.

Use protected channels for secret keys and data distribution.


## Why ##

If you store any secret information inside your application, sooner or later such secrets will probably be discovered and made public and this information will be available for anyone to exploit your system.

Given enough time and modern tools to analyze application code, an experienced attacker could extract any secret stored in an application binary.

Modern cryptography states that security strength depends neither on algorithm complexity nor on data obscurity, but rather on algorithm strength and secret key size.

For any cryptographic service, its strength depends on how well-protected its root secret is. Therefore, it is very important for an application vendor to decide how to distribute the initial secret from vendor to the customer.


##How##

1. **Identify the security perimeter for your system**. Review your application requirements and identify which data or communication channel needs to be protected. 

2. **Select an appropriate cryptographic algorithm**. Depending on application requirements you may choose different cryptographic algorithms. For example, to protect a secure channel you should use stream cipher algorithms, while to protect data at rest, block ciphers are more appropriate. For secret key establishment, digital signatures and asymmetric algorithms are more appropriate.

3. **Identify available cryptographic services**. Check your platform vendor documentation to establish the availability of cryptographic services for your application. If cryptographic services are not provided, then you may choose third-party libraries and frameworks.

4. **Use hardware options**. If available, use hardware security modules like security tokens, smartcards, or cryptographic modules.

5. **Review your application code for hardcoded keys**. Review your application code and find all the functions where hardcoded secrets or passwords are used. Redesign these functions or modules to use different approaches for data protection.
]]></Data>
  </Content>
</TeamMentor_Article>