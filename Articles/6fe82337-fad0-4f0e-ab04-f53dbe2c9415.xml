<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>6fe82337-fad0-4f0e-ab04-f53dbe2c9415</Id>
    <Id_History>2faf9bc6-fb15-4341-bb10-7dbc39e30d6e,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>All Database Input Is Validated</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Scala with Play Framework</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>All Database Input Is Validated</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1 style="font-style: normal;">Applies To:</h1>
  <h1 style="font-style: normal;">
    <span style="font-size: 13px; font-weight: normal;">Applications </span>
    <span style="font-size: 10pt; font-weight: normal;">written using Scala and Play Framework 2.1.0.</span>
  </h1>
  <h1 style="font-style: normal;">What to Check For</h1>
  <p style="font-style: normal;">Ensure that all input passed to the database is validated.</p>
  <h1 style="font-style: normal;">Why</h1>
  <p style="font-style: normal;">Unvalidated input can lead to persistent cross-site scripting, SQL/No SQL injection and other vulnerabilities&amp;nbsp;that would allow an attacker to gain unauthorized access to sensitive data.</p>
  <h1 style="font-style: normal;">How to Check</h1>
  <p style="font-style: normal;">Use the following steps to check if all input passed to the database is validated:</p>
  <ol>
    <li style="font-style: normal;">
      <p>
        <strong>Identify database entry points.&amp;nbsp;</strong>Identify all locations within your application that interface with the database servers. Potential sources of input include:<br /></p>
      <ul>
        <li style="margin-left: 15px;">URL based parameters<br /></li>
        <li style="margin-left: 15px;">Form based parameters<br /></li>
        <li style="margin-left: 15px;">Hidden fields<br /></li>
        <li style="margin-left: 15px;">Cookies<br /></li>
        <li style="margin-left: 15px;">HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)<br /></li>
        <li style="margin-left: 15px;">Local filesystem<br /></li>
        <li style="margin-left: 15px;">Database<br /></li>
        <li style="margin-left: 15px;">Other services running on the system<br /></li>
        <li style="margin-left: 15px;">Javascript variables<br /></li>
        <li style="margin-left: 15px;">File upload and attributes (filename, size, data, etc)<br /></li>
        <li style="margin-left: 15px;">DNS results or host names<br /></li>
        <li style="margin-left: 15px;">External component call return values (AJAX. etc)</li>
      </ul>
    </li>
    <li style="font-style: normal;">
      <p>
        <strong>Trace data from source to sink.&amp;nbsp;</strong>Trace each source of input from the immediate source, through your application and&amp;nbsp;to the back-end database.</p>
    </li>
    <li style="font-style: normal;">
      <p>
        <strong>Identify validation routines.&amp;nbsp;</strong>Ensure that each input source has a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.</p>
    </li>
    <li style="font-style: normal;">
      <p>
        <strong>Ensure quality of validators.&amp;nbsp;</strong>Validation routines should check for length, range, format, and type.&amp;nbsp;The validator&amp;nbsp;should first check for good data&amp;nbsp;via whitelisting and then for known malicious data&amp;nbsp;via blacklisting. Validate on the server--do not rely on client-side validation alone as it can be easily bypassed.</p>
    </li>
    <li>
      <p>
        <strong style="font-style: normal;">Ensure that parameterized queries are used.&amp;nbsp;</strong>Verify that all database transactions are handled using&amp;nbsp;<em style="font-style: normal;">PreparedStatement</em>&amp;nbsp;objects. <i>Anorm</i> can be used for this purpose.</p>
    </li>
  </ol>
  <h1 style="font-style: normal;">How to Fix</h1>
  <p style="font-style: normal;">To properly validate input passed to database:</p>
  <ol style="font-style: normal;">
    <li>
      <strong>Identify database entry points.&amp;nbsp;</strong>Identify all locations within your application that interface with the database servers. Potential sources of input include:<ul><li style="margin-left: 15px;">URL based parameters<br /></li><li style="margin-left: 15px;">Form based parameters<br /></li><li style="margin-left: 15px;">Hidden fields<br /></li><li style="margin-left: 15px;">Cookies<br /></li><li style="margin-left: 15px;">HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc)<br /></li><li style="margin-left: 15px;">Local filesystem<br /></li><li style="margin-left: 15px;">Database<br /></li><li style="margin-left: 15px;">Other services running on the system<br /></li><li style="margin-left: 15px;">Javascript variables<br /></li><li style="margin-left: 15px;">File upload and attributes (filename, size, data, etc)<br /></li><li style="margin-left: 15px;">DNS results or host names<br /></li><li style="margin-left: 15px;">External component call return values (AJAX. etc)</li></ul></li>
    <li>
      <p>
        <strong>Create a set of validators.&amp;nbsp;</strong>Build a set of validators that work with the database-specific language. Determine the appropriate validation at each validator. Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the component. Place the validators along the database entry points. All data should pass through the validators before it is transmitted to the database servers.</p>
    </li>
    <li>
      <p>
        <strong>Use type safe SQL parameters in queries.&amp;nbsp;</strong>Stored procedures and parameterized queries improve your application's robustness against SQL injection based attacks. Anorm can be used for this purpose.</p>
    </li>
  </ol>
  <h1 style="font-style: normal;">Additional Resources</h1>
  <ul style="font-style: normal;">
    <li>A tutorial on regular expressions is available at:&amp;nbsp;<a href="http://www.regular-expressions.info/">Regular-Expressions.info</a>.</li>
    <li>For more information on using regular expression in Scala, see:&amp;nbsp;<a href="http://www.scala-lang.org/api/current/scala/util/matching/Regex.html">Regex</a>&amp;nbsp;in Scala documentation.</li>
  </ul>
  <div>
    <h1 style="margin: 0px; padding: 10px 0px 0px; font-size: 17px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif;">Input and Data Validation Guidelines</h1>
    <ul style="margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;">
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="af528b9a-af5f-49b8-a314-4578c0b31273">Validate Input from All Sources</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="b6795407-d01e-44ec-8aed-a440d388902b">Validate Input for Length, Range, Format, and Type</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <font color="#333399">
          <b>
            <a href="00000000-0000-0000-0000-00000016b3b2">Validate All Input Passed to the Database</a>
          </b>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <b style="color: rgb(51, 51, 153);">
          <a href="97d61072-14e2-48dd-a1bf-ec149efbcb54">Do Not Rely on Client-Side Validation</a>
        </b>
      </li>
    </ul>
    <h1 style="margin: 0px; padding: 10px 0px 0px; font-size: 17px; color: rgb(17, 17, 17); font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif;">Input and Data Validation Checklists</h1>
    <ul style="margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small;">
      <li style="margin: 0px; padding: 0px;">
        <font>
          <a href="0bf6f129-8641-43f4-a29c-62f58493fb78">
            <b>Input from All Sources Is Validated</b>
          </a>
        </font>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <b>
          <a href="067e2f72-18f0-4f5a-ba9c-287691cd9ed3">Input Is Validated for Length, Range, Format and Type</a>
        </b>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <b>
          <a href="2faf9bc6-fb15-4341-bb10-7dbc39e30d6e">All Database Input Is Validated</a>
        </b>
      </li>
      <li style="margin: 0px; padding: 0px;">
        <b>
          <a href="c5688313-0255-461c-a978-423596d182db">The Application Does Not Rely on Client-Side Validation</a>
        </b>
      </li>
    </ul>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>