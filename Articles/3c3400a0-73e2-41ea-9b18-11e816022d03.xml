<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>3c3400a0-73e2-41ea-9b18-11e816022d03</Id>
    <Library_Id>de693015-55c9-4328-bbc8-42db82ae8b7a</Library_Id>
    <Title>Filesystem Operations</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[When reading or writing files, care should be taken to protect the application from malicious files or path manipulation. If processing information that lives within a file, this must be considered data input and the same verification and restrictions put in place as those on other sources of data. The code should then be checked to ensure that it prevents users from manipulating file paths to supply malicious data from a source it may normally reject. View this room to learn the correct techniques for processing files and the safeties put in place to ensure filesystem access is managed properly.

==Canonicalize File Names and Paths==

When input validation is applied to file paths and names, it only works properly when file paths and names are canonicalized. If file names and paths are not canonicalized before validation, a number of vulnerabilities may be introduced as a result.

* [[00000000-0000-0000-0000-0000008dcc1f|.NET]]
* [[d7baa268-7684-4f8f-a4e7-96d9a158e47c|Java]]
* [[00000000-0000-0000-0000-0000003b5c16|PHP]]
* [[00000000-0000-0000-0000-0000008d3cec|Android]]
* [[00000000-0000-0000-0000-000000866d55|iOS]]
* [[004526a6-5b2f-4094-94fa-a80d818c0a41|C++]]

[[bcbbe5c7-95c3-468d-9371-6eb42f9b93e6|Back to the Programming Best Practices Area]]]]></Data>
  </Content>
</TeamMentor_Article>