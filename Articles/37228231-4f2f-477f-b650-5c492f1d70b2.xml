<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>37228231-4f2f-477f-b650-5c492f1d70b2</Id>
    <Id_History>111c98bb-5909-4bde-b961-64fc9fc14c3e,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use Parameterized Mail APIs</Title>
    <Category>Dangerous APIs</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Parameterized Mail APIs</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* ASP.NET 4.0

==What to Do==

Use parameterized APIs to send email. Don't implement your own SMTP client code. Use APIs that separate different parts of the message into different parameters. For example, the recipient address should be separate from the message subject and the message body.

==Why==

Using APIs that provide SMTP functionality is better than writing your own SMTP client code because it reduces the risk of introducing Mail Command Injection vulnerabilities. Most Web Application platforms provide APIs that can be used to send email and these APIs should be used instead of custom SMTP client code. 

==When==

Use this Guideline when your application sends email.

==How==

To use parameterized APIs to send email:

# **Identify code that sends email.** Review application code to find functions that send email. 
# **Identify available email APIs.** Review platform documentation to find available APIs that can be used to send email.
# **Use parameterized email APIs.** If the application uses custom SMTP client code to send email, replace that code with calls to email APIs provided by the platform.







]]></Data>
  </Content>
</TeamMentor_Article>