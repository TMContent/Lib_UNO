<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>5d296e90-a27c-424a-bfe1-5576490b50c2</Id>
    <Id_History>5d296e90-a27c-424a-bfe1-5576490b50c2,dd606077-5850-4dff-8db8-f0e2fa58e5f8,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Protect Session Cookies</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Scala Play</Technology>
    <Type>How To</Type>
    <DirectLink>Protect Session Cookies</DirectLink>
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Scala and Play Framework 2.1.0+


## What to Do ##

Protect the confidentiality of session cookies.


## Why ##

Session cookies are used by an application to identify the session associated with a particular user. Protecting session cookies can help prevent an attacker from hijacking the session and using the application as a legitimate user.


## When ##

If your application uses cookies to maintain a user's session state, then use this guideline to protect the cookie.


## How ##

To secure session cookies:

1. **Do not allow users to choose their own session identifiers.** Use the Scala cookie feature to automatically assign random IDs to its sessions. This minimizes the risk of an attacker hijacking another user's session by using the same session ID. To use sessions in Scala, invoke play.api.mvc.Cookie.

2. **Invalidate the session identifier on login (as well as logout) to ensure session identifiers are not reused.** This is necessary to prevent session hijacking. After the session has been invalidated, make a call to generate a new session identifier.

3. **Time-out sessions.** Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes.
Allow users to terminate their sessions. Allowing users to invalidate their sessions reduces the risk of the session being hijacked. Use result.discardingCookies to accomplish this.

4. **Ensure cookies are sent over encrypted channels.** Mark cookies sent over TLS as Secure. Use the  Enable Secure flag on the cookie, setting “application.session.secure=true” in the “application.conf” file. Do not send session cookies over unencrypted channels as session hijacking is made much easier.]]></Data>
  </Content>
</TeamMentor_Article>