<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>938aa01b-1006-4e37-815b-1e1d27c0ef79</Id>
    <Id_History>617b6f1f-017c-4cab-91ec-854fee4be42e,</Id_History>
    <Library_Id>7d2d0571-e542-45cd-9335-d7a0556c2bea</Library_Id>
    <Title>Strong Password Requirements Are Enforced</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>Web Application</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Strong Password Requirements Are Enforced</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* Web Applications

==What to Check For==

Verify that strong password requirements are enforced.

==Why==

Requiring strong passwords prevents weak passwords from being used. Using strong passwords makes the application more resilient to password guessing attacks.

==How to Check==

To verify that strong password requirements are enforced:

# **Identify application requirements.** Determine whether your application needs to have a customizable password complexity policy or if it's okay to hard-code password complexity requirements. Define secure defaults for password complexity options.
# **Identify password changing code.** Review your application to find code that is responsible for changing user passwords.
# **Verify that password length is validated.** Verify that password changing code checks the user-supplied password against defined minimum and maximum allowed password lengths.
# **Verify that password complexity is validated.** Verify that password changing code checks the user-supplied password to make sure it includes lower-case characters, capital letters, numbers, and special characters to match application requirements.

==How to Fix==

To enforce strong password requirements:

# **Identify application requirements.** Determine whether your application needs to have a customizable password complexity policy or if it's okay to hard-code password complexity requirements. Define secure defaults for password complexity options.
# **Identify password changing code.** Review your application to find code that is responsible for changing user passwords.
# **(Optional) Let the user enter the password twice.** It is a common practice to allow the user to enter the password twice to make sure that the user enters the new password correctly. This is important because the password fields are typically masked, so the user cannot see his input, and changing the password to an unintended one may leave the user locked out of his account. If this is implemented in your application, the password changing code should validate the two entered passwords to make sure they match.
# **Check password length.** Add code to the password changing function to check the password length for minimum and maximum limits defined by policy.
# **Check the password for numbers.** Add code to the password changing function to check the password for numbers. 
# **Check the password for lower-case letters.** Add code to the password changing function to check the password for lower-case letters.
# **Check the password for capital letters.** Add code to the password changing function to check the password for capital letters.
# **(Optional) Check the password for symbols.** If your application requires it, add code to the password changing function to check the password for symbols. ]]></Data>
  </Content>
</TeamMentor_Article>