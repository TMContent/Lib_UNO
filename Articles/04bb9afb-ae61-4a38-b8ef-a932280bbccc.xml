<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>04bb9afb-ae61-4a38-b8ef-a932280bbccc</Id>
    <Id_History>d0c3c4b0-5d87-4bf0-9af5-b15e491c546b,</Id_History>
    <Library_Id>7d2d0571-e542-45cd-9335-d7a0556c2bea</Library_Id>
    <Title>Logging Is Centralized</Title>
    <Category>Auditing and Logging</Category>
    <Phase>Implementation</Phase>
    <Technology>Web Application</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Logging Is Centralized</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* Web Applications

==What to Check For==

Verify that logging is centralized.

==Why==

A centralized logging subsystem is simpler to maintain and implement correctly.

==How to Check==

Use the following steps to verify that logging is centralized:

# **Identify the logging subsystem.** The logging subsystem should provide an API that allows generating log entries from application code. Make a list of functions that may be used to generate log entries.
# **Examine log entries. Find out where log entries are stored and examine them. This should give you clues about the functionality of the logging subsystem.
# **Review code.** Find code that generates log entries. Make sure this code uses the centralized logging subsystem.

==How to Fix==

Perform the following actions to centralize logging: 

# **Identify existing logging functionality.** Examine the application architecture to identify logging facilities, such as the logging API and where audit trails are actually stored. Make a list of APIs used to log events, document how to use them, and where they store logs.
# **Design the logging subsystem.** Design and implement a class or library specifically for logging. When designing the logging subsystem, consider sending logs to a remote log server. Consider the following factors when designing the logging subsystem:
## Log throttling
## Logging important event details for both successful and failed operations
## Logging important security operations
## Logging important business operations
## Monitoring the use of privileged accounts
## Logging user management events
## Avoiding including sensitive information in logs
## Logging unusual activity
## Sending logs to a centralized server
# **Implement the logging subsystem.** Write code that generates log entries according to your design. 
# **Use the logging subsystem.** Use the logging class or library whenever logs are generated. If earlier code exists that generates log entries, replace it with calls to the new logging subsystem API.
]]></Data>
  </Content>
</TeamMentor_Article>