<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>1cbf8cf8-e6d9-4965-a2a5-1416eb0e26d2</Id>
    <Id_History>c5a4453a-8274-445c-90b9-985e85e01788,</Id_History>
    <Library_Id>d9c2b53f-5b05-4152-be72-e79d72854707</Library_Id>
    <Title>How to Test for Cross-Site Request Forgery (CSRF) Bugs</Title>
    <Category>Session Management</Category>
    <Phase>Test</Phase>
    <Technology>Any</Technology>
    <Type>How To</Type>
    <DirectLink>How to Test for Cross-Site Request Forgery (CSRF) Bugs</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <p>All web applications.<br /></p>
  <h1>Summary</h1>
  <p>During cross-site request forgery (CSRF) -- also known as&amp;nbsp;XSRF&amp;nbsp;or&amp;nbsp;session-riding attacks -- an attacker forces a victim to make an unexpected web request such as a fraudulent bank transaction.&amp;nbsp;&amp;nbsp;For example, an attacker tricks the victim client into calling a banking function in a vulnerable page that transfers money from the victim’s to the attacker’s account.&amp;nbsp;&amp;nbsp;The victim triggers the attack by following an attacker’s link or visiting an attacker’s page.&amp;nbsp;&amp;nbsp;The vulnerable server page doesn’t recheck the authenticity of the victim’s request and allows the transfer to proceed.</p>
  <p>Follow these steps to test for CSRF bugs:</p>
  <ul>
    <li>Step 1:&amp;nbsp;&amp;nbsp;Understand Attack Scenarios</li>
    <li>Step 2:&amp;nbsp;&amp;nbsp;Analyze Causes and Countermeasures</li>
    <li>Step 3:&amp;nbsp;&amp;nbsp;Start Testing and Exploring</li>
    <li>Step 4:&amp;nbsp;&amp;nbsp;Fine-tune Test Cases</li>
  </ul>
  <p>&amp;nbsp;</p>
  <h1>Step 1:&amp;nbsp;&amp;nbsp;Understand Attack Scenarios</h1>
  <p>The first step in testing for CSRF bugs is to understand its attack scenarios.&amp;nbsp;&amp;nbsp;Even though the anatomy of a CSRF attack is almost always constant, its objectives may vary. Attackers can exploit CSRF bugs to perform unauthorized fraudulent banking transactions, send spoofed email messages, steal sensitive information, and even install a back door.&amp;nbsp;&amp;nbsp;The following steps detail the anatomy of a CSRF attack:</p>
  <ol>
    <li>Attacker finds functionality in a web application that is vulnerable to CSRF.</li>
    <li>Attacker builds a link invoking the vulnerable function and passing the required parameters to execute the chosen attack.</li>
    <li>Attacker waits until the victim client authenticates with the vulnerable web application.</li>
    <li>Attacker tricks victim client into following the malicious link.</li>
    <li>Victim client sends forged request to vulnerable server.</li>
    <li>Vulnerable server allows and executes the forged request.</li>
  </ol>
  <p>The form of the link built in step 2 depends on the payload that the attacker wants to execute.&amp;nbsp;&amp;nbsp;For example, to transfer money from the victim’s account to the attacker’s account, the link may look like:</p>
  <strong>
    <a>
      <pre>/makeTransfer?amount=1000&amp;dest=attacker@attackersite.com</pre>
    </a>
  </strong>
  <p>The link below sends an email titled&amp;nbsp;Hello&amp;nbsp;to&amp;nbsp;johny@example.com&amp;nbsp;:</p>
  <strong>
    <pre>/sendMail?to=johny@example.com&amp;title=Hello&amp;body=I+did+not+send+this<p /></pre>
  </strong>
  <p>A serious flaw discovered in Google’s Gmail early in 2007 allowed attackers to install a backdoor to forward all emails to them.&amp;nbsp;&amp;nbsp;In the link below, the attacker forwards the victim to the attacker’s site.&amp;nbsp;&amp;nbsp;Then the attacker’s site makes the fraudulent request in behalf of the victim:</p>
  <strong>
    <pre>http://www.attakersite.org/util/csrf?method=POST&amp;enctype=multipart/form-data&amp;_action=https%3A//mail.google.com/mail/h/ewt1jmuj4ddv/%3Fv%3Dprf&amp;cf2emc=true&amp;cf2_email=attacker@attackersite.com&amp;cf1_from&amp;cf1_to&amp;cf1_subj&amp;cf1has&amp;cf1hasnot&amp;cf1attach=true&amp;tfi&amp;s=z&amp;irf=on&amp;nvpbucftb=Create%20Filter</pre>
  </strong>
  <p>Upon receiving the forged HTTP POST request, Gmail forwards all the victim’s emails to&amp;nbsp;attacker@attackersite.com.&amp;nbsp;&amp;nbsp;&amp;nbsp;Furthermore, the attack installs a filter that works as a backdoor for hijacking future emails.</p>
  <p>&amp;nbsp;</p>
  <h1>Step 2:&amp;nbsp;&amp;nbsp;Analyze Causes and Countermeasures</h1>
  <p>During this step you will be shown the causes behind CSRF and how to recognize it within your code base. You will be shown coding best practices to help prevent CSRF altogether.</p>
  <h2>
    <em>Cross-Site Request Forgery Causes</em>
  </h2>
  <p>This vulnerability exists when the web application trusts the forged request. Thus, the cause is poor or missing authentication code. The application lacks the functionality to verify that a client request is not forged and that it actually originates from a legitimate client action. Web applications vulnerable to CSRF implement a&amp;nbsp;<i>persistent</i>&amp;nbsp;authentication system in which they validate the user against a persistent token such as a session cookie. In persistent authentication, when the server receives a request, it only checks if the user is logged in and not if the request comes due to a legitimate client action.</p>
  <h2>
    <em>Cross-Site Request Forgery Countermeasures</em>
  </h2>
  <p>The main way to prevent CSRF is to provide a&amp;nbsp;<i>transient</i>&amp;nbsp;authentication system [i] instead of a persistent one.&amp;nbsp; A transient authentication system verifies the authenticity of every request. One way to do this is to transmit a secret in every URL, especially those that request create, update, delete, or mail actions.&amp;nbsp;&amp;nbsp;An attacker will not be able to execute an attack unless he knows the secret.&amp;nbsp;&amp;nbsp;The problem is that an attacker can execute a XSS attack and steal the secret.</p>
  <p>A common solution is for every POST request to issue an authentication 
token to secure critical actions. When the form is submitted, the 
application verifies the token. An attacker website cannot obtain a 
valid token for the user's session. Other&amp;nbsp;way to protect Internet users from CSRF is by using&amp;nbsp;CAPTCHAs (Completely Automated Public Turing test to tell Computers and Humans Apart<span class="sewuejmx8vkeg0a"></span><span class="sewuejmx8vkeg0a">)</span> that require the client to validate the contents of a bitmap image before the application allows any requests. Some suggested measures include using POSTs instead of GETs requests to perform actions, and/or to check the HTTP referrer header.&amp;nbsp;</p>
  <h1>Step 3:&amp;nbsp;&amp;nbsp;Start Testing and Exploring</h1>
  <p>Now that you’ve learned how CSRF attacks work and how to defend against them, this step shows the basic test cases to execute to start testing for CSRF bugs.</p>
  <p />
  <h2>
    <em>Basic Test for Cross-site Request Forgery Vulnerability</em>
  </h2>
  <p>Follow these test steps to test against CSRF bugs.<b><i></i></b></p>
  <ol>
    <li>Find a web application page that performs an action based on a user request.</li>
    <li>Construct a page containing a link or redirect that sends a forged request to the application server.&amp;nbsp;&amp;nbsp;This link usually contains a tag such as an img or iframe (although mostly any tags can be used), with the source address pointing to the request:<br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;<font face="Courier New">a href="http://bank.com/transfer?acct=MARIA&amp;amount=100000"&gt;View my Pictures!
<br />&amp;nbsp; &amp;nbsp; &amp;nbsp;<img src="http://bank.com/transfer?acct=MARIA&amp;amount=100000" border="0" height="1" width="1" />


                &amp;nbsp;</font><p>Note that the links above will both generate a GET request.&amp;nbsp;&amp;nbsp;In order to test for POST requests you must create a page containing a form with the URL parameters passed as hidden input, and add a script to automatically submit the form:<br /></p><pre>      &lt;form action="http://bank.com/transfer" method="post" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input name="acct" value="MARIA" type="hidden" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input name="ammount" value="100000" type="hidden" /&gt;<br /><br />      &lt;script&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.forms[0].submit();<br />      &lt;/script&gt;<br /></pre></li>
    <li>Open an Internet browser and log in to the web application as a legitimate user.</li>
    <li>Open the page built in step 2 (follow the link if necessary).</li>
    <li>Confirm if the request was successful.</li>
    <li>Repeat test case for every application create/update/delete/mail action.</li>
  </ol>
  <p>Expected result:&amp;nbsp;&amp;nbsp;the test fails if the application trusts and processes the forged request.</p>
  <h2>
    <em>Test Use of Secrets in URLs</em>
  </h2>
  <p>This test will tell you if your application uses secrets in the URL.</p>
  <p>Testing steps:<b><i></i></b></p>
  <ol>
    <li>Log in to the application as a legitimate user.</li>
    <li>Browse to a web form that makes a valid request and uses a secret in the URL:<br /></li>&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;http://example.com/makeTransfer?amount=1000&amp;dest=attacker@attackersite.com'&amp;secret=2y9ryo2hr2 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;<br /><li>Start intercepting network traffic using HTTP(s) WebScarab&amp;nbsp;proxy.</li><li>Configure browser to use WebScarab proxy.</li><li>Make another request.</li><li>In WebScarab, modify the URL to change the secret to another value:<br /><br /></li>http://example.com/makeTransfer?amount=1000&amp;dest=attacker@attackersite.com'&amp;secret=<strong>XXXXXXXXXXX</strong></ol>
  <p />
  <p>Expected result:&amp;nbsp;&amp;nbsp;The server must disallow the action since the secret was changed in step 6.&amp;nbsp;&amp;nbsp;The test fails if the server allows the requested action.</p>
  <p>
    <b>
      <i>
      </i>
    </b>
  </p>
  <h2>
    <em>Test Use of Secrets in Cookies</em>
  </h2>
  <p>This test will tell you if your application properly uses secrets in the cookies.</p>
  <p>Testing steps:<b><i></i></b></p>
  <ol>
    <li>Start intercepting network traffic using WebScarab proxy.</li>
    <li>Open a browser, configure it to go through WebScarab proxy, and log in to the application as a legitimate user.</li>
    <li>Browse to a page that makes a request and submits a secret using a cookie.</li>
    <li>Submit request.</li>
    <li>In WebScarab, replace the secret in the cookie.&amp;nbsp;&amp;nbsp;For instance:<br /></li>
  </ol>
  <blockquote>
    <pre>GET http://www.example.com/transfer?amount=1000&amp;dest=1234 HTTP/1.1<br />Host: localhost<br />User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; es-ES; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14<br />Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5<br />Accept-Language: es-es,es;q=0.8,en-us;q=0.5,en;q=0.3<br />Accept-Encoding: gzip,deflate<br />Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7<br />Keep-Alive: 300<br />Proxy-Connection: keep-alive<br />Cookie: session-ID=1089eq14; secret=1240u9309u2efija<strong>XXXX</strong><br />&amp;nbsp;</pre>
  </blockquote>
  <p>Expected result:&amp;nbsp;&amp;nbsp;The server must disallow the action since the secret was changed in step 6.&amp;nbsp;&amp;nbsp;The test fails if the server allows the requested action.</p>
  <h1>Step 4:&amp;nbsp;&amp;nbsp;Fine-tune Test Case Data</h1>
  <p>The final step in testing for CSRF bugs is to fine-tune the test case data to cover different attack scenarios in an automated fashion.</p>
  <h2>
    <em>Fine-tune Test Case Data per Objective</em>
  </h2>
  <p>Attackers can exploit CSRF bugs to execute different kinds of attacks.&amp;nbsp;&amp;nbsp;It is important to test different payloads depending on the characteristics of your application. Common objectives of&amp;nbsp;CSRF attacks are:</p>
  <ul>
    <li>Make a fraudulent bank transaction</li>
    <li>Send a spoofed email</li>
    <li>Exploit an administrative application</li>
    <li>Force password resets</li>
    <li>Change router and firewall configurations</li>
  </ul>
  <p>&amp;nbsp;</p>
  <h2>
    <em>Automate test cases</em>
  </h2>
  <p>Finally, it is recommended that you add CSRF test cases to your automated testing. Make a list of all GET requests in URLs and POST requests and write your own script that makes the requests with different session tokens.&amp;nbsp;</p>
  <h1 style="margin: 0px; padding: 10px 0px 0px; font-size: 17px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);">Session Management Guidelines</h1>
  <ul style="margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small; background-color: rgb(255, 255, 255);">
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="13ad7fa3-199e-4957-9e4f-39bd931c9f1d">Protect Session IDs</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="5d296e90-a27c-424a-bfe1-5576490b50c2">Protect Session Cookies</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="f4218f89-d394-4162-8108-faef064f0f65">Set the Domain and Path Values of Session Cookies</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="0c4222a4-6028-4191-8dcb-761bbb4d2661">Set the Secure and HTTPOnly Flags on All Sensitive Cookies</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="b8e65bce-05bb-40b0-bc5b-ea6fe1e3ce96">Change Session IDs During Authentication</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="05a2cfa6-d015-446b-8c25-3cb13f10d396">Invalidate Sessions when Users Log Out</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="6ac43864-2644-4f33-bfb2-1366c5c3cb58">Make Inactive Sessions Time-out</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="19f2779c-14ec-43fb-8e8d-4505cb0801c9">Include Unique Tokens in HTTP Requests</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="7889a5ad-4e61-41da-97da-d40337050e17">Do Not Make Security Decisions Based on Client-Accessible Parameters</a>
      </b>
    </li>
  </ul>
  <h1 style="margin: 0px; padding: 10px 0px 0px; font-size: 17px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);">Session Management Checklists</h1>
  <ul style="margin: 10px 0px 10px 25px; padding: 0px 0px 0px 30px; font-family: 'Segoe UI', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: small; background-color: rgb(255, 255, 255);">
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="9dfbcbed-d897-4df4-b212-9d80fb26cbdf">Session IDs Are Protected</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="fe0a7400-2140-4e9e-bcc7-f185acce6974">Session Cookies are Protected</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="932cd357-dfd4-4f95-949b-e407b5299748">The Domain and Path Values of Session Cookies Are Strict</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="0679ade9-860f-42e0-b811-2a3434410a76">The Secure and HTTPOnly Flags Are Set on All Sensitive Cookies</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="3328e0df-abe9-4339-9eeb-fae6eb54042e">Session IDs Are Changed During Authentication</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="636b0c98-34d0-4aed-bf06-35f80a6e5551">Sessions Are Invalidated When Users Log Out</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="22c6bd72-94a7-4b86-9c9b-60d921fbd266">Inactive Sessions Time-out</a>
      </b>
    </li>
    <li style="margin: 0px; padding: 0px;">
      <b>
        <a href="178b26f6-689b-4a0e-a117-eadf1af3404c">Unique Tokens Are Included in HTTP Requests</a>
      </b>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>