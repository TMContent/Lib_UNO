<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>479b9ff4-f0fb-4870-8929-8b63b2b7d0b3</Id>
    <Id_History>479b9ff4-f0fb-4870-8929-8b63b2b7d0b3,1e735968-90bd-421c-857e-0161b3d00b50,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Force Reauthentication When Executing Critical Functionality</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>Scala Play</Technology>
    <Type>Code Example</Type>
    <DirectLink>Force Re-authentication When Executing Critical Functionality</DirectLink>
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Scala and Play Framework 2.1.0+


## Problem Example ##

The following code allows a user to change their credentials. Unfortunately, the code enters the new credentials into the credentials repository without verifying that it is the actual user changing the credentials.

~~~~    
def changePassword(user:String user, oldPass: String, newPass:String){ implicit request =>?
{
       // The application fails to re-authenticate the user
       // Verify that new password meets password requirements
       // Update the credential store with the new password
}
~~~~


## Solution Example ##

The following code allows a user to change their credentials. Before entering the new credentials into the credentials repository, the code verifies that it is the actual user doing the credentials change.

~~~~
def changePassword(user:String user, oldPass: String, newPass:String){ implicit request =>?
{
      // The application forces re-authentication
      if(!validateUser(user, oldPass))
      {
            return false;
      }
      // Verify that new password meets password requirements
      // Update the credential store with the new password
}
~~~~]]></Data>
  </Content>
</TeamMentor_Article>