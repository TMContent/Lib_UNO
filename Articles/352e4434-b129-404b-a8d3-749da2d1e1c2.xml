<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>352e4434-b129-404b-a8d3-749da2d1e1c2</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use Role-based Authorization DEL</Title>
    <Category />
    <Phase />
    <Technology>Ruby</Technology>
    <Type />
    <DirectLink />
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

- Ruby


## What to Do ##

Use role-based authorization to perform access control checks. Define the different user types required for the application and create specific roles. When authorizing access to a resource, implement strong access control measures and build the security checks on a per-role basis rather than on a per-user basis.


## Why ##

Specifying roles in order to group users into categories allows the efficient assignment of privileges. The technique provides a clear way to discover and manage least privileges for task execution. Specifying roles also provides a robust and flexible method to manage application users.


## When ##

If the application uses access control for its resources, then defining roles and performing role-based authorization checks is required as a security best practice.


## How ##

Follow these steps to use role-based access control (RBAC) as part of Defense in Depth (DiD). There are various approaches when enforcing role-based security with Ruby. The specifics of each step will be determined by the library, module, plugin, or gem used with Ruby. In addition, it may be useful to create a threat model to ensure that you correctly understand the implications of RBAC.

1. **Review current code for RBAC.** If the application is using an older programmatic class or method for RBAC, examine the implementation to understand how this may be made more secure by using a newer solution.

2. **Determine the application users.** Create a matrix to list the users of the applications. Enumerate the different types of users needed for the application. Use this matrix to group users according to the functions they need to perform in the application.
 
3. **Define the roles.** To define roles, understand how users will access application resources to perform necessary business functions. Make role definitions that can be used to accurately group users. Add the roles to a column in the matrix.

4. **Map the roles to resources.** Define which resources can be accessed by each role. Map the actions each role is authorized to perform with the corresponding system resources.

5. **Manage users and roles.** Assign users into their respective user roles. When this is done properly, the plugin or gem should enforce the security policy according to user roles instead of the actual user.
]]></Data>
  </Content>
</TeamMentor_Article>