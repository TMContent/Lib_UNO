<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>11a15f3a-7fe8-4e4c-be5e-309ab7227b3d</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Validate All Input</Title>
    <Category />
    <Phase>Implementation</Phase>
    <Technology>Technology Independent</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* All applications
* All system types

## What to Do ##

Validate all untrusted input using whitelist/positive input validation. Whitelist input validation allows only input that is explicitly defined as valid, as opposed to blacklist input validation, which filters out known bad input. Identify all types of input handled by the application and determine the valid format for each type, then add checks in code to make sure the data is valid before processing it.

## Why ##

Properly implemented input validation mitigates many types of injection vulnerabilities, such as Cross-Site Scripting and SQL injection. For native code applications, input validation can also mitigate memory management issues, such as Buffer Overflows.

## How ##

To validate all untrusted input using whitelist input validation:

1. **Identify all entry points for untrusted input.** Make a list of all possible sources of untrusted input in your application. For a web application, this includes: form fields, request parameters, cookies, headers, files and databases. For a rich client or a mobile application, this includes: keyboard input, files, databases and network connections. 

2. **Identify all types of input accepted by the application.** For each source of untrusted input on the list, define valid characters, length, format, and range (for numerical values).

3. **Define an input validation subsystem.** Define a set of validator functions to validate each type of input handled by the application. Input has to be validated on the server for client-server applications; it can be validated on the client-side as well, but not instead of on the server.

4. **(All input) Validate length.** Add code to all validators to check that the length of the untrusted input is valid. Checking length before using regular expressions helps prevent regular expression Denial-of-Service attacks.

5. **(Text input) Validate characters.** Add code to validators that handle text input to restrict the acceptable range of characters in text input using regular expressions.

6. **(Structured input) Validate format.** For validators that handle input that has a specific pattern, such as a date or a phone number, use regular expressions to make sure untrusted input matches the input type specified by the application. 

7. **(Numeric input) Validate range.** For validators for numeric input, add code to restrict the acceptable range of numerical input by comparing the input to the maximum and minimum acceptable values.

8. **(Optional) Reject and respond to known bad input.** This step does not add much actual security, but it might provide defense in depth. The input validation subsystem can check for known attack strings and respond to these likely attacks by doing things like logging detailed attacker information, alerting the administrator, blocking the attacker's IP address for some time, and displaying an error message to the attacker. 

9. **(Context-sensitive) Encode input.** If the input is going to be displayed back through a web browser, consider encoding it to prevent Cross-Site Scripting attacks before processing or storing it. Be careful not to introduce double-encoding issues by encoding this data again elsewhere in the code.


## Computer Based Training ##

Use the following Computer Based Training course for more information about data validation:

* [AWA 101 Fundamentals of Application Security](https://teamprofessor.absorbtraining.com/ninja/#/courses/course/127105) - This two-part course is ideal for security and development practitioners that want to understand software security risk and seek specific implementation guidance on how to build and deploy more secure software applications.  It starts off describing why software security is critical and the risk that software vulnerabilities represent, and proceeds to lay the foundation for secure software development by presenting specific security controls and principles that development teams can implement immediately to reduce software risk. 

*Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.*


## Code Examples ##

* [.NET](e59923e7-c2fb-4a75-8db7-a9a91e869f74)
* [Java JSP](c98695c5-cf02-44a1-96bf-1f8046b8ad9d)
* [Java JSF](0f49430b-2abe-408f-b046-89fa739f5d53)
* [Java SpringMVC](18ac74df-602b-4a58-8998-52f638f3a045)
* [Java Struts 1](d124abb1-e230-43ef-8762-1caa0dbb89ca)
* [Java Struts 2](2f917654-65a8-49c9-b000-c17f9765bf42)
* [Scala](b6795407-d01e-44ec-8aed-a440d388902b)
* [Ruby](bfe99a04-1254-47a9-acae-f3dd233f9315)
* [Ruby - Anchor Regular Expressions](15aa6cfc-9e95-44a6-8e6f-25bc2fac7911)


## Vulnerabilities ##

* [SQL Injection](c4914e51-2609-4edc-8133-31491f1b03c0)
* [Command Injection](94e52aca-06b6-4747-9bc9-f0149208f18c)
* [Cross-Site Scripting](683d33a8-7979-4307-8cf0-3a82457f9f47)


## Guides ##

* [Data Validation Guide](bf53d602-1d86-489c-858d-f5efb6424412)
]]></Data>
  </Content>
</TeamMentor_Article>