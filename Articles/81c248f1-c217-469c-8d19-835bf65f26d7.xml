<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>81c248f1-c217-469c-8d19-835bf65f26d7</Id>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use Strong Session IDs</Title>
    <Category />
    <Phase />
    <Technology />
    <Type />
    <DirectLink />
    <Tag />
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="markdown">
    <Data><![CDATA[##Use Strong Session IDs##


##Applies To##

- Ruby


##What to Do##

Use strong session IDs (identifiers) of sufficient length and entropy to prevent brute force attacks against sensitive data.


##Why##

Using cryptographically-strong session IDs prevents attackers from easily guessing session identifiers and taking over user sessions. If an attacker hijacks the session, they can perform the same functions as the logged-in user. This will lead to a compromise of the user account, or the entire application if the user is an administrator.

PCI PA-DSS requires strong cryptographic algorithms and keys (Requirement 5.2.3). Applications that use strong session IDs reduce the risk of being compromised and exposing sessions which contain sensitive data such as authentication and other protected information.


##When##

Use strong session identifiers when your application keeps session state and handles sensitive data.


##How##

Ruby uses strong session IDs by default. Make sure that your application uses the default settings or higher. If not, rewrite the application session state handling code to do so. Strong session IDs and session cookies will automatically be created.

Ruby creates a session ID which is a 32 byte long MD5 hash value. The default session id consists of the hash value of a random string generated by `secure_random`.

1. **Find where session ID is generated in the application.** Search *app/controllers/sessions_controller* for:

		def create
		  # ...
		  session[:current_user_id] = @user.id
		  # ...
		end

2. **Determine the length of strong session ID used.** Check *backend/app/model/session* for the session ID length value:

		SESSION_ID_LENGTH = 32

3. **Determine the cryptographic algorithm in use.** Locate and identify the function that produces a random string. This example from *actionpack/lib/action_dispatch/middleware/session/abstract_store* produces 16 random hex characters:

		def generate_sid
		  sid = SecureRandom.hex(16)
		  sid.encode!(Encoding::UTF_8)
		  sid
		end

4. **Rewrite code for strong session ID when necessary.** Rewrite the application if necessary to include missing code, or modify existing values as described above.
5. **Rewrite helper or plugin code for strong session IDs.** If other authentication and session activities are in use, check the methods and helper to ensure a strong session ID is in use. The program logic may be different than described above. Modify code as necessary for a strong session ID.


##Additional Resources##

- [How Rails sessions work](http://www.justinweiss.com/ "How Rails sessions work")
- [Log in, log out | Ruby on Rails Tutorial](https://www.railstutorial.org/ "Log in, log out | Ruby on Rails Tutorial")
- [Payment Card Industry (PCI) Payment Application Data Security Standard (PA-DSS)](https://www.pcisecuritystandards.org/ "PCI PA-DSS")]]></Data>
  </Content>
</TeamMentor_Article>