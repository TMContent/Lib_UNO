<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="743803076" Content_Hash="-1656453444">
  <Metadata>
    <Id>7e6881e3-2805-4727-98f0-2332993322f3</Id>
    <Id_History>7005dbc3-dd5a-4277-bffd-f1a2b8be6834,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Format String Vulnerability</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Format String Vulnerability</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>
    <ul>
      <li>Applications written in any languages which provide string methods that accept a format specifier</li>
    </ul>
  </p>
  <h1>Impact</h1>
  <ul>
    <li>Elevation of Privilege </li>
    <li>Read or Write sensitive information in memory </li>
    <li>Arbitrary code execution</li>
  </ul>
  <h1>Underlying Fault</h1>
  <ul>
    <li>Inserting untrusted user input into a format string parameter.</li>
  </ul>
  <h1>Description</h1>
  <p>Format string attacks are a class of vulnerabilities that can be used to crash a program or to execute harmful code. If unfiltered user input is used as the format string parameter in C functions that perform formatting, such as <i>printf()</i>, an attacker can use the %s, %x, and other format tokens to print data either from the stack or sometimes from other memory locations. Arbitrary data can be written anywhere in memory using the %n format token, used to specify that the number of bytes formatted should be written to the supplied pointer argument. More stack manipulation is required, but this argument can be inserted as part of a format string attack.</p>
  <h1>Example</h1>
  <p>
    <font face="'Courier New'">printf (varUserSuppliedData);</font>
  </p>
  <p>This will allow the user or attacker to provide the format specifier. Here, the attacker will be able to use format string tokens like %x and %n to compromise the security of the application.</p>
  <p>The correct way of writing this line of code is to provide the format specifier ourselves:</p>
  <p>
    <font face="'Courier New'">printf ("%s", varUserSuppliedData);</font>
  </p>
  <h1>Countermeasures</h1>
  <ul>
    <li>Hard code the format string. </li>
    <li>Format strings should not contain any user controlled data.</li>
  </ul>
  <ul>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on finding format string vulnerabilities, see <a href="http://www.owasp.org/index.php/Format_String_Testing_AoC">Format String Testing.</a></li>
    <li>For more information on the exploitation of format string vulnerabilities, see <a href="http://doc.bughunter.net/format-string/exploit-fs.html">Exploiting Format String Vulnerabilities</a></li>
    <li>For examples of Format String Vulnerabilities in non-C languages, see <a href="http://www.ddj.com/dept/security/197002914">Programming Language Format String Vulnerabilities</a></li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>