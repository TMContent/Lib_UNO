<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="667766258" Content_Hash="-1471810658">
  <Metadata>
    <Id>b0e0d92c-e292-4734-944c-77023fa453b3</Id>
    <Id_History>f2cba5fb-0016-491b-9c97-35d2e3e057c2,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>File Name And Path Manipulation Vulnerability</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>File Name And Path Manipulation Vulnerability</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>
    <ul>
      <li>All applications which use user input to construct the file name or path before accessing a file</li>
    </ul>
  </p>
  <h1>Impact</h1>
  <ul>
    <li>Command execution via command injection:</li>
    <li>Reading data from or writing to protected files. Some examples: <ul><li>Making the application load\overwrite another user's configuration or data file. </li><li>Reading from or writing to protected application or system log files.</li></ul></li>
  </ul>
  <h1>Underlying Fault</h1>
  <ul>
    <li>Lack of or improper validation of user supplied input.</li>
  </ul>
  <h1>Description</h1>
  <p>If user input is used to construct a filename or path it is possible for that input to be format so that an unintended or protected file is read, modified, or executed instead. This is commonly accomplished by exploiting canonicalization issues or alternate data streams. Command injection may also be possible and would allow the attacker to execute arbitrary commands. The impact of such vulnerabilities is compounded if the application is running with elevated privileges.</p>
  <h1>Countermeasures</h1>
  <ul>
    <li>Use proper file permissions to ensure that only authorized users can access sensitive files. </li>
    <li>If granular file permissions is not an option, then resolve file names and paths completely and verify them for access. </li>
    <li>Avoid the problem by designing software that does not need user input for filenames. One simple solution is to generate unique random filenames and use a dictionary to associate them with a user supplied label.</li>
  </ul>
  <ul>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more inofrmation on path manipulation, see the <a href="http://www.owasp.org/index.php/Path_Manipulation">OWASP Path Manipulation</a> article. </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>