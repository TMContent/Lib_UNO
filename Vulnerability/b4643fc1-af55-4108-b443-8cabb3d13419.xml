<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="877798336" Content_Hash="-122696765">
  <Metadata>
    <Id>b4643fc1-af55-4108-b443-8cabb3d13419</Id>
    <Id_History>d9d582a7-07b0-453d-be29-93fdb0cd4e09,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Command Injection Vulnerability</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Command Injection Vulnerability</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>All applications</li>
  </ul>
  <p />
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Elevation of Privilege:</strong> Command injection can allow for the execution of arbitrary commands and code by the attacker. </li>
  </ul>
  <h1>Underlying Fault</h1>
  <ul>
    <li>
      <strong>Failure to Validate User Input:</strong> Situations where control information and data are mixed create opportunities for command injection.</li>
  </ul>
  <h1>Description</h1>
  <p>Command injection problems are a subset of injection problems in which the process is tricked into either executing code or calling external processes of the attacker's choice through the injection of control information into the data stream.</p>
  <h1>Example</h1>
  <p>The following code is a web wrapper around the ImageMagick command <i>convert</i>:</p>
  <p>
    <font face="'Courier New'">&lt;?php<br />$filename=$_GET['file'];<br />$old_fmt=$_GET['old'];<br />$new_fmt=$_GET['new'];<br /><br />$cmd = 'convert $filename.$old_fmt $filename.$new_fmt 2&gt;&amp;1';<br />echo `$cmd`;<br />?&gt;</font>
  </p>
  <p>This could be used as part of an image upload page where a user posts an image, it's saved to the file system, then this call is performed asynchronously. There are multiple issues with such a flow, but the most critical is the command injection vulnerability it introduces. Consider what a URL might look like under normal operation:&amp;nbsp;</p>
  <p>
    <font face="'Courier New'">http://example.com/convert.php?file=kittycat&amp;old=png&amp;new=jpg</font>
  </p>
  <p>This would construct a command that would look like the following:</p>
  <p>
    <font face="'Courier New'">convert kittycat.png kittycat.jpg 2&gt;&amp;1</font>
  </p>
  <p>If the file exists the page would return nothing; if the file does not exist or there is another problem lack of error handling would disclose sensitive information about how the script works back to the user. Even worse than the information that an attacker could obtain through this is the fact that she can now execute arbitrary commands. Consider the following URL:</p>
  <p>
    <font face="'Courier New'">http://example.com/convert.php?file=kittycat&amp;old=png&amp;new=jpg%3bcat+%2fetc%2fpasswd</font>
  </p>
  <p>This would construct a much more dangerous command:</p>
  <p>
    <font face="'Courier New'">convert kittycat.png kittycat.jpg; cat /etc/passwd 2&gt;&amp;1</font>
  </p>
  <p>The <font face="Courier New">convert</font> command would likely silently succeed followed by the <font face="Courier New">cat</font> command which would dump the contents of <font face="Courier New">/etc/passwd</font> back to the attacker. Note that even though in this example the attacker sees feedback from the injection, methods exist for exploiting scenarios where injection displays no output. In such cases an attacker could, for example, use the <font face="Courier New">sleep</font> command to detect the existence of a blind injection issue. Once found, such a vulnerability is easily exploited.&amp;nbsp;</p>
  <p>Another example of this type of behavior can be seen with XSL, the style sheet language for XML. The primary purpose of XSL is to provide an easy and modular way to transform XML documents into other XML documents such as HTML. In particular, different XSL styles can be attached to the same XML and are sometimes supplied by the user. Microsoft extended the functionality of XSL to allow scripting code to be embedded in the style sheets with the<i> &lt;msxsl:script&gt;</i> tag. If an attacker has the ability to modify or replace the XSL style sheet in use, they can therefore inject any command to the system running the application simply by including it in the style sheet.</p>
  <div>
    <div>
      <div>
        <p>In many programming languages there is an <i>eval()</i> function that, as the name suggests, evaluates a string as an expression. Among the members of this list are the commonly used JavaScript, ASP, Python, Perl, Ruby, and PHP. Blurring the distinction between data and code presents a huge security risk; this case is no different. User input is sometimes used in eval() expressions allowing arbitrary code to be executed. Consider an example where <i>eval()</i> is used in a php to set variables equal to one based on GET parameters:</p>
        <p>
          <font face="'Courier New'">$turn_on=explode('|', $_GET['var']);<br />foreach ($turn_on as $var){<br />&amp;nbsp; &amp;nbsp; eval('$var = 1');<br />}</font>
        </p>
        <p>The developer may expect a URL that looks like the following:</p>
        <p>
          <font face="'Courier New'">http://example.com/set.php?turn_on=foo|bar|baz</font>
        </p>
        <p>
          This would result in evaluations that could be represented with the following code:
        </p>
        <p>
          <font face="'Courier New'">foo=1;<br />bar=1;<br />baz=1;</font>
        </p>
        <p>However, imagine instead that the user tried a different URL:</p>
        <p>
          <font face="'Courier New'">http://example.com/set.php?turn_on=foo%3d1%3bphpinfo()%3bbar|baz</font>
        </p>
        <p>The evaluated code would look a little different:</p>
        <p>
          <font face="'Courier New'">foo=1;&amp;nbsp;<br />phpinfo();<br />bar=1;<br />baz=1;</font>
        </p>
        <p>Rather than simply set variables to 1, the script now dumps to an attacker information about the installation and configuration of PHP on the system he is attacking. Any system command or external program in the path could be run in this fashion.</p>
        <h1>Countermeasures</h1>
        <ul>
          <li>
            <strong>Validate user input</strong>. Prevent commands from being included in data by validating input for type, length, range, and format. Whitelist acceptable input and reject everything else. Escape meta characters and be aware of canonicalization issues. Remember that data may be changed as it flows through the program, so validating at multiple stages is often appropriate. </li>
          <li>
            <strong>Do not use input data in commands directly</strong>. Clever formatting may be used so that the user's input is treated as its own separate command instead of as data. Therefore, validate the input and explicitly type it as data so that it cannot be interpreted as a command even if it contains one. </li>
          <li>
            <strong>Avoid using command interpreters</strong>. Although not always practical, using a well maintained API will have better results than invoking commands through an interpreter or external process.</li>
        </ul>
        <ul>
        </ul>
      </div>
    </div>
  </div>]]></Data>
  </Content>
</TeamMentor_Article>