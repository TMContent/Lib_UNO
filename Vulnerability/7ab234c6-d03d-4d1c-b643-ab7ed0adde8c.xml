<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="703371389" Content_Hash="76336545">
  <Metadata>
    <Id>7ab234c6-d03d-4d1c-b643-ab7ed0adde8c</Id>
    <Id_History>c9a807f1-d735-4545-b3ce-2b05af1e010a,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Canonicalization Vulnerability</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Canonicalization Vulnerability</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Any application that builds a file name, or path string, host name, url, or other resource identifier based on user input.</li>
  </ul>
  <p />
  <h1>Impact</h1>
  <ul>
    <li>Unauthorized access </li>
    <li>Information disclosure </li>
    <li>Elevation of privilege</li>
  </ul>
  <h1>Underlying Fault</h1>
  <ul>
    <li>Making security decisions based on the non-canonical form of resources strings supplied by untrusted input. Common examples of such resource strings include URLs, file names, and file paths.</li>
  </ul>
  <a name="Countermeasures">
  </a>
  <h1>Description</h1>
  <p>Different forms of input that resolve to the same standard name (the canonical name), is referred to as canonicalization. Code is particularly susceptible to canonicalization issues if it makes security decisions based on the name of a resource that is passed to the program as input. Files, paths, host names, and URLs are resource types that are vulnerable to canonicalization because in each case there are many different ways to represent the same name. </p>
  <h1>Countermeasures</h1>
  <ul>
    <li>Choose a standard 'canonical' representation for all strings that are used to make security decisions.</li>
    <li>Convert all such strings to their canonical form before making security decisions. For example: convert URL encoded strings into their unicode equivalent or convert relative paths to absolute paths for files and URL strings.</li>
    <li>If available, use common libraries for canonicalization. Only write your own canonicalization routines if absolutely necessary.</li>
    <li>Avoid input file names where possible and instead use absolute file paths that cannot be changed by the end user.</li>
    <li>Reject incorrectly encoded characters and do not accept alternate representations of standard characters.</li>
    <li>Check all resource via whitelist, not blacklist.</li>
  </ul>
  <ul>
  </ul>
  <ul>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      For more information about canonicalization, see&amp;nbsp;<a href="http://en.wikipedia.org/wiki/Canonicalization">http://en.wikipedia.org/wiki/Canonicalization</a></li>
  </ul>
  <h1>
  </h1>]]></Data>
  </Content>
</TeamMentor_Article>