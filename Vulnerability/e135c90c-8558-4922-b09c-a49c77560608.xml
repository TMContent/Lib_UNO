<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1515045410" Content_Hash="237349837">
  <Metadata>
    <Id>e135c90c-8558-4922-b09c-a49c77560608</Id>
    <Id_History>11d5a96d-2a2b-4f3b-91c7-993313e7040c,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Reflection Injection Vulnerability</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Reflection Injection Vulnerability</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Applications written in any language which supports reflection</li>
  </ul>
  <p />
  <h1>Impact</h1>
  <ul>
    <li>Execution of arbitrary code </li>
    <li>Bypass of security controls</li>
  </ul>
  <h1>Underlying Fault</h1>
  <ul>
    <li>Failure to validate input </li>
    <li>Validation of a library based solely on the name </li>
    <li>Loading libraries based on external input</li>
  </ul>
  <h1>Description</h1>
  <p>Reflection is a programming technique provided by an API that let's you treat class definitions themselves as objects. It gives the programmer a way to view and modify class members such as constructors, methods, interfaces, and fields at runtime. This is often used for the of development tools such as class browsers or GUI designers. However, if untrusted user input is used to manipulate objects at runtime, injection is possible. Attackers may be able to view or modify which classes are used or even run arbitrary code. </p>
  <h1>Example</h1>
  <p>A common example of this attack occurs when an attacker can inject code to provide the name of a less secure class that implements the same interface as what was meant to be instantiated. The Java code below creates and uses an HTTP connection based on a user supplied string that defines the type.</p>
  <p>
    <font face="'Courier New'">import java.lang.reflect.*;<br />import java.net.*;<br />class ExampleReflection<br />{<br />&amp;nbsp; &amp;nbsp;public static void main(String[] args){<br />&amp;nbsp; &amp;nbsp; &amp;nbsp; String mycon = "HttpsUrlConnection";<br />&amp;nbsp; &amp;nbsp; &amp;nbsp; // HttpsUrlConnection is a string provided by the user in some manner<br />&amp;nbsp; &amp;nbsp; &amp;nbsp; URLConnection c = (URLConnection)createConnection(mycon);<br />&amp;nbsp; &amp;nbsp; &amp;nbsp; c.connect();<br />&amp;nbsp; &amp;nbsp;}<br /><br /></font>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp;static Object createConnection(String name)</span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp;{<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; Object object = null;<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; try {<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Class classdef = Class.forName(name);<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;object = classdef.newInstance();<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; }<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; catch (InstantiationException e)&amp;nbsp;</span>
    <span style="font-family: 'Courier New'; ">{&amp;nbsp;</span>
    <span style="font-family: 'Courier New'; ">System.out.println(e);&amp;nbsp;</span>
    <span style="font-family: 'Courier New'; ">}<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; catch</span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp;(IllegalAccessException e)</span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp;{&amp;nbsp;</span>
    <span style="font-family: 'Courier New'; ">System.out.println(e);&amp;nbsp;</span>
    <span style="font-family: 'Courier New'; ">}<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; catch (ClassNotFoundException e)</span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp;{</span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp;System.out.println(e);</span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp;}<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp; &amp;nbsp; return object; &amp;nbsp;&amp;nbsp;<br /></span>
    <span style="font-family: 'Courier New'; ">&amp;nbsp; &amp;nbsp;}<br /></span>
    <span style="font-family: 'Courier New'; ">}</span>
  </p>
  <p>Now suppose an attacker could inject <i>HttpUrlConnection </i>into the string mycon instead of <i>HttpsUrlConnection</i>. Then instead of an SSL secured connection, an insecure connection will be created leaving the data in transit unprotected. The application does not know any different because both <i>HttpUrlConnection </i>and <i>HttpsUrlConnection </i>implement <i>UrlConnection</i>.</p>
  <h1>Countermeasures</h1>
  <ul>
    <li>Constrain input: Use vigorous whitelist style input checking of any input received from the user. </li>
    <li>Signed Certificates: Use strongly signed assemblies only, only load a class if it passes this check.</li>
  </ul>
  <ul>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on Reflection Injection, see the <a href="http://www.owasp.org/index.php/Reflection_injection">OWASP Reflection Injection</a> article. </li>
    <li>For more information on Java Reflection, see the <a href="http://java.sun.com/docs/books/tutorial/reflect/index.html">Java Reflection Documentation</a>. </li>
    <li>For more information on .NET Reflection, see <a href="http://msdn.microsoft.com/msdnmag/issues/07/06/CLRInsideOut/default.aspx">Reflections on Reflection</a>.</li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>