<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-398449967" Content_Hash="-720422532">
  <Metadata>
    <Id>660311a9-a81f-4717-ad71-75b4cb5fdafd</Id>
    <Id_History>8597ce57-0b72-4d9b-ad7c-91dbd97f6219,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>LDAP Injection Vulnerability</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>LDAP Injection Vulnerability</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>
    <ul>
      <li>Applications using LDAP</li>
    </ul>
  </p>
  <h1>Impact</h1>
  <ul>
    <li>Unintentional information disclosure </li>
    <li>Elevation of privilege through manipulation of query results </li>
    <li>Corruption of LDAP data store through manipulation of updates</li>
  </ul>
  <h1>Underlying Fault</h1>
  <ul>
    <li>Building dynamic LDAP queries using untrusted input </li>
  </ul>
  <h1>Description</h1>
  <p>LDAP injection is a technique for exploiting applications that use input from users to query an LDAP directory. Lightweight Directory Access Protocol (LDAP) is a widely used protocol for accessing directory services. Directories provide a set of attributes about people that are organized in a hierarchal manner, for example the phone directory. </p>
  <p>In principle this is exactly the same attack as SQL or XML injection; the only difference is the query language used and the database accessed. Because directories are primarily used to maintain information about people, LDAP injection has the potential to view, modify, or remove personal information about anyone in the directory. The most common mistake is creating filter statements dynamically without validating user input.</p>
  <h1>Example</h1>
  <h3>
    <strong>Vulnerable Code</strong>
  </h3>
  <p>The following PHP code connects to an LDAP server on localhost and searches for records where the surname equals the value supplied by the user.</p>
  <p>
    <font face="'Courier New'">&lt;?php$ds=ldap_connect("localhost");<br />&amp;nbsp;if ($ds)<br />&amp;nbsp;{<br />&amp;nbsp; &amp;nbsp; $ok=ldap_bind($ds);<br />&amp;nbsp;// anonymously bind for read-only access<br />&amp;nbsp; &amp;nbsp; $surname=$_GET['surname'];<br />&amp;nbsp; &amp;nbsp; $filter = "(sn=" . $surname . ")";<br />&amp;nbsp; &amp;nbsp; $sr=ldap_search($ds, "o=My Company, c=US", $filter);<br />&amp;nbsp; &amp;nbsp; $info = ldap_get_entries($ds, $sr);<br />&amp;nbsp; &amp;nbsp; echo "&lt;p&gt;There are " . $info["count"] . " entries for that search:&lt;p&gt;";<br />&amp;nbsp; &amp;nbsp; for ($i=0; $i&lt;$info["count"]; $i++) {<br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo "common name: " . $info[$i]["cn"][0] . "&lt;br /&gt;";<br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo "telephone: " . $info[$i]["telephoneNumber"][0] . "&lt;br /&gt;";<br />&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; echo "email: " . $info[$i]["mail"][0] . "&lt;br /&gt;&lt;hr /&gt;";<br />&amp;nbsp; &amp;nbsp; }<br />&amp;nbsp; &amp;nbsp; ldap_close($ds);<br />}<br />&amp;nbsp;else {<br />&amp;nbsp; &amp;nbsp; echo "&lt;h4&gt;connection error&lt;/h4&gt;";<br />}<br />?&gt;</font>
  </p>
  <p>If this code is in index.php at teammentorexample.com then the following URL would return all records where surname is Smith.</p>
  <p>
    <font face="'Courier New'">http://example.com/index.php?surname=Smith</font>
  </p>
  <h3>
    <strong>Attack Example</strong>
  </h3>
  <p>Now suppose an attacker entered:</p>
  <p>
    <font face="'Courier New'">x)(|(cn=*</font>
  </p>
  <p>instead of Smith. That is, the attacker could do the following:</p>
  <p>
    <font face="'Courier New'">http://example.com/index.php?surname=x)(|(cn=*</font>
  </p>
  <p>Examining a few lines of the above code reveals that this would return a list of everyone in the directory.</p>
  <p>
    <font face="'Courier New'">$sirname=$_GET['surname'];<br />// $surname = x)(|(cn=*)<br />$filter = "(sn=" . $surname . ")";<br />// $filter = (sn=x)(|cn=*)<br />$sr=ldap_search($ds, "o=My Company, c=US", $filter);<br />// this reads: search My Companies directory for people<br />//      having surname equal to x or anything</font>
  </p>
  <h1>Countermeasures</h1>
  <ul>
    <li>Untrusted input should be validated against an inclusion list before use (e.g., RegEx pattern, primitive type casting, domain constraint, etc.)</li>
  </ul>
  <ul>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on LDAP Injection, see the <a href="http://www.owasp.org/index.php/Interpreter_Injection#LDAP_Injection">OWASP LDAP Injection</a> article. </li>
    <li>For more information on LDAP, see the <a href="http://en.wikipedia.org/wiki/Ldap">Wikipedia LDAP</a> article. </li>
    <li>For a detailed LDAP reference, see <a href="http://www.ietf.org/rfc/rfc2251.txt">RFC 2251</a>.</li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>