<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1905863927" Content_Hash="1131462436">
  <Metadata>
    <Id>5f5f6231-33cf-44ea-ab01-821074c50d37</Id>
    <Id_History>c0f27e27-03e8-4c1c-a145-ec7cba98f9ba,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Double Encoding Vulnerability</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology> Any</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Double Encoding Vulnerability</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Web applications</li>
  </ul>
  <p />
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Remote Code Execution</strong>: This attack is often used in conjunction with XSS or SQL injection to bypass security checks. </li>
    <li>
      <strong>Directory Traversal</strong>: by encoding '<i>../</i>' and variants, security checks may be bypassed and later interpreted by the server or file system allowing the attacker to access protected files.</li>
  </ul>
  <h1>Underlying Fault</h1>
  <ul>
    <li>Failure to validate user input for encoded input. </li>
    <li>Trusting data or failing to completely decode and check retrieved data from a shared data store.</li>
  </ul>
  <h1>Description</h1>
  <p>By doubly encoding input, an attacker may be able to bypass security checks that are only decoded once. The singly decoded input will pass security checks and allow the malicious input to be passed to backend servers where it will be fully decoded and interpreted as input.</p>
  <h1>Example</h1>
  <p />
  <table>
    <tbody>
      <tr>
        <td>
          <b>Malicious String</b>
        </td>
        <td>
          <b>Technology</b>
        </td>
        <td>
          <b>Single Encoded Version</b>
        </td>
        <td>
          <b>Double Encoded Version</b>
        </td>
      </tr>
      <tr>
        <td>' (single quote)</td>
        <td>SQL</td>
        <td>%27</td>
        <td>%2527</td>
      </tr>
      <tr>
        <td>..\</td>
        <td>Directory Traversal</td>
        <td>%2E%2E%2F</td>
        <td>..%252F .. %%35c ..%%35%63 ..%25%35%63 ..etc </td>
      </tr>
      <tr>
        <td>alert("XSS")</td>
        <td>Javascript</td>
        <td>\u0061\u006C\u0065\u0072\u0074\u0028\u0022\u0058\u0053\u0053\u0022\u0029</td>
        <td>\u005C\u0075\u0030\u0030\u0036\u0031\u005C\u0075\u0030\u0030\u0036\u0043\u005C\u0075\u0030\u0030\u0036\u0035\u005C\u0075\u0030\u0030\u0037\u0032\u005C\u0075\u0030\u0030\u0037\u0034\u005C\u0075\u0030\u0030\u0032\u0038\u005C\u0075\u0030\u0030\u0032\u0032\u005C\u0075\u0030\u0030\u0035\u0038\u005C\u0075\u0030\u0030\u0035\u0033\u005C\u0075\u0030\u0030\u0035\u0033\u005C\u0075\u0030\u0030\u0032\u0032\u005C\u0075\u0030\u0030\u0032\u0039\u000A</td>
      </tr>
      <tr>
        <td>&lt;script&gt;gotcha!&lt;/script&gt;</td>
        <td>HTML</td>
        <td>&lt;script&lt;gotcha!&lt;/script&lt;</td>
        <td>&lt;script&gt;gotcha!&lt;/script&gt;</td>
      </tr>
    </tbody>
  </table>
  <h1>Countermeasures</h1>
  <ul>
    <li>Constrain input: Use vigorous white-list style checking on any user input. </li>
    <li>Fully decode: Ensure all input is fully decoded using methods at the backend server before operating on received data.</li>
  </ul>
  <ul>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on web based encoding, see <a href="http://www.webreference.com/javascript/reference/core/ident.html">Writing Secure Code</a></li>
    <li>For more information on URL encoding related attacks, see <a href="http://people.w3.org/rishida/scripts/uniview/conversion.php ">URL Encoded Attacks</a></li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>