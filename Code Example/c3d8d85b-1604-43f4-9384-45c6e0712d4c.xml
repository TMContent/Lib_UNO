<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="4217190" Content_Hash="-1114621390">
  <Metadata>
    <Id>c3d8d85b-1604-43f4-9384-45c6e0712d4c</Id>
    <Id_History>c3d8d85b-1604-43f4-9384-45c6e0712d4c,60f90b72-8051-479b-bc99-e7427196d4a9,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Perform XML Schema Validation of a Web Service Payload</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 4.0</Technology>
    <Type>Code Example</Type>
    <DirectLink>Perform XML Schema Validation of a Web Service Payload</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <ul>
    <li>ASP.NET 4.0</li>
  </ul>
  <h1>Summary</h1>
  <p>The purpose of this code sample is to demonstrate a technique to securely validate the XML payload received during a web service web method call using .NET.</p>
  <h1>Objectives</h1>
  <ul>
    <li>Mitigate data validation induced vulnerabilities through use of XML schema validation which employs strong validation using regular expression patterns on expected data. </li>
    <li>Improve application efficiency by first requiring validation of XML payload prior to executing business logic.</li>
  </ul>
  <h1>Scenarios</h1>
  <ul>
    <li>Application component needs to access functionality that only exists in a different runtime component. </li>
    <li>Application occasionally needs access to privileged functionality but wants to use a low-privileged security context for enhanced overall security.</li>
  </ul>
  <h1>Solution Example</h1>
  <p>
    <strong>Custom Web method for performing some action on an XML String Blob</strong>
  </p>
  <pre>// The following private members must be defined for this example<br />private int validationErrCnt = 0;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />private string lastError = "";<br /><br />[WebMethod]<br />public bool ProcessValue(string strXML)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; string connectionString =<br />     "Initial Catalog=snippets;Data Source=winxp\\sqlexpress;Integrated Security=SSPI;";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlConnection cn = New SqlConnection(connectionString);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; bool retval = false;<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp; try {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an XmlReaderSettings object since&amp;nbsp; we'll need to add our schema to it<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlReaderSettings xrs = new XmlReaderSettings();<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a schema set which we'll use to validate our XML Document against<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlSchemaSet xset = new XmlSchemaSet();<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Read in our schema under the web root.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlReader xmlschemareader =<br />          new XmlTextReader(HttpContext.Current.Request.PhysicalApplicationPath + "<a href="file://xsd//Userschema.xsd">\\xsd\\Userschema.xsd</a>");<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Attribute the XML schema with our schema set<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xset.Add(null, xmlschemareader);<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Finally attach our XML schema set to the reader settings<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xrs.Schemas.Add(xset);<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // We define a Validation Event Handler<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xrs.ValidationEventHandler += new ValidationEventHandler(ValidationEventHandler);<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // We want to report warnings as well as errors<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xrs.ValidationFlags = xrs.ValidationFlags | XmlSchemaValidationFlags.ReportValidationWarnings;<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Our validation type should be set to schema so we enforce the schema on the document<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xrs.ValidationType = ValidationType.Schema;<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create our XML reader and associate our reader settings<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StringReader sreader = new StringReader(strXML);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlReader xmlread = XmlReader.Create(sreader, xrs);<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Lastly load the document which forces a schema validation to be performed in the process<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlDocument xmldoc = new XmlDocument();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xmldoc.Load(xmlread);<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // If our event returns errors (and warnings) throw a new exception with our last error as the message<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (validationErrCnt &gt; 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // FAILED VALIDATION: If we encountered errors while validating the XML<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception(lastError);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // PASSED VALIDATION: Otherwise process our request as normal<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlCommand sqlcmd = new SqlCommand("XMLValidationSample",cn);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlParameter sqlparam = new SqlParameter("@strxml", SqlDbType.VarChar, strXML.Length);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlParameter outparam = new SqlParameter("@retval", SqlDbType.Int);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; outparam.Direction = ParameterDirection.ReturnValue;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlparam.Value = strXML;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.CommandType = CommandType.StoredProcedure;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.Parameters.Add(sqlparam);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.Parameters.Add(outparam);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cn.Open();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.ExecuteNonQuery();<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if( Convert.ToInt16(outparam.Value) &gt; 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />         &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; retval = true;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp; catch (Exception ex)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Replace following throw with User supplied exception handling code: <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp; Log exception and perform graceful error handling<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception("Error validating XML: " + ex.Message);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br /><br /><br />    finally{<br />        cn.Close();<br /><br />    }<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // return result<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return retval;<br />} </pre>
  <p>
    <strong>Custom Defined XML Validation Event Handler</strong>
  </p>
  <pre>void ValidationEventHandler(object sender, System.Xml.Schema.ValidationEventArgs args)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; validationErrCnt++;<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (args.Severity.Equals(XmlSeverityType.Warning))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lastError = "Warning: " + args.Message;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br /><br />&amp;nbsp;&amp;nbsp;&amp;nbsp; else if (args.Severity.Equals(XmlSeverityType.Error))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lastError = "Error: " + args.Message;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />}</pre>
  <p>
    <strong>Sample XML Schema with pattern match validators</strong>
  </p>
  <pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;<br />&lt;xs:schema id="UserSchema" targetNamespace="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>" <br />	elementFormDefault="qualified" xmlns="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>"<br />	 xmlns:mstns="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>" xmlns:xs="<a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a>"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="Users"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:complexType&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:sequence&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element minOccurs="1" maxOccurs="100" name="User"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:complexType&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:sequence&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="username" type="usernamestring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="password" type="passwordstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="name" type="namestring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element maxOccurs="2" name="streetaddress" type="addressstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="city" type="namestring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="state" type="statevalue" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="postalcode" type="postalstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="phone" type="phonestring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="ssn" type="ssnstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="emailaddress" type="emailstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element minOccurs="0" name="url" type="xs:anyURI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:sequence&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:complexType&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:element&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:sequence&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:complexType&gt;<br />&amp;nbsp; &lt;/xs:element&gt;<br />&amp;nbsp; &lt;xs:simpleType name="usernamestring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Allows word characters [A-Za-z0-9_], single quote, dash and period<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; must be at least two characters long and less than 16 --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="2" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="16" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^[\w-'\.]{2,16}$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="passwordstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Allows word characters [A-Za-z0-9_], single quote, dash and period<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; must be at least two characters long and less than 16 --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="8" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="16" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^.*(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*<br />			[`~!@#\$%\^\&amp;\*\(\)-_\=\+\[\{\]\}\\\|;:',&lt;\.&gt;/?]).*$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="namestring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Names must be at least 2 characters, no more than 128 characters, and consist of<br />&amp;nbsp;&amp;nbsp; alphabetic characters, and may contain hyphens, single quotes, periods and spaces --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="2" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="128" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^[a-zA-Z-'\.\s]{2,128}$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="addressstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Since so many different types of address formats we'll do a match against a series <br />&amp;nbsp;&amp;nbsp; of digits (potentially containing punctuation, followed by a series of characters <br />&amp;nbsp;&amp;nbsp; representing the street name and then potentially a type of street and unit number --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^\d{1,3}.?\d{0,3}\s[a-zA-Z]{2,30}(\s[a-zA-Z]{2,15})?([#\.0-9a-zA-Z]*)?$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="statevalue"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- States must be one of our predefined enumeration types and consist of exactly 2 characters --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:length value="2" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="AL" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="AK" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="AR" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="AZ" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="CA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="CO" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="CT" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="DE" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="DC" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="FL" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="GA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="HI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="ID" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="IL" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="IN" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="IA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="KS" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="KY" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="LA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="ME" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MD" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MN" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MS" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MO" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MT" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NE" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NV" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NH" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NJ" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NM" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NY" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NC" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="ND" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="OH" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="OK" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="OR" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="PA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="RI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="SC" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="SD" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="TN" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="TX" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="UT" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="VT" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="VA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="WA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="WV" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="WI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="WY" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="postalstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- The following US postal code format allows ZIP (5 digit) or ZIP+4 formats<br />&amp;nbsp;&amp;nbsp; as a single string or separated by hyphens --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^\d{5}[-]?(\d{4})?$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="5" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="10" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="ssnstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- SSNs consist of 9 digits but may contain an optional 2 hyphens --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="9" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="11" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^\d{3}[-]?\d{2}[-]?\d{4}$$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="phonestring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- The following pattern defines a US formatted telephone number --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="10" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="32" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="emailstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Allows common email address that can start with a alphanumeric char and contain word, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; hyphen and period characters followed by a domain name meeting the same criteria followed <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; by a alpha suffix between 2 and 9 character long --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="7" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="256" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&lt;/xs:schema&gt;</pre>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>