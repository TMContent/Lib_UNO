<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1246077645" Content_Hash="-1095364289">
  <Metadata>
    <Id>3b0fdc79-86a3-4ced-8bdd-5eefeb351dc4</Id>
    <Id_History>a97b33d2-9587-4190-aa83-3d0bf9ecf40d,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Scoping Data Retrieval from the Request Object</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Code Example</Type>
    <DirectLink>Scoping Data Retrieval from the Request Object</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jonathan Bailey, Prashant Bansode</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <ul>
    <li>ASP.NET 2.0 </li>
    <li>C# </li>
  </ul>
  <h1>Summary</h1>
  <p>The purpose of this code snippet is to illustrate how to securely scope calls to the ASP.NET Request object when retrieving user input data. Secure scoping of the Request object ensures that input used by the application is obtained from the intended source. </p>
  <h1>Objectives</h1>
  <ul>
    <li>Protect against potential data input attacks through specific designation of data source </li>
    <li>Make use of additional HTTP request data not normally captured within ASP.NET objects </li>
  </ul>
  <h1>Scenarios</h1>
  <ul>
    <li>In conjunction with ViewState encryption and integrity checks to protect against user tampering of CGI data </li>
    <li>Application obtains user input as CGI data directly from the Request object instead of from server-side variables </li>
    <li>Application makes use of client certificates for user identity management and/or authentication </li>
    <li>Application makes use of data from HTTP headers </li>
  </ul>
  <h1>Solution Example</h1>
  <p>Several methods for obtaining Request object data follow:</p>
  <pre>public static string GetQueryStringData(HttpRequest Request, string arg)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Obtain input passed using HTTP GET<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return(Request.QueryString[arg]);<br />}</pre>
  <pre>
    <br />public static string GetPostData(HttpRequest Request, string arg)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Obtain input passed using HTTP POST<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return(Request.Form[arg]);<br />}<br />public static HttpCookie GetHTTPCookie(HttpRequest Request, string arg)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Obtain input passed as an HTTP Cookie<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return(Request.Cookies[arg]);<br />}</pre>
  <pre>
    <br />public static string GetClientCertData(HttpRequest Request, string attr)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Obtain a server variable or HTTP Request Header, such as Content Length<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return(Request.ServerVariables[attr]);<br />}</pre>
  <pre>
    <br />public static string GetEnvData(HttpRequest Request, string arg)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Obtain a server variable or HTTP Request Header, such as Content Length<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return(Request.ServerVariables[arg]);<br />}</pre>
  <h1>Problem Example</h1>
  <p>The following example demonstrates an unscoped call to the Request object to obtain user input.</p>
  <pre>string data = Request['argname'];</pre>
  <ul>
    <li>If the application anticipates input to be passed from POST data, specifying 'argname' in the query string will result in GET data being retrieved by the application in place of the expected POST data. </li>
  </ul>
  <h1>Test Case</h1>
  <p>The following classes must be included in any project making use of the sample code provided above:</p>
  <pre>using System.Web;</pre>
  <p>An example ASP.NET aspx test page is provided below for use with the methods defined above.</p>
  <pre>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</pre>
  <pre>
    <br />&lt;script language="C#" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; string sUserText = GetQueryStringData(Request, "TextBox");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sUserText = sUserText.Trim();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.Text.RegularExpressions.Regex wordPattern = new System.Text.RegularExpressions.Regex("[A-Za-z0-9]*");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (wordPattern.IsMatch(sUserText))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.myLabel.Text = Server.HtmlEncode(sUserText);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&lt;/script&gt;</pre>
  <pre>
    <br />&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;</pre>
  <pre>&lt;head id="Head1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;title&gt;Request Object Example&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" method="Get" runat="server"&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type="text" name="TextBox"/&gt; &lt;br/&gt;&lt;br/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Label ID="myLabel" runat="server" Text="Insert Text Above to See Here"&gt;&lt;/asp:Label&gt;&lt;br/&gt;&lt;br/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type="submit" name="textButton" value="Submit"/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;</pre>
  <h1>Expected Result</h1>
  <p>N/A (dependent upon input)</p>
  <h1>More Information</h1>
  <p>The data returned by Request('var') can come from any of the following sources, in the order listed. </p>
  <ul>
    <li>Query String </li>
    <li>Form </li>
    <li>Cookies </li>
    <li>Client Certificate </li>
    <li>Server Variables/HTTP Headers </li>
  </ul>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>