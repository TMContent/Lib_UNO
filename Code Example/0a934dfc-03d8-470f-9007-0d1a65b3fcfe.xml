<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1246329521" Content_Hash="1653914465">
  <Metadata>
    <Id>0a934dfc-03d8-470f-9007-0d1a65b3fcfe</Id>
    <Id_History>23e976a7-96a9-4973-91ea-cdb481e9cac0,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Perform XML Schema Validation of Web Service Payload</Title>
    <Category>Web Services</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Code Example</Type>
    <DirectLink>Perform XML Schema Validation of Web Service Payload</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, George Gal, Prashant Bansode</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET Framework 2.0 
</li>
    <li>C# 
</li>
    <li>Web Services</li>
  </ul>
  <h1>Summary</h1>
  <p>The purpose of this code sample is to demonstrate a technique to securely validate the XML payload received during a web service web method call using .NET.</p>
  <h1>Objectives</h1>
  <ul>
    <li>Mitigate data validation induced vulnerabilities through use of XML schema validation which employs strong validation using regular expression patterns on expected data 
</li>
    <li>Improve application efficiency by first requiring validation of XML payload prior to executing business logic</li>
  </ul>
  <h1>Scenarios</h1>
  <ul>
    <li>Application component needs to access functionality that only exists in a different runtime component 
</li>
    <li>Application occasionally needs access to privileged functionality but wants to use a low-privileged security context for enhanced overall security</li>
  </ul>
  <h1>Solution Example</h1>
  <p>
    <strong>Custom Web method for performing some action on an XML String Blob</strong>
  </p>
  <pre>// The following private members must be defined for this example<br />private int validationErrCnt = 0;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />private string lastError = "";<br />[WebMethod]</pre>
  <pre>
    <br />public bool ProcessValue(string strXML)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; string connectionString = "Initial Catalog=snippets;Data Source=winxp\\sqlexpress;Integrated Security=SSPI;";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlConnection cn = New SqlConnection(connectionString);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; bool retval = false;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; try {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an XmlReaderSettings object since&amp;nbsp; we'll need to add our schema to it<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlReaderSettings xrs = new XmlReaderSettings();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a schema set which we'll use to validate our XML Document against<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlSchemaSet xset = new XmlSchemaSet();</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Read in our schema under the web root.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlReader xmlschemareader = new XmlTextReader(HttpContext.Current.Request.PhysicalApplicationPath + "\\xsd\\Userschema.xsd");</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Attribute the XML schema with our schema set<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xset.Add(null, xmlschemareader);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Finally attach our XML schema set to the reader settings<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xrs.Schemas.Add(xset);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // We define a Validation Event Handler<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xrs.ValidationEventHandler += new ValidationEventHandler(ValidationEventHandler);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // We want to report warnings as well as errors<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xrs.ValidationFlags = xrs.ValidationFlags | XmlSchemaValidationFlags.ReportValidationWarnings;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Our validation type should be set to schema so we enforce the schema on the document<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xrs.ValidationType = ValidationType.Schema;</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create our XML reader and associate our reader settings<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StringReader sreader = new StringReader(strXML);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlReader xmlread = XmlReader.Create(sreader, xrs);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Lastly load the document which forces a schema validation to be performed in the process<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlDocument xmldoc = new XmlDocument();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xmldoc.Load(xmlread);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // If our event returns errors (and warnings) throw a new exception with our last error as the message<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (validationErrCnt &gt; 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // FAILED VALIDATION: If we encountered errors while validating the XML</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception(lastError);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // PASSED VALIDATION: Otherwise process our request as normal</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlCommand sqlcmd = new SqlCommand("XMLValidationSample",cn);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlParameter sqlparam = new SqlParameter("@strxml", SqlDbType.VarChar, strXML.Length);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlParameter outparam = new SqlParameter("@retval", SqlDbType.Int);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; outparam.Direction = ParameterDirection.ReturnValue;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlparam.Value = strXML;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.CommandType = CommandType.StoredProcedure;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.Parameters.Add(sqlparam);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.Parameters.Add(outparam);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cn.Open();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.ExecuteNonQuery();</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if( Convert.ToInt16(outparam.Value) &gt; 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; retval = true;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cn.Close();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; catch (Exception ex)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Replace following throw with User supplied exception handling code: <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp; Log exception and perform graceful error handling<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception("Error validating XML: " + ex.Message);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // return result<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return retval;<br />} </pre>
  <p>
    <strong>Custom Defined XML Validation Event Handler</strong>
  </p>
  <pre>void ValidationEventHandler(object sender, System.Xml.Schema.ValidationEventArgs args)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; validationErrCnt++;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (args.Severity.Equals(XmlSeverityType.Warning))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lastError = "Warning: " + args.Message;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; else if (args.Severity.Equals(XmlSeverityType.Error))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lastError = "Error: " + args.Message;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />}</pre>
  <p>
    <strong>Sample XML Schema with pattern match validators</strong>
  </p>
  <pre>&lt;?xml version="1.0" encoding="utf-8"?&gt;</pre>
  <pre>&lt;xs:schema id="UserSchema" targetNamespace="http://tempuri.org/XMLSchema.xsd" <br />	elementFormDefault="qualified" xmlns="http://tempuri.org/XMLSchema.xsd"<br />	 xmlns:mstns="http://tempuri.org/XMLSchema.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="Users"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:complexType&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:sequence&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element minOccurs="1" maxOccurs="100" name="User"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:complexType&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:sequence&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="username" type="usernamestring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="password" type="passwordstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="name" type="namestring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element maxOccurs="2" name="streetaddress" type="addressstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="city" type="namestring" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="state" type="statevalue" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="postalcode" type="postalstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="phone" type="phonestring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="ssn" type="ssnstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element name="emailaddress" type="emailstring" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:element minOccurs="0" name="url" type="xs:anyURI" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:sequence&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:complexType&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:element&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:sequence&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:complexType&gt;<br />&amp;nbsp; &lt;/xs:element&gt;</pre>
  <pre>&amp;nbsp; &lt;xs:simpleType name="usernamestring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Allows word characters [A-Za-z0-9_], single quote, dash and period<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; must be at least two characters long and less than 16 --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="2" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="16" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^[\w-'\.]{2,16}$" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="passwordstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Allows word characters [A-Za-z0-9_], single quote, dash and period<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; must be at least two characters long and less than 16 --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="8" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="16" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^.*(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*<br />			[`~!@#\$%\^\&amp;\*\(\)-_\=\+\[\{\]\}\\\|;:',&lt;\.&gt;/?]).*$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="namestring"&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Names must be at least 2 characters, no more than 128 characters, and consist of<br />&amp;nbsp;&amp;nbsp; alphabetic characters, and may contain hyphens, single quotes, periods and spaces --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="2" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="128" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^[a-zA-Z-'\.\s]{2,128}$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;</pre>
  <pre>&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="addressstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Since so many different types of address formats we'll do a match against a series <br />&amp;nbsp;&amp;nbsp; of digits (potentially containing punctuation, followed by a series of characters <br />&amp;nbsp;&amp;nbsp; representing the street name and then potentially a type of street and unit number --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^\d{1,3}.?\d{0,3}\s[a-zA-Z]{2,30}(\s[a-zA-Z]{2,15})?([#\.0-9a-zA-Z]*)?$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;</pre>
  <pre>&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="statevalue"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- States must be one of our predefined enumeration types and consist of exactly 2 characters --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:length value="2" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="AL" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="AK" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="AR" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="AZ" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="CA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="CO" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="CT" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="DE" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="DC" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="FL" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="GA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="HI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="ID" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="IL" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="IN" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="IA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="KS" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="KY" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="LA" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="ME" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MD" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MN" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MS" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MO" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="MT" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NE" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NV" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NH" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NJ" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NM" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NY" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="NC" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="ND" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="OH" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="OK" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="OR" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="PA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="RI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="SC" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="SD" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="TN" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="TX" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="UT" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="VT" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="VA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="WA" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="WV" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="WI" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:enumeration value="WY" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="postalstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- The following US postal code format allows ZIP (5 digit) or ZIP+4 formats<br />&amp;nbsp;&amp;nbsp; as a single string or separated by hyphens --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^\d{5}[-]?(\d{4})?$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="5" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="10" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;</pre>
  <pre>&amp;nbsp; &lt;xs:simpleType name="ssnstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- SSNs consist of 9 digits but may contain an optional 2 hyphens --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="9" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="11" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^\d{3}[-]?\d{2}[-]?\d{4}$$" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="phonestring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- The following pattern defines a US formatted telephone number --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}$" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="10" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="32" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;<br />&amp;nbsp; &lt;xs:simpleType name="emailstring"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:restriction base="xs:string"&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;!-- Allows common email address that can start with a alphanumeric char and contain word, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; hyphen and period characters followed by a domain name meeting the same criteria followed <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; by a alpha suffix between 2 and 9 character long --&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:pattern value="^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:minLength value="7" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;xs:maxLength value="256" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/xs:restriction&gt;<br />&amp;nbsp; &lt;/xs:simpleType&gt;</pre>
  <pre>&lt;/xs:schema&gt;</pre>
  <h1>Problem Example</h1>
  <p>The following example demonstrates the use of unvalidated XML received by a web service method.</p>
  <pre>[WebMethod]<br />public bool ProcessValueNoValidation(string strXML)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; try<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create our XML reader and associate our reader settings<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StringReader sreader = new StringReader(strXML);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlReader xmlread = XmlReader.Create(sreader);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Lastly load the document which forces a schema validation to be performed in the process<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XmlDocument xmldoc = new XmlDocument();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xmldoc.Load(xmlread);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlCommand sqlcmd = new SqlCommand("XMLValidationSample", cn);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlParameter sqlparam = new SqlParameter("@strxml", SqlDbType.VarChar, strXML.Length);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlParameter outparam = new SqlParameter("@retval", SqlDbType.Int);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; outparam.Direction = ParameterDirection.ReturnValue;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlparam.Value = strXML;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.CommandType = CommandType.StoredProcedure;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.Parameters.Add(sqlparam);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.Parameters.Add(outparam);</pre>
  <pre>
    <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cn.Open();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sqlcmd.ExecuteNonQuery();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cn.Close();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; } catch (Exception ex)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception(ex.Message);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return true;<br />}</pre>
  <ul>
    <li>No XML schema validation prior to passing the strXML string to SQL stored procedure 
</li>
    <li>Depending on stored procedure implementation SQL injection may be possible (particularly in instances where dynamic SQL is constructed from XML element values and passed as arguments to sp_executesql) clear text in a file or database</li>
  </ul>
  <p>Other Secure Coding Issues</p>
  <ul>
    <li>Potential information leakage of application internals through throw exceptions</li>
  </ul>
  <h1>Case</h1>
  <p>The following classes must be included in any project making use of the sample code provided above:</p>
  <pre>using System.Web.Services;<br />using System.Web.Services.Protocols;<br />using System.Xml;<br />using System.Xml.Schema;<br />using System.IO;<br />using System.Data;<br />using System.Data.SqlClient;</pre>
  <p>Leveraging WebService Studio to pass in various XML strings allows us to observe server response behavior:</p>
  <p>
    <strong>Input XML</strong>
  </p>
  <p>1) </p>
  <pre>&lt;Users xmlns="http://tempuri.org/XMLSchema.xsd"&gt;<br />&amp;nbsp;&amp;nbsp; &lt;User&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;username&gt;foobar&lt;/username&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;password&gt;pdw123A@1234 &lt;/password&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;name&gt;Foo Bar&lt;/name&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;streetaddress&gt;&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(‘XSS’);&lt;![CDATA[&lt;]]&gt;/SCRIPT&lt;![CDATA[&gt;]]&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/streetaddress&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;city&gt;Redmond&lt;/city&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;state&gt;WA&lt;/state&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;postalcode&gt;01234&lt;/postalcode&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;phone&gt;1-223-123-1234&lt;/phone&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;ssn&gt;123-12-1234&lt;/ssn&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;emailaddress&gt;&lt;![CDATA[' or 1=1 or ''=']]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &gt;&lt;/emailaddress&gt;<br />&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;url&gt;http://www.microsoft.com&lt;/url&gt;<br />&amp;nbsp;&amp;nbsp; &lt;/User&gt;<br />&lt;/Users&gt;</pre>
  <p>2) </p>
  <pre>&lt;Users xmlns="http://tempuri.org/XMLSchema.xsd &gt;<br />&amp;nbsp;&amp;nbsp; &lt;User&gt;<br />&amp;nbsp;&lt;username&gt;foobar&lt;/username&gt;<br />&amp;nbsp;&lt;password&gt;pdw123A@1234&lt;/password&gt;<br />&amp;nbsp;&lt;name&gt;Foo Bar&lt;/name&gt;<br />&amp;nbsp;&lt;streetaddress&gt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br />	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;/streetaddress&gt;<br />&amp;nbsp;&lt;city&gt;Redmond&lt;/city&gt;<br />&amp;nbsp;&lt;state&gt;WA&lt;/state&gt;<br />&amp;nbsp;&lt;postalcode&gt;01234&lt;/postalcode&gt;<br />&amp;nbsp;&lt;phone&gt;1-223-123-1234&lt;/phone&gt;<br />&amp;nbsp;&lt;ssn&gt;123-12-1234&lt;/ssn&gt;<br />&amp;nbsp;&lt;emailaddress&gt;example@microsoft.com&lt;/emailaddress&gt;<br />&amp;nbsp;&lt;url&gt;http://www.microsoft.com&lt;/url&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/User&gt;<br />&lt;/Users&gt;<br /></pre>
  <h1>Expected Result</h1>
  <p>
    <strong>1) Output from unvalidated XML Reader</strong>
  </p>
  <pre>Error within stored procedure, during processing. Possible SQL injection</pre>
  <pre>******* Exception Text ******* <br />System.Reflection.TargetInvocationException: Exception has been thrown <br />		by the target of an invocation. ---&gt; System.Web.Services.Protocols.SoapException:<br />System.Web.Services.Protocols.SoapException: Server was unable to <br />		process request. ---&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.Exception: The error description is <br />		'An invalid character was found in text content.'.<br />Could not find prepared statement with handle 0.<br />sp_xml_removedocument: The value supplied for parameter number 1 is invalid.<br />The XML parse error 0xc00ce508 occurred on line number 1, near the XML text <br />"&lt;Users xmlns="<a href="http://tempuri.org/XMLSchema.xsd">http://tempuri.org/XMLSchema.xsd</a>"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;User&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;username&gt;foobar&lt;/username&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;password&gt;pdw123A@1234&lt;/password&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;name&gt;Foo Bar&lt;/name&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;streetaddress&gt;&lt;![CDATA[&lt;]]&gt;SCRIPT&lt;![CDATA[&gt;]]&gt;alert(".<br />The statement has been terminated.<br />&amp;nbsp;&amp;nbsp; at Service.ProcessValueNoValidation(String strXML) in c:\Documents and Settings\XXX\<br />		My Documents\Visual Studio 2005\WebSites\WebSite2\App_Code\Service.cs:line 130<br />&amp;nbsp;&amp;nbsp; --- End of inner exception stack trace ---<br />&amp;nbsp;&amp;nbsp; at System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message,<br />	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; WebResponse response, Stream responseStream)<br />&amp;nbsp;&amp;nbsp; at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)<br />&amp;nbsp;&amp;nbsp; at Service.ProcessValueNoValidation(String strXML)<br />&amp;nbsp;&amp;nbsp; --- End of inner exception stack trace ---<br />&amp;nbsp;&amp;nbsp; at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, <br />		BindingFlags invokeAttr, Binder binder, Object[] parameters,<br />		 CultureInfo culture, Boolean isBinderDefault, Assembly caller, Boolean verifyAccess)<br />&amp;nbsp;&amp;nbsp; at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags invokeAttr, Binder binder,<br />		 Object[] parameters, CultureInfo culture, Boolean verifyAccess)<br />&amp;nbsp;&amp;nbsp; at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, <br />		Object[] parameters, CultureInfo culture)<br />&amp;nbsp;&amp;nbsp; at WebServiceStudio.MainForm.InvokeWebMethod()<br />&amp;nbsp;&amp;nbsp; at WebServiceStudio.MainForm.buttonInvoke_Click(Object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Control.OnClick(EventArgs e)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Button.OnClick(EventArgs e)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Control.WndProc(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Button.WndProc(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.ControlNativeWindow.OnMessage(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.ControlNativeWindow.WndProc(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</pre>
  <p>
    <br />1) Output from validated XML Reader</p>
  <pre>Pattern match validation caught error </pre>
  <pre>******* Exception Text ******* <br />System.Reflection.TargetInvocationException: Exception has been thrown by the target<br />		 of an invocation. ---&gt; System.Web.Services.Protocols.SoapException:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />System.Web.Services.Protocols.SoapException: Server was unable to process request. ---&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />System.Exception: Error validating XML: Error:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />The 'http://tempuri.org/XMLSchema.xsd:emailaddress' element is invalid - The value '' or 1=1 or ''='' is&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />invalid according to its datatype 'http://tempuri.org/XMLSchema.xsd:emailstring' - The Pattern constraint failed.<br />at Service.ProcessValue(String strXML) in c:\Documents and Settings\XXX\My Documents\Visual Studio 2005\WebSites\WebSite2\App_Code\Service.cs:line 97<br />--- End of inner exception stack trace ---<br />at System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream)<br />at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)<br />at Service.ProcessValue(String strXML)<br />--- End of inner exception stack trace ---<br />at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters,<br />		 CultureInfo culture, Boolean isBinderDefault, Assembly caller, Boolean verifyAccess)<br />at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters,<br />		 CultureInfo culture, Boolean verifyAccess)<br />at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)<br />at WebServiceStudio.MainForm.InvokeWebMethod()<br />at WebServiceStudio.MainForm.buttonInvoke_Click(Object sender, EventArgs e)<br />at System.Windows.Forms.Control.OnClick(EventArgs e)<br />at System.Windows.Forms.Button.OnClick(EventArgs e)<br />at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)<br />at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)<br />at System.Windows.Forms.Control.WndProc(Message&amp; m)<br />at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)<br />at System.Windows.Forms.Button.WndProc(Message&amp; m)<br />at System.Windows.Forms.ControlNativeWindow.OnMessage(Message&amp; m)<br />at System.Windows.Forms.ControlNativeWindow.WndProc(Message&amp; m)<br />at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</pre>
  <p>2) Output from validated XML Reader</p>
  <pre>Pattern match validation caught error </pre>
  <pre>******* Exception Text ******* <br />System.Reflection.TargetInvocationException: Exception has been thrown by the <br />			target of an invocation. ---&gt; System.Web.Services.Protocols.SoapException:<br />System.Web.Services.Protocols.SoapException: Server was unable to process request. ---&gt;<br />System.Exception: Error validating XML: Error:<br />The 'http://tempuri.org/XMLSchema.xsd:streetaddress' element is invalid - <br />The value 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br />	AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' is invalid according<br />to its datatype 'http://tempuri.org/XMLSchema.xsd:addressstring' - The Pattern constraint failed.<br />&amp;nbsp;&amp;nbsp; at Service.ProcessValue(String strXML) in c:\Documents and Settings\XXX\My Documents<br />			\Visual Studio 2005\WebSites\WebSite2\App_Code\Service.cs:line 97<br />&amp;nbsp;&amp;nbsp; --- End of inner exception stack trace ---<br />&amp;nbsp;&amp;nbsp; at System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message,<br />		 WebResponse response, Stream responseStream)<br />&amp;nbsp;&amp;nbsp; at System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)<br />&amp;nbsp;&amp;nbsp; at Service.ProcessValue(String strXML)<br />&amp;nbsp;&amp;nbsp; --- End of inner exception stack trace ---<br />&amp;nbsp;&amp;nbsp; at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags <br />		invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, <br />		Boolean isBinderDefault, Assembly caller, Boolean verifyAccess)<br />&amp;nbsp;&amp;nbsp; at System.Reflection.RuntimeMethodInfo.InternalInvoke(Object obj, BindingFlags <br />		invokeAttr, Binder binder, Object[] parameters, CultureInfo culture,<br />		 Boolean verifyAccess)<br />&amp;nbsp;&amp;nbsp; at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr,<br />		 Binder binder, Object[] parameters, CultureInfo culture)<br />&amp;nbsp;&amp;nbsp; at WebServiceStudio.MainForm.InvokeWebMethod()<br />&amp;nbsp;&amp;nbsp; at WebServiceStudio.MainForm.buttonInvoke_Click(Object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Control.OnClick(EventArgs e)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Button.OnClick(EventArgs e)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Control.WndProc(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.Button.WndProc(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.ControlNativeWindow.OnMessage(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.ControlNativeWindow.WndProc(Message&amp; m)<br />&amp;nbsp;&amp;nbsp; at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)</pre>
  <p>2) Output from unvalidated XML Reader</p>
  <pre>Request is simply processed without validating results</pre>
  <pre>&lt;?xml version="1.0" encoding="utf-16"?&gt;<br />&lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br /> 	xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;<br />&amp;nbsp; &lt;soap:Body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;ProcessValueNoValidationResponse xmlns="http://codesamples.microsoft.com/XMLValidationExample/"&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;ProcessValueNoValidationResult&gt;true&lt;/ProcessValueNoValidationResult&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/ProcessValueNoValidationResponse&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/soap:Body&gt;<br />&lt;/soap:Envelope&gt;</pre>
  <h1>More Information</h1>
  <p>Web services which leverarage XML schema validation to perform pattern validation (known good characters), minimum and maximum length and bounds checking, and minimum / maximum occurances of an element is signficantly less likely to result in manipulation of application logic or result in data validation induced vulnerabilities such as SQL injection, Cross-site Scripting and failure to handle error conditions. This code sample demonstrates such a task using the an XSD with strongly defined regular expressions for typical data elements.</p>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>