<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1875912628" Content_Hash="1179239213">
  <Metadata>
    <Id>bf931bed-21c0-4b89-9cb2-9274d8c796a6</Id>
    <Id_History>bf931bed-21c0-4b89-9cb2-9274d8c796a6,de955d28-5b9b-4a04-9f16-471ba56b1eff,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>SpringMVC Cross-Site Request Forgery (CSRF) Prevention</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Cross-Site Request Forgery (CSRF) Prevention Using SpringMVC</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* JAVA
* SpringMVC


## Summary ##

Perform CSRF prevention using SpringMVC within an application. CSRF prevention is a key security control for an application that protects the application and its users from CSRF attacks. 


## Solution Example ##

There is a standard model for CSRF prevention using SpringMVC that involves 3 basic steps

1. **Build a base controller with CSRF generation and validation methods.**

	~~~~
	public class RootController {
	...
		protected void init(ControllerContext ctx) {
	 ...
			initializeCsfrToken(ctx);
		}
		private void initializeCsfrToken(ControllerContext ctx) {
		   String csrfToken = ctx.getSessionAttribute(ControllerContext.CSRF_TOKEN, "");
		   if(Utils.isEmpty(csrfToken)) {
			   ctx.setSessionAttribute(ctx, ControllerContext.CSRF_TOKEN, generateCsrfToken(ctx));
		   }
		}
		
		private String generateCsrfToken(ControllerContext ctx) {
	 ... generate random string
		}
		
		protected boolean isValidCsrfToken(ControllerContext ctx) {
			String csrfParamToken = ctx.getParameter(ControllerContext.CSRF_TOKEN);
			String csrfSessionToken = ctx.getSessionAttribute(ControllerContext.CSRF_TOKEN, "");
			if(!Utils.isEmpty(csrfParamToken) && !Utils.isEmpty(csrfSessionToken) && csrfParamToken.equals(csrfSessionToken)) {
				return true;
			} else {
				//Log this as this can be a security threat
				Log.warn("Invalid security Token. Supplied token: " + csrfParamToken + ". Session token: " + csrfSessionToken + ". IP: " + ctx.request.getRemoteAddr());
				return false;
			}
		}
	~~~~

2. **Include CSRF token in form submitted via JSP.**

	~~~~
	<input type="hidden" name="ctoken" id="ctoken" value="${sessionScope.ctoken}"/>
	~~~~

3. **In Controller handling request, validate CSRF token.** In the action class/method that handles the saving of your form (ex. SaveBookController), you need to perform the token validation.

	~~~~
	...
	ControllerContext ctx = new ControllerContext(request, response);
	init(ctx);
	if (!isValidCsrfToken(ctx)) {
		result.addError(new ObjectError("employee", getMessage("error.invalidCsrfToken")));
		return getModelAndView(ctx, "employee/list");
	}
	...
	~~~~

]]></Data>
  </Content>
</TeamMentor_Article>