<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-775763686" Content_Hash="-795225048">
  <Metadata>
    <Id>0f49430b-2abe-408f-b046-89fa739f5d53</Id>
    <Id_History>0f49430b-2abe-408f-b046-89fa739f5d53,758b8c8c-32d3-47d1-8dd4-be596bf24045,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Input Validation Using JSF</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Input Validation Using JSF</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Java + JSF


## Solution Examples ##

There are several ways to perform input validation using JSF depending on the needed validation.

1. **Using the required attribute on form elements.** For most form elements in JSF, you can simply add the required="true" attribute to ensure that the field has a value when submitted. This is a trivial, but very common, validation and is easy to handle in JSF.

	~~~~
	<h:inputText value="#{myBean.someField}" required="true"/>
	Use built-in validators. This mechanism allows you to add validation directly within the field of the form you are validating using any of the many built-in validators.

	<h:inputText value="#{myBean.someField}" required="true">
		<f:validateLength minimum="6" maximum="50"/>
	</h:inputText>
	~~~~

2. **Use custom method from backing bean to perform validation.** This option simply provides you with a mechanism to build out a method that checks the given field and throw a ValidatorException if necessary. This is completely custom code, but JSF does provide a hook to access custom validation methods by using the validator attribute as shown below.

	~~~~
	<h:inputText value="#{myBean.myField}" validator="#{myBean.validateMyField}" />
	~~~~

3. **Build a custom validator by implementing Validator interface.** If you have a validation that could be reusable but does not exist in the standard validations, a custom validator is likely the best option given it's reuse potential. First, you need to build out the validation by creating a class that implements the Validator interface and throws a ValidationException when necessary.

	~~~~
	javax.faces.validator.Validator
	....
	public class MyFieldValidator implements Validator {
		public void validate(FacesContext context, UIComponent component, Object value)
	   throws ValidatorException {
			String myField = (String) value;
			if(!myField.contains("%")) {
				FacesMessage message = new FacesMessage();
				message.setSeverity(FacesMessage.SEVERITY_ERROR);
				message.setSummary("Invalid format.");
				message.setDetail("You can't use wildcarding here.");
				context.addMessage("myForm:MyField", message);
				throw new ValidatorException(message);
			}
		}
	}
	~~~~

	In order to use a custom validator, you simply register it with JSF by adding something like the below snippet to the faces-config.xml file.

	~~~~
	<validator>
	 <validator-id>myFieldValidator</validator-id>
	 <validator-class>com.myapp.MyFieldValidator</validator-class>
	</validator>
	~~~~

	Finally, you would add the validator to a given field in a form similar to how you would use one of the built-in validators.

	~~~~
	<h:inputText id="MyField" value="#{myBean.myField}">
	 <f:validator validatorId="myFieldValidator" />
	</h:inputText>
	~~~~

	For any of the validation mechanisms listed above, there is a common UI pattern for displaying the error messages back to the user. You can use the h:messages or h:message tag

	~~~~
	//for displaying all messages
	<h:messages />
	//for displaying messages for a single input field
	<h:message for="userName" />
	~~~~

## Guideline ##

* [Validate All Input](11a15f3a-7fe8-4e4c-be5e-309ab7227b3d)
]]></Data>
  </Content>
</TeamMentor_Article>