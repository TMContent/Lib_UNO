<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-2010320066" Content_Hash="1658607524">
  <Metadata>
    <Id>3d31d55c-0fea-45d3-8cfb-3ee9525bd255</Id>
    <Id_History>aff3fdd9-2e5c-4180-ad98-3677b2307622,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Full Assembly Names When You Dynamically Load Assemblies</Title>
    <Category>Reflection</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Full Assembly Names When You Dynamically Load Assemblies</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>If your code supports the dynamic loading of assemblies and you load the assembly by calling <b>Activator.CreateInstance</b>, make sure to refer to the assembly by using its strong name. </p>
  <h1>Why</h1>
  <p>This prevents your application from accidentally loading a malicious assembly with the same name as a legitimate assembly.</p>
  <h1>When</h1>
  <p>When your code supports the dynamic loading of assemblies.</p>
  <h1>How</h1>
  <p>The strong name of an assembly contains the public-key token that the assembly was signed with, providing evidence of the author.</p>
  <p>The following example shows how to find the strong name for an assembly.</p>
  <pre>public static StrongName GetStrongName(Assembly assembly)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if(assembly == null)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new ArgumentNullException("assembly");</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; AssemblyName assemblyName = assembly.GetName();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // get the public key blob<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; byte[] publicKey = assemblyName.GetPublicKey();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if(publicKey == null || publicKey.Length == 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new InvalidOperationException(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String.Format("{0} is not strongly named", <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; assembly));<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; StrongNamePublicKeyBlob keyBlob = <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new StrongNamePublicKeyBlob(publicKey);</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; // create the StrongName<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return new StrongName(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; keyBlob, assemblyName.Name, assemblyName.Version);<br />}</pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>