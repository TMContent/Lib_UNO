<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-796276344" Content_Hash="468563351">
  <Metadata>
    <Id>7d475839-efce-421e-912f-7f4a0022feb0</Id>
    <Id_History>fab1733c-61d7-46a8-88c6-2617a643c0d9,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use Least Privileged Accounts for Database Access</Title>
    <Category>Database Security</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Least Privileged Accounts for Database Access</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>Your application should connect to databases using the least-privileged account possible. </p>
  <h1>Why</h1>
  <p>Connecting to the database with a least privilege account limits the damage that can be done in the event of a SQL injection attack or in the event of an attacker obtaining your account's credentials. </p>
  <h1>When</h1>
  <p>Regardless of authentication mechanism, always restrict the account's permissions in the database. An account should have the minimum privileges necessary to satisfy the application's operating constraints. </p>
  <h1>How</h1>
  <p>If you are following the guideline <b>Use Windows Authentication to Connect to the SQL Server</b>, use a least-privileged account with limited operating system permissions, and limited ability to access Windows resources.</p>
  <p>If using SQL Authentication, use the following pattern to limit permissions in the database:</p>
  <ol>
    <li>Create a SQL Server login for the account. <li>Map the login to a database user in the required database. <li>Place the database user in a database role. <li>Grant the database role limited permissions to only those stored procedures or tables that your application needs to access.</li></li></li></li>
  </ol>
  <p>To apply the principle of least privilege to the application's database accounts:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all database accounts.</strong> Create a list with all of your application's database accounts and the respective servers and databases that they connect to. </p>
      <li>
        <p>
          <strong>Identify the roles associated with each database account.</strong> Understand the purpose of the accounts and the functionality they will be executing. Using a table, map all accounts to the privileges they require. None of the application's accounts should have administrative rights on the database server. </p>
        <li>
          <p>
            <strong>Set appropriate privileges.</strong> Once all accounts and their roles have been identified, set the appropriate privileges at the respective database servers. Make sure that each account has enough privileges to execute the assigned tasks only. Any extra privileges should be revoked. </p>
          <p>Use the following guidelines to determine appropriate access permissions:</p>
          <ul>
            <li>Ideally, provide no direct table access and limit access to selected stored procedures only. <li>If you must grant table access, grant the minimum access that the application requires. For example, do not grant update access if read access is sufficient. <li>Use a database role, to avoid granting permissions directly to the database user. This isolates you from potential changes to the database user name. For example, if you change the database user name, you can simply add the new user to the database role and remove the existing one. <li>If an application needs to affect many databases, or if an application is complicated, consider using separation of privilege by partitioning the database access into different accounts. For example, create a database user that only has permissions necessary to setup new application users, and then create a separate database user to carry out operations permitted by legitimate application users.</li></li></li></li>
          </ul>
        </li>
      </li>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following snippet shows a list of database accounts and some of their permissions. Unfortunately, the application's account (myapp) is given more privileges than necessary. If an attacker compromises the application's database account, she can drop tables from the database server.</p>
  <h1>Solution Example</h1>
  <p>The following snippet shows a list of database accounts and some of their permissions. Because the application's account is given appropriate permissions, an attacker cannot drop tables by compromising the application's database account.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on securing accounts in Microsoft SQL Server, see: <a href="http://msdn2.microsoft.com/en-us/library/aa302434.aspx#c18618429_012">Securing Your Database Server: Step 4. Accounts</a>.</li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/63e628e0-c4bb-42c5-a549-7cd112cad81e">Guideline: Enforce Strong SQL Passwords </a>
      <li>
        <a href="/article/e1992e93-39c6-4508-9b16-0e07b0939c37">Guideline: Secure Connection Strings</a>
        <li>
          <a href="/article/497597e5-4f03-48f1-83c7-c3cd5356d17e">Guideline: Allow Only Trusted Hosts to Connect to Database Server </a>
          <li>
            <a href="/article/6a219806-df28-4c00-bc2d-c2ce4c721b7e">Attack: Trust Relationship Attack</a>
            <li>
              <a href="/article/88134c36-4e54-47ca-8a83-fafe271ca05a">Attack: Luring Attack</a>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>