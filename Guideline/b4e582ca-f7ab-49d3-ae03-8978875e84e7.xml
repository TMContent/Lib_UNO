<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-79723533" Content_Hash="227633988">
  <Metadata>
    <Id>b4e582ca-f7ab-49d3-ae03-8978875e84e7</Id>
    <Id_History>5b6c71b0-cb89-4435-b30e-2fd76347078e,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Do Not Propagate Exceptions While Impersonating</Title>
    <Category>Impersonation and Delegation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Do Not Propagate Exceptions While Impersonating</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>Whenever possible, avoid programmatic impersonation (see <a href="/article/fdb65a4c-d979-4ab7-b2fa-b88e908207fe">Do Not Use Impersonation Unless Required</a>). If impersonation must be used, do not propagate or allow exceptions to propagate while impersonating another user.</p>
  <h1>Why</h1>
  <p>If exceptions occur while impersonating, it is possible for malicious code higher in the call stack to run using the impersonated identity. This can present security issues, particularly if you impersonate a highly privileged account. </p>
  <h1>When</h1>
  <p>Any code that uses impersonation must prevent exceptions from propagating outside of the impersonating code.</p>
  <h1>How</h1>
  <p>If you must use programmatic impersonation, use structured exception handling and put the impersonation code inside try blocks. Use a <strong>catch</strong> block to handle exceptions and use a <strong>finally</strong> block to ensure that the impersonation is reverted as shown here. </p>
  <pre>using System.Security.Principal;<br />...<br />WindowsIdentity winIdentity = new WindowsIdentity(<a href="mailto:username&amp;#64;domainName">username&amp;#64;domainName</a>);<br />WindowsImpersonationContext ctx = winIdentity.Impersonate();<br />try<br />&amp;#123;<br />  // Do work<br />&amp;#125;<br />catch(Exception ex)<br />&amp;#123;<br />  // Stop impersonating<br />  ctx.Undo();<br />&amp;#125;<br />finally<br />&amp;#123;<br />  // Stop impersonating<br />  ctx.Undo();<br />&amp;#125;</pre>
  <p>By using a <strong>finally</strong> block, you ensure that the impersonation token is removed from the current thread whether an exception is generated or not. Also be aware that if your code fails to catch exceptions, a malicious user could use exception filters to execute code that runs under the impersonated security context. This is particularly serious if your code impersonates a privileged account. If your code does not catch the exception, exception filters higher in the call stack are executed before code in your finally block is executed. Furthermore, before using this code, ensure that only CLR-compliant exceptions (those derived from the <strong>Exception</strong> class) will be generated by the impersonation code. If this is not the case, the <strong>catch</strong> clause will not catch the exception, and an exception filter could still gain access to the impersonation context. If this is the case, add a second <strong>catch</strong> clause which does not specify the type of the exception at all; you will not have access to the exception details for logging, but you will prevent an elevation of privilege attack. </p>
  <p>
    <strong>Note:</strong> Exception filters are supported by Microsoft Intermediate Language (MSIL) and Visual Basic .NET.</p>
  <h1>Problem Example</h1>
  <p>MyApp is the HR application at MyCorp. As part of its security requirements, the application uses the company's Active Directory for its authentication needs. Although MyApp operates under the ASP.NET local system account, certain actions, such as file uploads, are performed using the users' Windows accounts. Unfortunately, the application does not handle properly the exceptions that are generated within the impersonated context.</p>
  <pre>// This code assumes the following is true:<br />// - fileInfo represents a valid filename<br />// - fileBuff represents valid contents that will be stored<br />// into the file represented by fileInfo<br />// - username represents a valid user in the company's Active Directory<br />WindowsIdentity winIdentity = new WindowsIdentity(username &amp;#43; "&amp;#64;MyCorp");<br />try<br />&amp;#123;<br />    CallStoreFile(fileInfo, fileBuff, winIdentity);<br />&amp;#125;<br />catch (IOException ioe)<br />&amp;#123;<br />    // Add the appropriate logging and exception handling mechanisms<br />    // This code will execute within the context of the impersonated user&amp;#33;<br />&amp;#125;<br />...<br />public void CallStoreFile(FileInfo fileInfo, byte&amp;#91;&amp;#93; fileBuff, WindowsIdentity winIdentity)<br />&amp;#123;<br />    WindowsImpersonationContext ctx = winIdentity.Impersonate();<br />    StoreFile(fileInfo, fileBuff);<br />    ctx.Undo();&amp;#125;</pre>
  <p>An exception is thrown while a privileged user uses the feature. Because of the improper exception handling, the code calling the impersonation will execute within the context of the impersonated user.</p>
  <h1>Solution Example</h1>
  <p>MyApp is the HR application at MyCorp. As part of its security requirements, the application uses the company's Active Directory for its authentication needs. Although MyApp operates under the ASP.NET local system account, certain actions, such as file uploads, are performed using the users' Windows accounts. If an exception is thrown inside the impersonated context, the application automatically terminates the impersonation before it passes the exception to the appropriate exception handlers.</p>
  <pre>// This code assumes the following is true:<br />// - fileInfo represents a valid filename<br />// - fileBuff represents valid contents that will be stored<br />// into the file represented by fileInfo<br />// - username represents a valid user in the company's Active Directory<br />WindowsIdentity winIdentity = new WindowsIdentity(username &amp;#43; "&amp;#64;MyCorp");<br />try<br />&amp;#123;<br />    CallStoreFile(fileInfo, fileBuff, winIdentity);<br />&amp;#125;<br />catch (IOException ioe)<br />&amp;#123;<br />    // Add the appropriate logging and exception handling mechanisms<br />    // This code will execute within the context of ASP.NET&amp;#33;<br />&amp;#125;<br />...<br />public void CallStoreFile(FileInfo fileInfo, byte&amp;#91;&amp;#93; fileBuff, WindowsIdentity winIdentity)<br />&amp;#123;<br />    WindowsImpersonationContext ctx = winIdentity.Impersonate();<br />    try<br />    &amp;#123;<br />        StoreFile(fileInfo, fileBuff);<br />    &amp;#125;<br /><strong>catch (Exception e)<br />    &amp;#123;<br />        ctx.Undo();<br />        throw e;<br />    &amp;#125;<br /></strong>    finally<br />    &amp;#123;<br />        ctx.Undo();<br />    &amp;#125;<br />&amp;#125;</pre>
  <p>An exception is thrown while a privileged user uses the feature. Since the impersonation is terminated, the code calling the impersonation will execute within the context of ASP.NET.</p>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/b8a062a5-d2f0-48f4-a2ad-12e3606d7469">Guideline: Use Structured Exception Handling </a>
      <li>
        <a href="/article/fdb65a4c-d979-4ab7-b2fa-b88e908207fe">Guideline: Do Not Use Impersonation Unless Required </a>
        <li>
          <a href="/article/97dfd32f-deb6-4016-b3ff-24147a959521">Guideline: Do Not Use the LogonUser API </a>
          <li>
            <a href="/article/88134c36-4e54-47ca-8a83-fafe271ca05a">Attack: Luring Attack</a>
            <li>
              <a href="/article/6a219806-df28-4c00-bc2d-c2ce4c721b7e">Attack: Trust Relationship Attack</a>
              <li>
                <a href="/article/f28f80e5-814a-4e3b-9475-9cbb1da901b4">Checklist Item: Exceptions are Not Propagated while Impersonating </a>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>