<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1048554001" Content_Hash="-1894409903">
  <Metadata>
    <Id>1057099e-dd79-4f41-8b7e-36f00f1343e4</Id>
    <Id_History>1057099e-dd79-4f41-8b7e-36f00f1343e4,8d95cb16-54b7-4498-b662-4a7d14bb5348,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Use a Secure Key Storage Location</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Use a Secure Key Storage Location</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Servlets or JSP


## Summary ##

Application keys should be stored in a well defined location, such as the Java KeyStore. Do not hard code them or store them as plaintext inside configuration files or source code.


## Problem Example ##

The following code shows a hard-coded encryption key inside the application. A determined attacker will be able to compromise the key once they gain access to the source code.

~~~~
String encKey = "encryption key";
MessageDigest md = MessageDigest.getInstance("SHA-512");
md.update(encKey.getBytes("UTF-8"));
byte[] rawKey = md.digest();
md.reset();
SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");
~~~~


## Solution Example ##

The following code loads the encryption key from the Java key store. Because the key is properly stored, it is impossible for an attacker to steal the actual key without also stealing the master password.

~~~~
String keyStoreName = MyApp.getKeyStoreName();
char[] keyStorePass = MyApp.getKeyStorePass(); 
KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
FileInputStream keyStoreFile = new FileInputStream(keyStoreName);
keyStore.load(keyStoreFile, keyStorePass);
keyStoreFile.close();
 final String keyName = "MyAppEncryptionKey";
// Note: Although the example uses the same password for storing the KeyStore
// on disk and adding keys to the KeyStore, the 2 passwords can be different 
// from one another
SecretKey skey = (SecretKey)keyStore.getKey(keyName, keyStorePass);
~~~~
]]></Data>
  </Content>
</TeamMentor_Article>