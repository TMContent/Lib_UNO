<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="826493958" Content_Hash="-451571104">
  <Metadata>
    <Id>a626658d-cd99-4346-adad-751e94fdc3f2</Id>
    <Id_History>a626658d-cd99-4346-adad-751e94fdc3f2,c13aaa18-dc20-4720-9b74-65dcd50df878,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Consider Using Programmatic Instead of Declarative Impersonation</Title>
    <Category>Impersonation and Delegation</Category>
    <Phase>Implementation</Phase>
    <Technology>WCF 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Consider Using Programmatic Instead of Declarative Impersonation</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>Microsoft&amp;#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&amp;#174; 2008</li></li>
  </ul>
  <h1>What to Do</h1>
  <p>If you are using impersonation, consider using programmatic instead of declarative impersonation. </p>
  <h1>Why</h1>
  <p>Programmatic impersonation is a finer-grained approach that can reduce security risk. </p>
  <h1>When</h1>
  <p>Use programmatic impersonation to impersonate the original caller or the ASP.NET service account calling into your service. </p>
  <h1>How</h1>
  <p>Programmatic impersonation allows you to impersonate on specific lines of code rather than the entire operation. This finer-grained approach to impersonation can reduce security risk, however be aware that it is easier to make a mistake during implementation that could leave your code impersonating at higher privilege in the event of an error. Use the using statement to revert impersonation automatically.</p>
  <p>The following code snippet shows how to impersonate programmatically:</p>
  <pre>public string GetData(int value)<br />&amp;#123; <br /> using (ServiceSecurityContext.Current.WindowsIdentity.Impersonate())<br /> &amp;#123;<br />     // return the impersonated user (original users identity)<br />     return string.Format("Hi, &amp;#123;0&amp;#125;, you have entered: &amp;#123;1&amp;#125;",<br />          WindowsIdentity.GetCurrent().Name, value);<br /> &amp;#125;   <br />&amp;#125;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information, see &amp;#8220;Delegation and Impersonation with WCF&amp;#8221; at <a href="http://msdn2.microsoft.com/en-us/library/ms730088.aspx">http://msdn2.microsoft.com/en-us/library/ms730088.aspx</a><li>For impersonation and delegation Q&amp;A, see the Impersonation/Delegation section of &amp;#8220;WCF 3.5 Questions and Answers&amp;#8220; at <a href="http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&amp;#37;20Questions&amp;#37;20and&amp;#37;20Answers&amp;#37;20&amp;#37;28Q&amp;#37;26A&amp;#37;29&amp;referringTitle=Home">http://www.codeplex.com/WCFSecurityGuide/Wiki/View.aspx?title=WCF&amp;#37;20Questions&amp;#37;20and&amp;#37;20Answers&amp;#37;20&amp;#37;28Q&amp;#37;26A&amp;#37;29&amp;referringTitle=Home</a></li></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>