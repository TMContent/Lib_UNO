<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1859894503" Content_Hash="374720546">
  <Metadata>
    <Id>42217f8e-f7f1-4b12-8f5a-116456b2d4a0</Id>
    <Id_History>5674b036-8246-45bf-b346-ee3ff1f67339,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Type Safe SQL Parameters When Constructing SQL Queries</Title>
    <Category>Data Access</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Type Safe SQL Parameters When Constructing SQL Queries</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use type-safe parameters when constructing dynamic SQL queries or when passing parameters to stored procedures.&amp;nbsp;&amp;nbsp; </p>
  <h1>Why</h1>
  <p>If you use the Parameters collection, SQL treats the input is&amp;nbsp;as a literal value rather then as&amp;nbsp;executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception. If&amp;nbsp;type-safe SQL parameters are not used, attackers might be able to execute&amp;nbsp;injection attacks&amp;nbsp;that are embedded in the&amp;nbsp;unfiltered input.</p>
  <h1>When</h1>
  <p>This guideline is applicable whenever there is an SQL statement that is built dynamically. It&amp;nbsp;is also appropriate&amp;nbsp;whenever stored procedures are utilized. </p>
  <h1>How</h1>
  <p>To use&amp;nbsp;type-safe SQL parameters, follow these steps:</p>
  <p>
    <strong>1. Determine the parameters in the SQL query or stored procedure being constructed.</strong> All parameters that result from user input or another untrusted source should be escaped, by specifying variable names in the query:</p>
  <blockquote>
    <p>SELECT * from&amp;nbsp;books WHERE&amp;nbsp;ISBN = '@isbn'</p>
  </blockquote>
  <p>
    <strong>2. Declare the explicit data types for each parameter in the SQL statement.</strong> aWhen executing the SQL statement, specify the data type and length for each parameter in the query:</p>
  <blockquote>
    <pre>myCommand.SelectCommand.Parameters.Add("@isbn", SqlDbType.VarChar, 10);<br /></pre>
  </blockquote>
  <p>
    <strong>3. Specify the value for each parameter.</strong> The untrusted input is then specified, so that it can be properly handled when the SQL statement executes:</p>
  <blockquote>
    <pre>myCommand.SelectCommand.Parameters["@isbn"].Value = '0494483923';</pre>
  </blockquote>
  <h1>Problem Example</h1>
  <p>Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires grabbing an emloyee record from a table based on a username and password supplied via a login dialog. The developer of the application&amp;nbsp;created an SQL SELECT query to accomplish said task:</p>
  <pre>SqlConnection myConnection = new SqlConnection("Data Source=localhost\\sqlexpress;<br />						Initial Catalog=EmployeePayroll;<br />						Integrated Security=True");<br />string SQLstr = "SELECT * from users WHERE username = '" + un.Text + <br />							"' AND password = '" + <br />							pass.Text + "'";</pre>
  <pre>SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);</pre>
  <pre>SqlDataAdapter myDataAdapter = new SqlDataAdapter(myCommand);</pre>
  <pre>myCommand.Connection.Open();</pre>
  <pre>SqlDataReader myReader = myCommand.ExecuteReader();<br /></pre>
  <p>In the&amp;nbsp;preceding example, &amp;nbsp;the SELECT statement will work as expected, assuming that the input is perfectly constrained. However, what happens if a user enters unexpected input such as '1234' for a password, and this for a username:</p>
  <pre>mjones' AND 1=1;&amp;nbsp;-- </pre>
  <p>This will result in the&amp;nbsp;SQL statement being executed at the database level:</p>
  <pre>SELECT * from users WHERE username = 'mjones' AND&amp;nbsp;1=1;&amp;nbsp;--'&amp;nbsp; AND password = '1234';</pre>
  <p>This will allow the person entering data into the dialog box to select the account details of mjones.</p>
  <h1>Solution Example</h1>
  <p>Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires grabbing an emloyee record from a table based on a username and password supplied via a login dialog. The developer of the application&amp;nbsp;uses the following&amp;nbsp;SQL query to take advantage of&amp;nbsp;type-safe parameters with the SqlParameterCollection when constructing the query dynamically:<br /></p>
  <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
  <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "SELECT * from users WHERE username = '@uname' AND password = '@pwd'", connection);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@uname", SqlDbType.VarChar, 24);<br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@pwd", SqlDbType.VarChar, 16);</pre>
  <pre>  myCommand.SelectCommand.Parameters["@uname"].Value = un.Text;</pre>
  <pre>  myCommand.SelectCommand.Parameters["@pwd"].Value = pass.Text;<br /><br />&amp;nbsp; myDataAdapter.Fill(userDataset);<br />}<br />&amp;nbsp;</pre>
  <p>In the preceding code example, the input values are constrained for length&amp;nbsp;and&amp;nbsp;escaped. If the data does not conform to the type or length defined by the parameter, the SqlParameter class throws an exception.</p>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>