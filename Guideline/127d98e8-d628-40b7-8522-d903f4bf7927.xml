<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1431891757" Content_Hash="1375201635">
  <Metadata>
    <Id>127d98e8-d628-40b7-8522-d903f4bf7927</Id>
    <Id_History>127d98e8-d628-40b7-8522-d903f4bf7927,78852dd8-1030-411c-bd01-1347631770a9,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Use Role-based Authorization</Title>
    <Category>Authorization</Category>
    <Phase>Design</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Perform Role-based Security Checks</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Java


## Summary ##

Define the different types of users and create specific roles for them. When authorizing access to a resource, build the security checks on a per-role basis rather than on a per-user basis.

Application roles allow multiple users to play the same role and provides a clear way to manage the least privileges necessary for the execution of a given task. It provides a more robust and flexible way of managing the application's users.


## Problem Example ##

The following segment illustrates a JAAS policy. Because the application does not enforce role-based security, it has a policy entry for each separate user; therefore, changing the users' access rights can be quite difficult as each user needs to be modified individually.

~~~~
grant Principal application.auth.UserToken "joe"
{
  permission java.security.SecurityPermission "AccessApp";
};
grant Principal application.auth.UserToken "steve"
{
  permission java.security.SecurityPermission "AccessApp";
};
grant Principal application.auth.UserToken "julie" 
{
  permission java.security.SecurityPermission "AccessApp";
};
~~~~


## Solution Example ##

The following segment illustrates a JAAS policy. Because the application enforces role-based security, it has a policy entry for each group of users; therefore changing the users' access rights is easy as only the group needs to be modified.

~~~~
grant Principal application.auth.GroupToken "users"
{
  permission java.security.SecurityPermission "AccessApp";
};
~~~~]]></Data>
  </Content>
</TeamMentor_Article>