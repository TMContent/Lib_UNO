<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-57327024" Content_Hash="-642483089">
  <Metadata>
    <Id>fbac37b1-5a1e-4933-ac09-5ecfa628fdc7</Id>
    <Id_History>9e068515-3ba6-4ef3-aaf2-24937b61eb4f,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Validate Input From All Sources For Type, Length, Format, And Range</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0 </li>
  </ul>
  <h1>What to Do</h1>
  <p>Do not trust input.&nbsp; Instead, validate on the server that it matches the expected input, be careful which contexts you allow it to be used in, and encode it appropriately on output. </p>
  <h1>Why</h1>
  <p>An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities.&nbsp; Validating input helps to reduce these risks by ensuring that the input received matches the expected format.&nbsp;Input validation on it's own is not sufficient; output encoding is also needed to fully prevent these attacks, but it is an important step for both security and reliability. </p>
  <h1>When</h1>
  <p>All input should always be validated, regardless of source.&nbsp; Unless data is actually static within the scope of the local code base, it could be modified by a malicious user&#8212;even data in a database which is supposed to be static.&nbsp; </p>
  <h1>How</h1>
  <h2>Where to Validate Data</h2>
  <p>Input must be validated on the server for security checks.&nbsp; While it can be useful for user experience reasons to check the input on the client side, especially on things like web applications with high round-trip latencies, this client-side validation is not sufficient to provide security guarantees, as it can be circumvented by the attacker. </p>
  <h2>What Data to Validate</h2>
  <p>Check for known good data and constrain input by validating it for type, length, format, and range.&nbsp; For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input.&nbsp; All input not under control of the system should be validated, but input coming directly from users must be validated and should receive the most attention.&nbsp; </p>
  <h2>How to Implement Validation</h2>
  <p>Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies.&nbsp; Validate input from all of these sources to help prevent injection attacks.&nbsp; Use regular expressions to help validate input.&nbsp; The following example shows how to use the Regex class. </p>
  <pre>
    <pre>using System.Text.RegularExpressions;<br />// Instance method:Regex reg = new Regex(&#64;"&#94;&#91;a-zA-Z'.\s&#93;&#123;1,40&#125;&#36;");<br />Response.Write(reg.IsMatch(Request.QueryString&#91;"Name"&#93;));<br />// Static method:<br />if (&#33;Regex.IsMatch(Request.QueryString&#91;"Name"&#93;,&#64;"&#94;&#91;a-zA-Z'.\s&#93;&#123;1,40&#125;&#36;"))<br />&#123;<br />   // Name does not match expression<br />&#125;</pre>
  </pre>
  <p>If you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation. </p>
  <p>In general, validate your input against the least permissive expression possible that will accept all the input you expect for that field.&nbsp; If you know that the field will have certain internal structure, check for it.&nbsp; If there is a range of standard formats which your users may enter data in, but these formats are easily converted to a single internal format, do so.&nbsp; </p>
  <p>
    <strong>Note:</strong>&nbsp;&nbsp;&nbsp; Validating input does not remove the need to format output, parametrize queries, or otherwise handle user input carefully. </p>
  <h2>Validating Specific Data Types</h2>
  <p>Specific data types allow for and require different types of checks.&nbsp; Here are some guidelines for common data types:</p>
  <h3>Numeric Data</h3>
  <p>Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class, and you can validate numeric ranges by converting the input value to an integer or double, ensuring the conversion was valid,&nbsp;and then performing a range check.&nbsp; If your input has an internal checksum, like a credit card number, check that too.</p>
  <h3>Address Data</h3>
  <p>Address data has a fairly rich internal structure; the more of this structure your validation routine understands, the better you'll be able to validate the information.&nbsp; Phone numbers can be validated as a string of ten digits, or a variable number of digits beginning with the character '&#43;' if international numbers are allowed.&nbsp; If needed, the country code can be determined and the exact number format looked up.&nbsp; While phone numbers are written several different ways,&nbsp;a canonical representation can be created by stripping all non-numeric characters before validation, something which will save your users time and frustration as they enter data into your site.&nbsp; Street addresses require a little bit more care; if the input is taken in divided into street, city, etc., each field can have a seperate safe character set defined--city names don't need numbers, for instance.&nbsp; Names are fairly straightforward, but are one of the cases where the "'" character is valid input, and thus they must be handled appropriately (as all input should be) at the database level.&nbsp; Also, don't forget to allow accented characters in names and addresses, depending on your current code page.</p>
  <h3>Reference Data</h3>
  <p>Data that refers to other things can go through one final step of validation, namely looking up what it refers to to insure that the reference is valid.&nbsp; For instance, postal codes can be validated against a canonical list to ensure correctness, and other aspects of the street address cross-checked with that.&nbsp; In an order management system, item IDs can be&nbsp;checked against a list of valid IDs.</p>
  <h1>Problem Example</h1>
  <p>An order form for a web store has several fields, specifically, a name, address, phone number, item number, and quantity.&nbsp; Each item is simply added to the database with no data validation and all typecasting handled by the database.&nbsp; Typecasting in the database does not prevent SQL injection and has little effect on out of range data.&nbsp; An attacker can perform numerous attacks, from something as benign as filling the database with garbage data to more actively destructive SQL injection and cross-site scripting attacks.</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application contains an order for for a web store.&nbsp; Each of the forms fields are validated, giving stronger guarantees about the data gathered.&nbsp; The phone number&nbsp;is validated as a string of ten digits (after stripping all non-numeric characters), or a variable number of digits beginning with the character '&#43;' if international numbers are allowed.&nbsp; </p>
  <p>Validating a name, address, and item number can all be a bit more complicated.&nbsp; The first order of business is determining the legal character set for each case.&nbsp; For names, spaces, upper and lower case letters (including the accented forms for your current codepage), and possible numbrs and periods are enough.&nbsp; Addresses need to add commas, hyphens, and number signs, at a minimum.&nbsp; Validating item numbers may be as simple as casting to an integer and checking that the result is in the right range, or it may mean a more complicated regular expression that checks for internal formatting in a string. </p>
  <p>The last, optional step of data validation is to ensure that the data refers to a valid things.&nbsp; The data should be validated for format first, especially as further checks may require database queries.&nbsp; Item numbers are an obvious thing to check for existence in the DB, and this would normally happen as part of the stored procedure which creates a new order, but names, addresses, and phone numbers can be similarly checked, some times.&nbsp; For example, if the address field is broken up into components, state or province information, zip/post codes, and city names, at a minimum, can all be validated against existing lists.</p>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>