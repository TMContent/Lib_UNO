<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="445520839" Content_Hash="-941155489">
  <Metadata>
    <Id>d64765a5-8649-47a1-bbc4-17eeece413c7</Id>
    <Id_History>d64765a5-8649-47a1-bbc4-17eeece413c7,57d2708a-a117-41e0-8ccd-999972bfbb96,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>[JUNK] Validate All Values Sent from the Client</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Design</Phase>
    <Technology>Web Application</Technology>
    <Type>Guideline</Type>
    <DirectLink>Validate All Values Sent from the Client</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Do</h1>
  <p>Check that your application validates all input parameters, including regular and hidden form fields, query strings, and cookies.</p>
  <h1>Why</h1>
  <p>To protect your application from denial of service attacks and code injection attacks, including SQL injection and XSS.</p>
  <h1>When</h1>
  <p>This is an important guideline and should be followed all the time.&amp;nbsp;</p>
  <h1>How</h1>
  <p>Restrict the fields that the user can enter and modify and validate all values coming from the client. If you have predefined values in your form fields, users can change them and post them back to receive different results. Permit only known good values wherever possible. For example, if the input field is for a state, only inputs matching a state postal code should be permitted.</p>
  <p>The <b>System.Text.RegularExpressions.Regex</b> class helps validate input parameters. For example, the following code shows how to use this class to validate a name passed through a query string parameter. The same technique can be used to validate other forms of input parameter, for example, from cookies or form fields. For example, to validate a cookie parameter, use <b>Request.Cookies</b> instead of <b>Request.QueryString</b>.</p>
  <div>
    <div>
    </div>
    <div>
      <pre>using System.Text.RegularExpressions;<br />. . .<br />private void Page_Load(object sender, System.EventArgs e)<br />{<br />&amp;nbsp; // Name must contain between 1 and 40 alphanumeric characters<br />&amp;nbsp; // together with (optionally) special characters '`´ for names such<br />&amp;nbsp; // as D'Angelo<br />&amp;nbsp; if (!Regex.IsMatch(Request.QueryString["name"], <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @"^[a-zA-Z'`-´\s]{1,40}$"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception("Invalid name parameter");<br />&amp;nbsp; // Use individual regular expressions to validate all other<br />&amp;nbsp; // query string parameters<br />&amp;nbsp; . . .<br />}<br /></pre>
    </div>
  </div>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>