<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1436231780" Content_Hash="-914335577">
  <Metadata>
    <Id>17eac900-78f2-4f1a-a755-22ba633ec2eb</Id>
    <Id_History>17eac900-78f2-4f1a-a755-22ba633ec2eb,8328ae46-e36d-44a9-9e13-9296a944c221,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Know Your Impersonation Options</Title>
    <Category>Impersonation and Delegation</Category>
    <Phase>Implementation</Phase>
    <Technology>WCF 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Know Your Impersonation Options</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>Microsoft&amp;#174; Windows Communication Foundation (WCF) 3.5 <li>Microsoft Visual Studio&amp;#174; 2008</li></li>
  </ul>
  <h1>What to Do</h1>
  <p>Know the options available for impersonation.</p>
  <h1>How</h1>
  <p>Impersonation is used to restrict or authorize original caller&amp;#8217;s access to a WCF service&amp;#8217;s local resources, like files etc. There are three options available for impersonation:</p>
  <ul>
    <li>Impersonate Using Windows Authentication</li>
    <li>Impersonate Using S4U Kerberos Extensions</li>
    <li>Impersonate Using LogonUser API </li>
  </ul>
  <p>
    <strong>Impersonate Using Windows Authentication</strong>
    <br />With this option you impersonate using the Windows token, obtained from the Security Support Provider Interface (SSPI) or Kerberos authentication, or any other authentication type that cam map to windows like username authentication or certificate authentication. The Windows identity token obtained by this method is then cached on the service. </p>
  <p>This impersonation option supports programmatic and declarative impersonation in WCF. </p>
  <p>
    <strong>Impersonate Using S4U Kerberos Extensions</strong>
    <br />With this option you impersonate using a Windows token obtained from the Kerberos extensions, collectively called Service-for-User (S4U). You can use this option when your clients are authenticated using non-windows authentication like client certificates but has mapping to windows accounts, or when you want to impersonate a service account.&amp;nbsp; This impersonation option supports programmatic impersonation in WCF.</p>
  <p>
    <strong>Note</strong>: To impersonate at impersonation level, you must grant your process account the "Act as part of the operating system" user right.</p>
  <p>
    <strong>Impersonate Using LogonUser API</strong>
    <br />With this option you impersonate using a Windows token obtained from LogonUser Windows API. You can use this option when you want to access network resources (delegation) but do not have trust for delegation or if you want to access local resources but don&amp;#8217;t wish to give higher privileges to your WCF process identity. This option adds responsibility of maintaining the user credentials on the WCF service. This impersonation option supports programmatic impersonation in WCF.<br /></p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on the S4U and Protocol Transition, see &amp;#8220;Using Protocol Transition&amp;#8212;Tips from the Trenches&amp;#8221; at <a href="http://msdn2.microsoft.com/en-us/magazine/cc163500.aspx">http://msdn2.microsoft.com/en-us/magazine/cc163500.aspx</a><li>For more information, see &amp;#8220;Delegation and Impersonation with WCF&amp;#8221; at <a href="http://msdn2.microsoft.com/en-us/library/ms730088.aspx">http://msdn2.microsoft.com/en-us/library/ms730088.aspx</a><br /></li></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>