<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-704542864" Content_Hash="-1225565678">
  <Metadata>
    <Id>84f02e81-fa57-4ba7-aaf2-4363075e418a</Id>
    <Id_History>2534b988-07be-4c1e-9590-edac2cde21fa,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Do Not Use the LogonUser API</Title>
    <Category>Impersonation and Delegation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Do Not Use the LogonUser API</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Avoid writing code that calls the LogonUser API to create impersonation tokens. </p>
  <h1>Why</h1>
  <p>This forces you to store user names and passwords on your Web server. </p>
  <h1>When</h1>
  <p>It is never a good idea to store passwords locally. Do not use the LogonUser API unless absolutely necessary. </p>
  <h1>How</h1>
  <p>Instead, use a unique application pool with a specific process identity if you need a specific identity to access downstream resources. If you need multiple identities to access a range of downstream resources and services, use Windows Server 2003 protocol transition and the new WindowsIdentity constructor; this allows you to create a Windows token that is given only an account's user principal name (UPN). To access a network resource, you need to delegate-level token. To get this token type, your server needs to be configured as trusted for delegation in Active Directory. </p>
  <h1>Solution Example</h1>
  <p>The following code shows how to use this constructor to obtain a Windows token for a given user.</p>
  <pre>using System;using System.Security.Principal;<br />public void ConstructToken(string upn, out WindowsPrincipal p)<br />{<br />&amp;nbsp; WindowsIdentity id = new WindowsIdentity(upn);<br />&amp;nbsp; p = new WindowsPrincipal(id);<br />}</pre>
  <p>Note&amp;nbsp;&amp;nbsp; An account's UPN is guaranteed to be unique within a forest. Frequently, the UPN is the user's e-mail address, but it does not have to be. A user always has a UPN and by default, it is userlogonname@fullyqualifieddomainname. If you are logged into a domain, you can find your UPN name by running whoami /upn from a command window.</p>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>