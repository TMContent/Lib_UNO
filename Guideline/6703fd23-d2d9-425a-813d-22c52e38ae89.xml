<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-188190177" Content_Hash="488375330">
  <Metadata>
    <Id>6703fd23-d2d9-425a-813d-22c52e38ae89</Id>
    <Id_History>e3a6cadc-b417-4e0f-8603-ce7f6cb92aef,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Regular Expressions to Validate Input by Comparing with Expected Patterns</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Regular Expressions to Validate Input by Comparing with Expected Patterns</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use regular expressions to constrain the acceptable range of input characters and to check lengths. For pattern-based fields, such as tax identification numbers, ZIP codes, or postal codes, use expressions to validate the input with the expected pattern of acceptable characters.</p>
  <h1>Why</h1>
  <p>An attacker passing malicious input can attempt SQL injection. Validating input helps to reduce these risks by ensuring that the input received matches the expected format</p>
  <h1>When</h1>
  <p>All input should always be validated, regardless of source.&amp;nbsp; Unless data is actually static within the scope of the local code base, it could be modified by a malicious userâ€”even data in a database which is supposed to be static.</p>
  <h1>How</h1>
  <p>In your data access routines, use the instance or static <b>IsMatch</b> method of the <b>System.Text.RegularExpressions</b><b>Regex</b> class to validate input, as shown in the following example.</p>
  <pre>using System.Text.RegularExpressions;<br />...<br />// Instance method:<br />Regex reg = new Regex(@"^[a-zA-Z'.]{1,40}$");<br />Response.Write(reg.IsMatch(name));</pre>
  <pre>// Static method:<br />if (!Regex.IsMatch(name, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @"^[a-zA-Z'.]{1,40}$"))<br />{<br />&amp;nbsp; // Name does not match schema<br />}</pre>
  <p>For performance reasons, you should use the static <b>IsMatch</b> method where possible, to avoid unnecessary object creation. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>