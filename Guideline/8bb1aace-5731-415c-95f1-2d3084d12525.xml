<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1841877979" Content_Hash="211458761">
  <Metadata>
    <Id>8bb1aace-5731-415c-95f1-2d3084d12525</Id>
    <Id_History>de3e4477-e2b0-40a5-91f6-b3dab65667fb,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Store Passwords Securely</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Store Passwords Securely</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>Store passwords in a secure fashion, not in plain text or using easily cracked encryption or obfuscation schemes.</p>
  <h1>Why</h1>
  <p>Storing passwords in plaintext or using weak encryption can aid an attacker when stealing them. Compromised passwords may aid an attacker into accessing, modifying, and deleting sensitive data.</p>
  <h1>When</h1>
  <p>This guideline should only be followed if your application requires that you store passwords. This may be necessary, for instance, if your application must retrieve the original password at some point. Otherwise, follow the <a href="/article/67be9ff5-80d7-465e-ae47-2717b705e647">Do Not Store Passwords</a> guideline.</p>
  <h1>How</h1>
  <p>Use the following steps to store passwords securely:</p>
  <ol>
    <li>
      <p>
        <strong>Generate a machineKey</strong>: The &lt;machineKey&gt; element inside <strong>web.config</strong> is the entropy that ASP.NET uses when encrypting/hashing passwords. To learn how to create your application's &lt;machineKey&gt; element, visit <a href="http://support.microsoft.com/kb/312906">How to Create Keys for Use in Forms Authentication</a>. Example:</p>
      <pre>&lt;system.web&gt;<br />   &lt;machineKey validationKey="..." decryptionKey="..." validation="SHA1" /&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Choose a membership provider</strong>: Review your application's requirements and design documentation. Identify the membership provider that best suits your application's needs. ASP.NET provides the following membership providers:</p>
      <ul>
        <li>
          <strong>ActiveDirectoryMembershipProvider</strong>: Use this provider when integrating your application's forms authentication with your organization's Active Directory. </li>
        <li>
          <strong>SqlMembershipProvider</strong>: Use this provider when your application uses a backend SQL database for its forms authentication.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Configure your application's membership provider.</strong>
      </p>
      <ul>
        <li>
          <p>
            <strong>ActiveDirectoryMembershipProvider</strong>: Use the following steps to configure your application's ActiveDirectoryMembershipProvider:</p>
          <ol>
            <li>
              <p>
                <strong>Create a connection string</strong>: Create a connection string to interact with your organization's Active Directory. Example:</p>
              <pre>&lt;connectionStrings&gt;<br />    &lt;add name="MyAppADConnection" connectionString="LDAP://NTDomainServer/" /&gt;</pre>
            </li>
            <li>
              <p>
                <strong>Add the membership provider</strong>: Add the ActiveDirectoryMembershipProvider to the list of membership providers in your application's web.config. Configure it to use the Active Directory connection string from the previous step. Set the ActiveDirectoryMembershipProvider as your application's default membership provider. Example:</p>
              <pre>&lt;system.web&gt;<br />  &lt;membership defaultProvider="MyAppADMembershipProvider"&gt;<br />    &lt;providers&gt;<br />      &lt;add name="MyAppADMembershipProvider"<br />            type="System.Web.Security.ActiveDirectoryMembershipProvider"<br />            connectionStringName="MyAppADConnection"<br />           .../&gt;</pre>
            </li>
          </ol>
        </li>
        <li>
          <p>
            <strong>SqlMembershipProvider</strong>: Use the following steps to configure your application's SqlMembershipProvider:</p>
          <ol>
            <li>
              <p>
                <strong>Create a connection string</strong>: Create a connection string to interact with the backend SQL server. Example:</p>
              <pre>&lt;connectionStrings&gt;<br />  &lt;add name="MyAppSqlConnection"<br />        connectionString="Server=serv02.example.com; Database=myapp; Integrated Security=SSPI;"<br />         providerName="System.Data.SqlClient"/&gt;</pre>
            </li>
            <li>
              <p>
                <strong>Prepare your SQL database</strong>: Use the aspnet_regsql.exe utility to configure your application's backend SQL server for use with the ASP.NET SqlMembershipProvider. Example:</p>
              <pre>aspnet_regsql -A m -C &lt;connection string&gt;</pre>
            </li>
            <li>
              <p>
                <strong>Add the membership provider</strong>: Add the SqlMembershipProvider to the list of membership providers in your application's web.config. Configure it to use the SQL connection string from Step 1. Set the SqlMembershipProvider as your application's default membership provider. Example:</p>
              <pre>&lt;system.web&gt;<br />  &lt;membership defaultProvider="MyAppSqlMembershipProvider"&gt;<br />    &lt;providers&gt;<br />      &lt;add name="MyAppSqlMembershipProvider"<br />            type="System.Web.Security.SqlMembershipProvider"<br />            connectionStringName="MyAppSqlConnection"<br />           .../&gt;</pre>
            </li>
          </ol>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Use encrypted password format</strong>: Make sure to set the <strong>passwordFormat</strong> attribute to <strong>encrypted</strong>. Unless otherwise specified, the default hashing function to be used is SHA-1. Example:</p>
      <pre>&lt;system.web&gt;<br />  &lt;membership defaultProvider="MyAppSqlMembershipProvider"&gt;<br />    &lt;providers&gt;<br />      &lt;add name="MyAppSqlMembershipProvider"<br />            type="System.Web.Security.SqlMembershipProvider"<br />            connectionStringName="MyAppSqlConnection"<br /><strong>           passwordFormat="Encrypted"<br /></strong>           .../&gt;</pre>
    </li>
  </ol>
  <p>Be aware that the standard .NET membership providers handle user passwords as System.string objects, which are immutable and can expose your application's user accounts. Consult the <a href="/article/2120b3fe-34c6-47bf-be83-d9756e512d02">Do Not Leave Passwords in Memory</a> guideline for more details.</p>
  <p>Note: Never store the user credentials or their encrypted values on the client side (e.g. cookies, hidden fields, etc.). Use sessions when there is a need to track the user or to store their encrypted credentials. For more information, consult the Session Management section.</p>
  <h1>Problem Example</h1>
  <p>The following code authenticates a user based on username and password. The supplied credentials are compared to the credentials stored in the backend database. Unfortunately, the credentials in the database are in plaintext and could be stolen if the database is compromised.</p>
  <pre>&lt;membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="30"&gt;<br />  &lt;providers&gt;<br />    &lt;add name="MyAppMembershipProvider"<br />      type="System.Web.Security.SqlMembershipProvider"<br />      connectionStringName="MyAppMembershipDatabase"<br />      enablePasswordRetrieval="true"<br />      enablePasswordReset="true"<br />      requiresQuestionAndAnswer="true"<br />      applicationName="MyApp" /&gt;<br />  &lt;/providers&gt;<br />&lt;/membership&gt;</pre>
  <h1>Solution Example</h1>
  <p>The following code validates the user based on given username and password. It uses the user's valid e-mail address and a random salt to encrypt the user's password. Then it compares the username and the produced digest against the data stored in the backend database. Therefore the password is stored encrypted in the database.</p>
  <pre>&lt;membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="30"&gt;<br />  &lt;providers&gt;<br />    &lt;add name="MyAppMembershipProvider"<br />      type="System.Web.Security.SqlMembershipProvider"<br />      connectionStringName="MyAppMembershipDatabase"<br />      enablePasswordRetrieval="true"<br />      enablePasswordReset="true"<br />      requiresQuestionAndAnswer="true"<br /><strong>passwordFormat="Encrypted"<br /></strong>      applicationName="MyApp" /&gt;<br />  &lt;/providers&gt;<br />&lt;/membership&gt;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about the SqlMembershipProvider's PasswordFormat property, visit: Documentation for <a href="http://msdn2.microsoft.com/en-us/library/system.web.security.sqlmembershipprovider.passwordformat(vs.80).aspx">SqlMembershipProvider.PasswordFormat Property</a> in MSDN. </li>
    <li>To learn more about ActiveDirectoryMembershipProvider class, visit: Documentation for <a href="http://msdn2.microsoft.com/en-us/library/system.web.security.activedirectorymembershipprovider(vs.80).aspx">ActiveDirectoryMembershipProvider Class</a> in MSDN. </li>
    <li>To learn more about SqlMembershipProvider class, visit: Documentation for <a href="http://msdn2.microsoft.com/en-us/library/system.web.security.sqlmembershipprovider(vs.80).aspx">SqlMembershipProvider Class</a> in MSDN. </li>
    <li>To learn more about creating keys for use in forms authentication, visit: <a href="http://support.microsoft.com/kb/312906">How to create keys for use in Forms authentication</a>.</li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/2120b3fe-34c6-47bf-be83-d9756e512d02">Guideline: Do Not Leave Passwords in Memory </a>
    </li>
    <li>
      <a href="/article/23c21386-b64a-4872-8727-714977ba84a4">Guideline: Clear Sensitive Data from Memory when No Longer Used </a>
    </li>
    <li>
      <a href="/article/340f0d7d-6226-4948-9934-84a07b3064bf">Attack: Chosen Ciphertext Attack</a>
    </li>
    <li>
      <a href="/article/29e3d723-354f-4d82-ac7b-b004dc759c2f">Attack: Chosen Plaintext Attack</a>
    </li>
    <li>
      <a href="/article/1b9bf857-319c-43ce-9bf8-251a7ab3a777">Checklist Item: Passwords are Stored Securely</a>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>