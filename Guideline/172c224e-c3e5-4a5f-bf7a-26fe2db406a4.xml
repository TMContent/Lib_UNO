<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1486758888" Content_Hash="137835978">
  <Metadata>
    <Id>172c224e-c3e5-4a5f-bf7a-26fe2db406a4</Id>
    <Id_History>172c224e-c3e5-4a5f-bf7a-26fe2db406a4,cf854fa3-eb83-44e0-b6d2-9be0bd3f8b27,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Encrypt Communication Links</Title>
    <Category>Communication Security</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Encrypt Communication Links</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Java


## Summary ##

Encrypt the communication channels when interacting with other software across the network. Encrypting the communication links allows the application to preserve the confidentiality and integrity of the transmitted data.


## Problem Example ##

The following code establishes a connection between two servers. Unfortunately, the communication is not encrypted; therefore, it is possible for an attacker to eavesdrop on the connection.

~~~~
String remoteHost = "server02.example.com";
int remotePort = "1337";

Socket sock = new Socket(remoteHost, remotePort);
InputStreamReader isr = new InputStreamReader(sock.getInputStream());
BufferedReader input = new BufferedReader(isr);
PrintWriter output = new PrintWriter(sock.getOutputStream(), true);
~~~~


## Solution Example ##

The following code establishes a connection between two servers. Because the communication is encrypted, the confidentiality of the data in transit is preserved; therefore, it is impossible for an attacker to eavesdrop on the connection.

~~~~
String remoteHost = "server02.example.com";
int remotePort = "1337";

SSLSocketFactory sslSF = (SSLSocketFactory) SSLSocketFactory.getDefault();
SSLSocket sslSock = (SSLSocket) sslSF.createSocket(remoteHost, remotePort);

InputStreamReader isr = new InputStreamReader(sslSock.getInputStream());
BufferedReader input = new BufferedReader(isr);
PrintWriter output = new PrintWriter(sslSocket.getOutputStream(), true);
~~~~]]></Data>
  </Content>
</TeamMentor_Article>