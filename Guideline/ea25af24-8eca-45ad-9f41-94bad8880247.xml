<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="802767888" Content_Hash="-1609436131">
  <Metadata>
    <Id>ea25af24-8eca-45ad-9f41-94bad8880247</Id>
    <Id_History>ea25af24-8eca-45ad-9f41-94bad8880247,22c68cc0-4feb-4c90-af40-426d6ded7212,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Force Password Renewal</Title>
    <Category>Authentication</Category>
    <Phase>Design</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Force Password Renewal</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Servlets or JSP


## Summary ##

Force users to renew their passwords after a given period of time. Forcing users to renew their passwords reduces the risk of valid credentials becoming exposed. While this technique can prevent attackers from obtaining the valid credentials through the use of a Credentials Brute Force Attack or a Credentials Dictionary Attack, it can also reduce the business risk associated with any instances of discovered or leaked valid credentials.


## Problem Example ##

The following code is part of the application's authentication routine. Because the application fails to force the user to renew their password, it allows more time for an attacker to guess the user's password.

~~~~
String dbStatement = "select login_attempts from users"
                   + "where user = ? and pass = ?;";
PreparedStatement st = dbConnection.prepareStatement(dbStatement);
st.setString(1, user);
st.setString(2, passDigest);
ResultSet rs = st.executeQuery();

if (rs.first())
{
      userIsValid = true;
      loginCount = rs.getInt(1);
}
else
{
      userIsValid = false;
}

rs.close();

if(userIsValid)
{
       // The application fails to check the password's maturity
}
~~~~


## Solution Example ##

The following code is part of the application's authentication routine. Because the application forces its users to renew their passwords, there is limited time for an attacker to guess the user's password or to use a guessed password.

~~~~
String dbStatement = "select login_attempts from users"
                   + "where user = ? and pass = ?;";
PreparedStatement st = dbConnection.prepareStatement(dbStatement);
st.setString(1, user);
st.setString(2, passDigest);
ResultSet rs = st.executeQuery();
if (rs.first())
{
      userIsValid = true;
      loginCount = rs.getInt(1);
}
else
{
      userIsValid = false;
}

rs.close();

if(userIsValid)
{
      // The application checks the password's maturity
      checkPasswordMaturity(user);
}

...

private void checkPasswordMaturity(String user)
      throws UserMustChangePasswordException
{
      Connection dbConnection = MyApp.getDBConnection();
      String dbStatement = "select * from passHistory"
                         + "where userid = ? and"
                         + " last_changed < (current_timestamp - interval '30' day);";
      PreparedStatement st = dbConnection.prepareStatement(dbStatement);
      st.setString(1, user);
      ResultSet rs = st.executeQuery();
      if (rs.first())
      {
            rs.close();
            throw new UserMustChangePasswordException();
      }
      rs.close();
}
~~~~]]></Data>
  </Content>
</TeamMentor_Article>