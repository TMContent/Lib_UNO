<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="394308897" Content_Hash="-605881494">
  <Metadata>
    <Id>b60e1477-f473-4dd5-9453-0a0e216bf8b0</Id>
    <Id_History>b60e1477-f473-4dd5-9453-0a0e216bf8b0,78db04eb-5237-48a2-a5f6-0cb39fe4034c,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>WCF Use a Global Exception Handler</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>WCF</Technology>
    <Type>Code Example</Type>
    <DirectLink>Use a Global Exception Handler to Catch Unhandled Exceptions</DirectLink>
    <Tag>WCF 3.5</Tag>
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Jason Taylor, Prashant Bansode, Carlos Farre, Madhu Sundararajan, Rob Boucher, Steve Gregersen</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* WCF


## Summary ##

Use a global exception handler to catch unhandled exceptions and prevent them from being propagated to the client.


## Solution Example ##

You can handle the unhandled exceptions in a WCF service by subscribing to the Faulted event of a service host object. By subscribing to this event you can determine the cause of a failure, and then perform the necessary actions to abort or restart the service.

The following code snippet shows how to subscribe to the Faulted event.

~~~~
// hosting a WCF service 
ServiceHost customerServiceHost;
customerServiceHost = new ServiceHost(…);
…
// Subscribe to the Faulted event of the customerServiceHost object
customerServiceHost.Faulted += new EventHandler(faultHandler);
…
// FaultHandler method - invoked when customerServiceHost enters the Faulted state
void faultHandler(object sender, EventArgs e)
{     // log the reasons for the fault…
}
~~~~

---
Adapted from Microsoft patterns & practices guidance.]]></Data>
  </Content>
</TeamMentor_Article>