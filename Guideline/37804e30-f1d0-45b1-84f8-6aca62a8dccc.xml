<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2009246909" Content_Hash="-827385410">
  <Metadata>
    <Id>37804e30-f1d0-45b1-84f8-6aca62a8dccc</Id>
    <Id_History>1ca2c244-9b70-4eaa-9e07-fa4768d022e1,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Avoid Letting Untrusted Code Or Data Control Run-time Assembly Load Decisions</Title>
    <Category>Reflection</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Avoid Letting Untrusted Code Or Data Control Run-time Assembly Load Decisions</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Avoid letting the user or untrusted code directly control which assemblies or types your code loads. Avoid using user input to derive assembly or type names.</p>
  <h1>Why</h1>
  <p>These precautions prevent your application from loading a malicious assembly or blindly invoking a method that could be used for malicious purposes.</p>
  <h1>When</h1>
  <p>When your code dynamically loads assemblies and invokes method on them.</p>
  <h1>How</h1>
  <p>Do not load assemblies from user inputs. If you have to dynamically load assemblies, make sure to refer to the assembly by using its strong name. This prevents your application from accidentally loading a malicious assembly with the same name as a legitimate assembly. The strong name of an assembly contains the public-key token that the assembly was signed with, providing evidence of the author.</p>
  <p>The following example shows how to find the strong name for an assembly.</p>
  <pre>public static StrongName GetStrongName(Assembly assembly)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if(assembly == null)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new ArgumentNullException("assembly");</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; AssemblyName assemblyName = assembly.GetName();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // get the public key blob<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; byte[] publicKey = assemblyName.GetPublicKey();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if(publicKey == null || publicKey.Length == 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new InvalidOperationException(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String.Format("{0} is not strongly named", <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; assembly));<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; StrongNamePublicKeyBlob keyBlob = <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new StrongNamePublicKeyBlob(publicKey);</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; // create the StrongName<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; return new StrongName(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; keyBlob, assemblyName.Name, assemblyName.Version);<br />}</pre>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>