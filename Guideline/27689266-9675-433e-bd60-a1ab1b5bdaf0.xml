<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1057887220" Content_Hash="-1236392013">
  <Metadata>
    <Id>27689266-9675-433e-bd60-a1ab1b5bdaf0</Id>
    <Id_History>b210e580-c09e-46c8-8b3a-a2ec6b02873f,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Encode All Output Which Contains Untrusted Data by Context</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0 </li>
  </ul>
  <h1>What to Do</h1>
  <p>Always encode output which contains untrusted data appropriately for the context in which it will be used. </p>
  <h1>Why</h1>
  <p>This prevents potentially malicious script tags from being interpreted as code by the client's browser</p>
  <h1>When</h1>
  <p>Whenever your application will echo untrusted input to the client use this guideline.&nbsp; Untrusted input can come from the user, from the client, from a database, or from untrusted code that your application calls into.</p>
  <h1>How</h1>
  <p>If you write output that includes user input or data from a shared database or a local file that you do not trust, encode it.&nbsp; Echoing input directly back to the user makes your application vulnerable to cross-site scripting attacks, among other problems.&nbsp; Encoding the data ensures that it is treated as literal text and not as script.&nbsp; You can use the <b>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</b> method.&nbsp; Similarly, if you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <b>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</b> to make them safe. </p>
  <p>
    <b>Note</b> &nbsp; &nbsp; Make sure that you encode data at the last possible opportunity before the data is returned to the client.&nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&nbsp; Also, early encoding of some data can result in double encoding problems. </p>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>