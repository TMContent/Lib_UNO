<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="420510812" Content_Hash="-603722071">
  <Metadata>
    <Id>201ecd28-c916-4c83-92ea-7416fbf52987</Id>
    <Id_History>201ecd28-c916-4c83-92ea-7416fbf52987,49e2dec3-e987-458c-aec0-d6da848628a6,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>[SINK] Log Exception Details to the Server</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Log Exception Details to the Server</DirectLink>
    <Tag>ASP.NET,ASP.NET 3.5,ASP</Tag>
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>When exceptions occur, return concise error messages to the client and log specific details on the server. Do not reveal internal system or application details, such as stack traces, SQL statement fragments, and table or database names to the client. Ensure that this type of information is not allowed to propagate to the end user or beyond your current trust boundary. </p>
  <h1>Why</h1>
  <p>A malicious user could use system-level diagnostic information to learn about your application and probe for weaknesses to exploit in future attacks. </p>
  <h1>When</h1>
  <p>This technique is uniformly applicable whenever there are application pages capable of generating errors, which for the most part is any application page. </p>
  <h1>How</h1>
  <p>Prevent detailed error messages from displaying by setting the mode attribute of the &lt;CUSTOMERRORS&gt;element to On, so that all callers receive filtered exception information. Do not use mode="Off" because this allows detailed error pages intended for application developers that contain system-level information to be returned to the client. See the solution example that follows for more information. </p>
  <h1>Solution Example</h1>
  <p>You should also use the &lt;customErrors&gt; section of the Web.config file as shown in the following code example to specify a default error page to display, along with other required error pages for specific HTTP response codes that indicate errors.</p>
  <pre>&lt;customErrors mode="On" defaultRedirect="ErrDefault.aspx"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;error statusCode="401" redirect="ErrUnauthorized.aspx" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;error statusCode="404" redirect="ErrPageNotFound.aspx" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;error statusCode="500" redirect="ErrServer.htm" /&gt;<br />&lt;/customErrors&gt;</pre>
  <p>The defaultRedirect attribute allows you to use a custom error page for your application, which. for example, might include support contact details. Use these application-wide error pages to provide user-friendly responses for errors that are not caught in a structured event handling.&amp;nbsp;&amp;nbsp;</p>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/bc10306c-f37c-4780-a096-847070ae67da">Structured Exception Handling is used</a>
      <li>
        <a href="/article/209b61a1-022d-4574-ad70-293b9a1a5a86">Generic Error Pages with Harmless Messages are Returned to the Client</a>
      </li>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>