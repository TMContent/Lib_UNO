<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-462357289" Content_Hash="-1892834006">
  <Metadata>
    <Id>bdcff537-34f1-4420-8a8f-f4ef5fa9079f</Id>
    <Id_History>63fbbf25-5e32-4719-903b-b73e6b20cbfd,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Evaluate Whether You Need Strong Names</Title>
    <Category>Strong Naming and Signing </Category>
    <Phase>Deployment</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Evaluate Whether You Need Strong Names</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0 </li>
  </ul>
  <h1>What to Do</h1>
  <p>From a security point of view, there are no reasons not to use strong names. Still you should evaluate if you really need to strongname your assemblies.</p>
  <h1>Why</h1>
  <p>Strong naming assembly can make versioning more complicated. For example, if you fix a bug in a strong named assembly and increment its strong name version number, you have to either rebuild everything that depends on that assembly or deploy publisher policy with the assembly.</p>
  <h1>When</h1>
  <p>This is an important guideline and should be followed all the time.</p>
  <h1>How</h1>
  <p>The following are the most common reasons to sign an assembly with a strong name: </p>
  <ul>
    <li>
      <b>You need to add your assembly to the global assembly cache</b>. If you want your assembly to be shared among multiple applications, then you should add it to the global assembly cache. To add your assembly to the global assembly cache, you need to give it a strong name. Adding an assembly to the global assembly cache ensures that your assembly runs with full trust. </li>
    <li>
      <b>You want to prevent partial trust callers</b>. The CLR prevents partially trusted code from calling a strong named assembly by adding a link demand for the Full Trust permission set. You can override this behavior by using <b>AllowPartiallyTrustedCallersAttribute</b> (APTCA), although you should do so only if you are fully aware of the issues and after careful code review. For more information, see the section, "APTCA," in this document. </li>
    <li>
      <b>You want cryptographically strong evidence for security policy evaluation</b>. Strong names provide cryptographically strong evidence for code access security policy evaluation. This allows administrators to grant permissions to specific assemblies. For example, the public key component of a strong name is often used to represent a particular organization. You could create policy that only allows code from designated organizations to run on your computers.</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>