<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="631401812" Content_Hash="-1274682900">
  <Metadata>
    <Id>ffa14c84-64d3-42db-9a48-73e4a9ce1877</Id>
    <Id_History>ffa14c84-64d3-42db-9a48-73e4a9ce1877,58530f68-667d-4ed4-a371-98345bcb67d6,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>.NET Minimize Sensitive Data in Memory</Title>
    <Category>Other</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET</Technology>
    <Type>Code Example</Type>
    <DirectLink>Clear Sensitive Data from Memory When No Longer Used</DirectLink>
    <Tag>ASP.NET,ASP.NET 4.0,ASP</Tag>
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* ASP.NET 4.0 and higher


## Summary ##

Sensitive data, such as encryption keys or private information, should be maintained in memory for the minimum amount of time required. As soon as the data is no longer is needed, it should be purged from memory. All traces of it must be eradicated, so it does not end up leaking to the swap file.

Sensitive data can be cleared by overwriting the memory where the sensitive data was stored. Deallocating the memory is not sufficient since the .NET garbage collector gives no guarantee as to when the deallocated memory will be collected or reused. Be aware that any time you assign a sensitive data to a new buffer, or pass it as a parameter, the sensitive data is being copied and is now in memory in a new location. When clearing memory, ensure you clear every instance.


## Problem Example ##

The following code makes a use of a password. Although the pointer to the string is removed and garbage collection is called, .NET does not guarantee the data will be erased.

~~~~
string pass = GetPassword();
...
pass = null;
GC.Collect();
~~~~


## Solution Example ##

The following code makes use of a password. After the password is used, the memory is explicitly cleared. Since strings are immutable objects, the code uses character arrays to store passwords. This makes it possible to overwrite the data after its use.

~~~~
char[] pass = GetPassword();
...
ClearPassword(pass);
pass = null;
...
void ClearPassword(char[] pass)
{
      for(int i=0; i<pass.Length; i++)
      {
            pass[i] = ' ';
      }
}
~~~~

---
Adapted from Microsoft patterns & practices guidance.]]></Data>
  </Content>
</TeamMentor_Article>