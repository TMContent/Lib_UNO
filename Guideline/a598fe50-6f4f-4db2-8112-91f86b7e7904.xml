<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2048385694" Content_Hash="-870604026">
  <Metadata>
    <Id>a598fe50-6f4f-4db2-8112-91f86b7e7904</Id>
    <Id_History>524d3644-a1d7-4b0a-be6f-67b5211a2413,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>If You Accept File Names, Validate Them</Title>
    <Category>File I/O</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>If You Accept File Names, Validate Them</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>If you do need to receive input file names from the caller, make sure that the file names are strictly formed so that you can determine whether they are valid.</p>
  <h1>Why</h1>
  <p>Accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources.</p>
  <h1>When</h1>
  <p>You should always validate file name, if you need to accept one from user.</p>
  <h1>How</h1>
  <p>There are two aspects to validating input file paths. You need to: </p>
  <ul>
    <li>Check for valid file system names. </li>
    <li>Check for a valid location as defined by your application's context. For example, are the file names within the directory hierarchy of your application?</li>
  </ul>
  <p>To validate a path and file name, use the <b>System.IO.Path.GetFullPath</b> method as shown in the following code example. This method also canonicalizes the supplied file name.</p>
  <pre>using System.IO;<br />public static string ReadFile(string filename)<br />{<br />&amp;nbsp; // Obtain a canonicalized and valid filename<br />&amp;nbsp; string name = Path.GetFullPath(filename);<br />&amp;nbsp; // Now read the file and return the file content.<br />}  </pre>
  <p>As part of the canonicalization process, <b>GetFullPath</b> performs the following checks: </p>
  <ul>
    <li>It checks that the file name does not contain any invalid characters, as defined by <b>Path.InvalidPathChars</b>. </li>
    <li>It checks that the file name represents a file and not another device type, such as a physical drive, a named pipe, a mail slot, or a DOS device such as LPT1, COM1, AUX, and other devices. </li>
    <li>It checks that the combined path and file name is not too long. </li>
    <li>It removes redundant characters such as trailing dots. </li>
    <li>It rejects file names that use the //?/ format.</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>