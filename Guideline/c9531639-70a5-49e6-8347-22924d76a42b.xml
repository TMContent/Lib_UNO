<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="765748193" Content_Hash="-587651299">
  <Metadata>
    <Id>c9531639-70a5-49e6-8347-22924d76a42b</Id>
    <Id_History>c9531639-70a5-49e6-8347-22924d76a42b,dc04d58f-f321-4645-a4ae-c6161633be57,</Id_History>
    <Library_Id>51eb81c3-1d23-4146-ba83-8a6bb9233c11</Library_Id>
    <Title>Set Pointers to Null After Deallocation to Prevent Dangling Pointers</Title>
    <Category>Unmanaged Code</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Guideline</Type>
    <DirectLink>Set Pointers to Null After Deallocation to Prevent Dangling Pointers</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>C++</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <p>C&amp;#43;&amp;#43;</p>
  <h1>What to Do</h1>
  <p>Set pointers to null after deallocation to prevent dangling pointers.</p>
  <h1>Why</h1>
  <p>Deallocating or deleting objects without setting the values of corresponding objects to null may result in dangling pointer vulnerabilities, if those pointers are later used again.</p>
  <h1>When</h1>
  <p>Set pointers to null after deallocating memory assigned to the corresponding objects. In practice, this means after calling the free() function or the delete operator.</p>
  <h1>How</h1>
  <p>Search for calls to the free() function or the delete operator. Add code that sets the freed pointer to null after each call to the free() function or the delete operator.</p>]]></Data>
  </Content>
</TeamMentor_Article>