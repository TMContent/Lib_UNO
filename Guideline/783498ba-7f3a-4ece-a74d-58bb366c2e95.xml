<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1540042209" Content_Hash="-695173525">
  <Metadata>
    <Id>783498ba-7f3a-4ece-a74d-58bb366c2e95</Id>
    <Id_History>4a2e564a-7cab-4aef-9995-425e8c68b0f2,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Sanitize Any File Names Or Paths from Users</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0 </li>
  </ul>
  <h1>What to Do</h1>
  <p>Do not accept file names or paths from users.&nbsp; If you must accept a file name or a path from a user, sanitize it very carefully. </p>
  <h1>Why</h1>
  <p>Accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources. </p>
  <h1>When</h1>
  <p>If it is unavoidable to accept a file name from a user and to then use it to acccess or store data in the file system, that file name or path must be very carefully sanitized. </p>
  <h1>How</h1>
  <h2>File Names</h2>
  <p>Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate.&nbsp; When checking file names, obtain the full name of the file by using the <b>System.IO.Path.GetFullPath</b> method. </p>
  <h2>File Paths</h2>
  <p>If you use <b>MapPath</b> to map a supplied virtual path to a physical path on the server, use the overloaded <b>Request.MapPath</b> method that accepts a <b>bool</b> parameter so that you can prevent cross-application mapping. The following code example shows this technique. </p>
  <pre>try<br />&#123;<br /> string mappedPath = Request.MapPath( inputPath.Text,<br />                                       Request.ApplicationPath, false);<br />&#125;<br />catch (HttpException)<br />&#123;<br /> // Cross-application mapping attempted <br />&#125;</pre>
  <p>The final <b>false</b> parameter prevents cross-application mapping.&nbsp; This means that a user cannot successfully supply a path that contains ".." to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <b>HttpException</b>. </p>
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>