<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-846941138" Content_Hash="504479243">
  <Metadata>
    <Id>4b5b1f05-aa9a-4ebc-8b2e-3cecabed03e1</Id>
    <Id_History>4b5b1f05-aa9a-4ebc-8b2e-3cecabed03e1,8cbc7216-29e4-4655-ac14-b09dd18190c3,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Enforce Strong Passwords</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Enforce Strong Passwords</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Servlets or JSP


## Summary ##

Enforce the use of strong passwords. Enforcing strong passwords minimizes the risk of an attacker guessing a user's password.



What constitutes a strong password varies from organization to organization; however, there are minimum requirements for length and input character sets. Minimum requirements for a strong password are:

The password must be at least 10 characters long.
It must contain letters, numbers, and special characters.
The following steps are required for enforcing strong passwords:

Define password requirements. Pick the schema that all passwords must follow. Check them for length and certain patterns. All passwords should be long (e.g. 10+ characters in length) and include a large input set (e.g. alpha-numeric and special character values).

Enforce password requirements. The password requirements should be enforced while creating and modifying accounts.
Enforce password lifetime. Determine a lifetime of a password. Force the users to update their passwords on a given interval. Verify that the new password is different from the old password by comparing the produced hashes.

Additionally users might be asked to not use previously used passwords. 


## Solution Example ##

The following code adds a new user to the application. Before it stores the user's credentials into the repository, it verifies that the password meets the application's password requirements.

~~~~
public void addUser(String user, char[] pass)
{      
      // Check if user exists in the user database
      // The application verifies that the given
      // password meets the password requirements
      if (!goodPassword(pass))
      {
            String errMsg = "User's password does not meet"
                           + " the password requirements";
            throw new AddUserException(errMsg);
      }

      // Add user to the application's user database
      ...
}


public boolean goodPassword(char[] pass)
{
      boolean alpha = false;
      boolean num = false;
      boolean sp = false;

      if (pass.length 
      {
            return false;
      }

      for (int i = 0; i 
      {
            if (!alpha && Character.isLetter(pass[i]))
            {
                  alpha = true;
            }

            if (!num && Character.isDigit(pass[i]))
            {
                  num = true;
            }

            if (!sp && (pass[i] == '!' ||
                  pass[i] == '@' || pass[i] == '#' ||
                  pass[i] == '$' || pass[i] == '%' ||
                  pass[i] == '^'))
            {
                  sp = true;
            }
      }

      return (alpha & num) & sp;
}
~~~~


The following example illustrates checking if the user has used the new password in her six previous password changes:

~~~~
select passDigest from
   (select passDigest from passHistory
    where userID = 'jill' and rownum 
    order by passID desc)
    where passDigest = {{pass digest}};
~~~~	

If the query returns a result, then the user has used the password as one of her last passwords. Because the table contains important user information, it should be treated with the same security measures as the user repository.]]></Data>
  </Content>
</TeamMentor_Article>