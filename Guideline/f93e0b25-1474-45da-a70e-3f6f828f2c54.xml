<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-700198542" Content_Hash="514524241">
  <Metadata>
    <Id>f93e0b25-1474-45da-a70e-3f6f828f2c54</Id>
    <Id_History>7449309c-f464-41dd-8035-70ae74f56656,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Protected Configuration to Protect Sensitive Data in Configuration Files</Title>
    <Category>Sensitive Data</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Protected Configuration to Protect Sensitive Data in Configuration Files</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use .NET 2.0 protected configuration to protect sensitive data in configuration files. </p>
  <h1>Why</h1>
  <p>Sensitive data&amp;nbsp;stored in plaintext is dangerous, because an attacker that can compromise a server will be able to read that sensitive data. Even if a machine is not compromised,&amp;nbsp;sensitive data&amp;nbsp;stored in plain text&amp;nbsp;is accessible to administrators and any other users with sufficient privileges&amp;nbsp;on the host machine and/or Windows domain.</p>
  <h1>When</h1>
  <p>Use this guideline on any application that stores&amp;nbsp;sensitive data like user credentials etc,&amp;nbsp;in the Machine.config or Web.config files </p>
  <h1>How</h1>
  <p>For ASP.NET Web.config files, you can use the Aspnet_regiis tool to encrypt specific sections. The sections of a Web.config file that usually contain sensitive information that you need to encrypt are the following: </p>
  <ul>
    <li>&lt;<b>appSettings</b>&gt;. This section contains custom application settings. </li>
    <li>&lt;<b>connectionStrings</b>&gt;. This section contains connection strings. </li>
    <li>&lt;<b>identity</b>&gt;. This section can contain impersonation credentials. </li>
    <li>&lt;<b>sessionState</b>&gt;. The section contains the connection string for the out-of-process session state provider.</li>
  </ul>
  <p>Protected configuration supports DPAPI and RSA encryption. To use the DPAPI provider with the machine key store (the default configuration) to encrypt the <b>connectionStrings</b> section, run the following command from a command prompt:</p>
  <p>
    <b>aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" </b>
  </p>
  <p>
    <b>-prov "DataProtectionConfigurationProvider"</b>
  </p>
  <p>where </p>
  <ul>
    <li>
      <b>-pe</b> specifies the configuration section to encrypt. </li>
    <li>-<b>app </b>specifies your Web application's virtual path. If your application is nested, you need to specify the nested path from the root directory, for example "/test/aspnet/MachineDPAPI" </li>
    <li>
      <b>-prov</b> specifies the provider name.</li>
  </ul>
  <p>The .NET Framework 2.0 SDK supports <b>RSAProtectedConfigurationProvider</b> and <b>DPAPIProtectedConfigurationProvider</b> protected configuration providers, which you use with the Aspnet_regiis tool. </p>
  <ul>
    <li>
      <b>RSAProtectedConfigurationProvider</b>. This is the default provider and uses the RSA public key encryption to encrypt and decrypt data. Use this provider to encrypt configuration files for use on multiple Web servers in a Web farm. </li>
    <li>
      <b>DPAPIProtectedConfigurationProvider</b>. This provider uses DPAPI to encrypt and decrypt data. Use this provider to encrypt configuration files for use on a single Windows Server.</li>
  </ul>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>