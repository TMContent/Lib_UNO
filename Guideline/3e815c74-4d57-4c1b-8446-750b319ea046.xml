<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1100989892" Content_Hash="-201749322">
  <Metadata>
    <Id>3e815c74-4d57-4c1b-8446-750b319ea046</Id>
    <Id_History>3e815c74-4d57-4c1b-8446-750b319ea046,c2957169-b3de-47ed-b24c-ad67f55c5f5b,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Use a Global Exception Handler</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Use a Global Exception Handler for Unhandled Exceptions</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Servlets or JSP


## Summary ##

Use a global exception handler to catch any unhandled exceptions. A global exception handler improves the application's robustness and minimizes the risk of information disclosure.

Unhandled exceptions can be a serious stumbling block to an application's performance and security. Unhandled exceptions must be avoided as they can result in the application entering an unknown state and/or revealing sensitive internal application details. Using a global exception handler will prevent unhandled exceptions.


## Problem Example ##

The following code produces a data analysis based on a financial index. Unfortunately, there is no global exception handling. Therefore, an attacker can force the application to reveal its call stack and possibly the source code filenames by triggering an unhandled exception.

~~~~
import java.io.*;
import java.util.*;
import java.lang.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.regex.*;

public final class DataAggregator extends HttpServlet
{
      public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
      {
            PrintWriter out = response.getWriter();
            String searchTerm = request.getParameter("index");
             // The application does not provide a global exception handler
            if (validateSearchTerm(searchTerm))
            {
                  String retString;
                  retString = "The queried index \"";
                  retString += encodeHtml(searchTerm);
                  retString += "\" produced the following results:<br> ";
                  out.println(retString);
                  common.aggregateData(out, searchTerm);
            }
            else
            {
                  // Add the appropriate logging and exception
                  // handling mechanisms. Consult the Exception
                  // Handling and Logging sections
                   out.println("We cannot handle your request at the moment."
                           + " Please try again later.");
            }
            out.flush();
            out.close();
      }
}
~~~~


## Solution Example ##

The following code produces a data analysis based on a financial index. Because the code provides a global exception, it is impossible for an unhandled exception to surface to the client. Therefore, no debug and source data will be disclosed with the attacker.

~~~~
import java.io.*;
import java.util.*;
import java.lang.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.regex.*;

public final class DataAggregator extends HttpServlet
{
      public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
      {
            PrintWriter out = response.getWriter();
            String searchTerm = request.getParameter("index");

            // The application provides a global exception handler
            try
            {
                  if (validateSearchTerm(searchTerm))
                  {
                        String retString;
                        retString = "The queried index \"";
                        retString += encodeHtml(searchTerm);
                        retString += "\" produced the following results:<br> ";
                        out.println(retString);
                        common.aggregateData(out, searchTerm);
                  }
                  else
                  {
                        // Add the appropriate logging and exception
                        // handling mechanisms. Consult the Exception
                        // Handling and Logging sections
                         out.println("We cannot handle your request at the moment."
                                 + " Please try again later.");
                  }
            }

            catch (Exception e)
            {
                   // Add the appropriate logging and exception
                   // handling mechanisms. Consult the Exception
                   // Handling and Logging sections
                   out.println("We cannot handle your request at the moment."
                           + " Please try again later.");
            }

            out.flush();

            out.close(); 
     }
}
~~~~

]]></Data>
  </Content>
</TeamMentor_Article>