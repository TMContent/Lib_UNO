<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-815571684" Content_Hash="851531180">
  <Metadata>
    <Id>55692750-7cb8-4f1f-b10b-b29621ce995c</Id>
    <Id_History>caef6021-4f03-499b-bbd9-2a0a4a0b414d,</Id_History>
    <Library_Id>26bd1a04-beed-4a66-917d-b6ab0a7d634c</Library_Id>
    <Title>Centralize Input Validation</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Design</Phase>
    <Technology> Any</Technology>
    <Type>Guideline</Type>
    <DirectLink>Centralize Input Validation</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies To</h1>
  <ul>
    <li>Web Application</li>
  </ul>
  <h1>What to Do</h1>
  <p>All web applications need to validate their input, and this should be performed in a single centralized place, to ensure consistency.</p>
  <h1>Why</h1>
  <p>Inconsistent application of input validation does not adequately prevent attacks.&amp;nbsp; Also, centralization ensures that as data formats change, validation standards change with them in a consistent manner.&amp;nbsp; Centralization will also reduce development effort and help with future maintenance.</p>
  <h1>When</h1>
  <p>All systems should centralize their input validation.</p>
  <h1>How</h1>
  <p>Getting input validation correct is tricky; there's a reason that it's the number one security problem for web applications.&amp;nbsp; However, when approached systematically, it's not too hard of a&amp;nbsp;problem to solve.&amp;nbsp; Follow these steps:</p>
  <ol>
    <li>
      <strong>Determine all inputs:</strong> Identify all the inputs to your system, and what format they have. </li>
    <li>
      <strong>Determine all trusted data stores:</strong> Identify all the places you pull data from that you can rely on to preserve data validity, and those whos output you need to validate </li>
    <li>
      <strong>Determine all crossover points:</strong> Find all the points where input might contaminate other data, and ensure that validation is performed before those points. </li>
    <li>
      <strong>Determine all outputs:</strong> Find all the outputs from your system, and ensure that context-appropriate encoding is performed at those points. </li>
    <li>
      <strong>Centralize your validation:</strong> Centralize all your validation code into a single module, and ensure that it's always used appropriately. </li>
    <li>
      <strong>Centralize your encoding:</strong>&amp;nbsp; Centralize all your encoding code into a single module, ensure it handles all your contexts, and that it's always used appropriately. </li>
    <li>
      <strong>Ensure all paths preserve validation:</strong> Ensure that every path through the system keeps data in a valid form; watch out for round trips through the client or client-side validation.</li>
  </ol>
  <p>One of the biggest dangers of implementing input validation is inconsistent validation; an attack may be caught on one data path, but not on another.&amp;nbsp; An attacker will try all of them, however.&amp;nbsp; The way to solve this problem is to have a single point of responsibility for input validation.&amp;nbsp; Where this is depends on the design.&amp;nbsp; If every piece of input is an object, then it may be appropriate to have the object constructs and setters perform the validation for that object's input.&amp;nbsp; In a less strictly OO system, a single module with methods for each different input format may be more appropriate.</p>
  <p>Which ever method is chosen, the input validation routine for a specific data type should be as strict as possible.&amp;nbsp; For example, when validating a US zip code, allow either 5 or 9 numbers, and nothing else.&amp;nbsp; If you're dealing with international postal codes, either validate them seperately with a looser format that also allows letters, or build a more complex validator that understands the postal codes of each nation, if you need to ensure a higher level of integrity.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a>&amp;nbsp; </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>