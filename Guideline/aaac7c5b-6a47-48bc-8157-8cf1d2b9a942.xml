<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1038304500" Content_Hash="676936577">
  <Metadata>
    <Id>aaac7c5b-6a47-48bc-8157-8cf1d2b9a942</Id>
    <Id_History>a7c46576-d513-4086-9e2d-67a9673ed8f3,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Do Not Serialize Sensitive Data</Title>
    <Category>Serialization</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Do Not Serialize Sensitive Data</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>If you must serialize your class and it contains sensitive data, avoid serializing the fields that contain the sensitive data. Either implement <b>ISerializable</b> to control the serialization behavior or decorate fields that contain sensitive data with the &amp;#91;<b>NonSerialized</b>&amp;#93; attribute. </p>
  <h1>Why</h1>
  <p>This is important because serialization places the data in memory, often in preparation for sending it over a network, making it easier for an attacker to gain access to it.</p>
  <h1>When</h1>
  <p>You need to be able to marshal object by value across a .NET remoting boundary (that is, across application domains, processes, or computers) or if you want to be able to persist the object state to create a flat data stream, perhaps for storage on the file system.</p>
  <h1>How</h1>
  <p>By default, all private and public fields are serialized. </p>
  <p>The following example shows how to use the <b>&amp;#91;NonSerialized&amp;#93;</b> attribute to ensure that a specific field which contains sensitive data cannot be serialized.</p>
  <pre>&amp;#91;Serializable&amp;#93;<br />public class Employee &amp;#123;<br />&amp;nbsp; // OK for name to be serialized<br />&amp;nbsp; private string name;<br />&amp;nbsp; // Prevent salary being serialized<br />&amp;nbsp; &amp;#91;NonSerialized&amp;#93; private double annualSalary;<br />&amp;nbsp; . . .<br />&amp;#125;</pre>
  <p>Alternatively, implement the <b>ISerializable</b> interface and explicitly control the serialization process. If you must serialize the sensitive item or items of data, consider encrypting the data first. The code that de-serializes your object must have access to the decryption key.</p>
  <h1>&amp;nbsp;</h1>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>