<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1521421615" Content_Hash="1695697544">
  <Metadata>
    <Id>f5b1384b-d6ec-49e8-b309-dc6704ddb7d3</Id>
    <Id_History>155e6cba-4549-4195-85bb-29195afcb640,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use a Least-Privileged Database Login</Title>
    <Category>Deployment Considerations</Category>
    <Phase>Deployment</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use a Least-Privileged Database Login</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use an account that has restricted database permissions for connecting to database.</p>
  <h1>Why</h1>
  <p>Connecting to the database with a least privelege&amp;nbsp;account limits the damage that can be done in the event of a SQL injection attack or in the event of an attacker obtaining your account's credentials. The attacker is restricted by the permissions granted to your application's database login.</p>
  <h1>When</h1>
  <p>Regardless of authentication mechanism, always restrict the account's permissions in the database.&amp;nbsp;An account should have the minimum privileges necessary&amp;nbsp;to satisfy the application's operating constraints.</p>
  <h1>How</h1>
  <p>If you are using Windows authentication, use a least-privileged account with limited operating system permissions, and limited ability to access Windows resources. </p>
  <p>Use the following pattern to limit permissions in the database: </p>
  <ol>
    <li>Create a SQL Server login for the account. </li>
    <li>Map the login to a database user in the required database. </li>
    <li>Place the database user in a database role. </li>
    <li>Grant the database role limited permissions to only those stored procedures or tables that your application needs to access. </li>
  </ol>
  <p>Use the following guidelines to determine appropriate access permissions:</p>
  <ul>
    <li>Ideally, provide no direct table access and limit access to selected stored procedures only. </li>
    <li>If you must grant table access, grant the minimum access that the application requires. For example, do not grant update access if read access is sufficient. </li>
    <li>Use&amp;nbsp;a database role, to avoid granting permissions directly to the database user. This isolates you from potential changes to the database user name. For example, if you change the database user name, you can simply add the new user to the database role and remove the existing one. </li>
    <li>If an application needs to affect many databases, or if an application is complicated, consider using seperation of privilege&amp;nbsp;by partitioning the&amp;nbsp;database access&amp;nbsp;into different accounts.&amp;nbsp;For example, create a database user that only has permissions necessary to setup new application users, and then create a seperate database user to carry out operations permitted by legitimate application users.</li>
  </ul>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>