<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2104001031" Content_Hash="1504049842">
  <Metadata>
    <Id>b97a0c5a-fb87-4ce9-a019-4e6a56108f59</Id>
    <Id_History>68e356d2-32ea-44ea-8e09-a772ffb48c92,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Validate Untrusted Input Passed to Data Access Methods</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Validate Untrusted Input Passed to Data Access Methods</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Validate all input, including form fields, query string parameters, and cookies. Assume all user&amp;nbsp;supplied data&amp;nbsp;is malicious, and use server-side validation all of the input. If&amp;nbsp;the data access methods receive input parameters from outside the trust boundary of&amp;nbsp;the data access code, make sure&amp;nbsp;to validate them for type, length, format, and range.</p>
  <h1>Why</h1>
  <p>There are no assumptions of trust that can be made&amp;nbsp;regarding the safety of&amp;nbsp;unchecked input. Most application-level attacks&amp;nbsp;involve malicious input. Failure to validate input&amp;nbsp;means that&amp;nbsp;data could contain database injection attacks.</p>
  <h1>When</h1>
  <p>Two common situations where you need to provide validation in your data access code are the following: </p>
  <ul>
    <li>
      <b>Untrusted clients</b>. If data can come from an untrusted source or you cannot guarantee how well the data has been validated and constrained, add validation logic that constrains input to your data access routines. </li>
    <li>
      <b>Library code</b>. If your data access code is packaged as a library designed for use by multiple applications, your data access code should perform its own validation, because you can make no safe assumptions about the client applications.</li>
  </ul>
  <p>For performance reasons, you might not want to duplicate validation logic in your data access code and in your application's presentation or business layers. However, you should only omit validation from your data access methods after carefully considering your application's trust boundaries. Omit the additional layer of validation only if you can be sure that the data passed to your data access code comes from a source inside the same trust boundary and has previously passed through validation code.</p>
  <h1>How</h1>
  <p>The following example shows how a data access routine can validate its input parameters by using regular expressions prior to using the parameters in a SQL statement.</p>
  <pre>using System;<br />using System.Text.RegularExpressions;</pre>
  <pre>public void CreateNewUserAccount(string name, string password)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check name contains only lower case or upper case letters, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // the apostrophe, a dot, or white space. Also check it is <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // between 1 and 40 characters long<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if ( !Regex.IsMatch(userIDTxt.Text, @"^[a-zA-Z'./s]{1,40}$"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new FormatException("Invalid name format");</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check password contains at least one digit, one lower case <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // letter, one uppercase letter, and is between 8 and 10 <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // characters long<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if ( !Regex.IsMatch(passwordTxt.Text, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$" ))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new FormatException("Invalid password format");</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; // Perform data access logic (using type safe parameters)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />}<br /></pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>