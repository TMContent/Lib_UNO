<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1929694834" Content_Hash="-917083645">
  <Metadata>
    <Id>23fcb762-1547-4241-8b31-7e8ae647aa18</Id>
    <Id_History>d2054dd6-6ed3-4738-bbb7-eb28c0659bff,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Do Not Put Sensitive Data in the Query String</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0 </li>
  </ul>
  <h1>What to Do</h1>
  <p>If a user is submitting sensitive data, they should submit it as a form field via an HTTP POST, not in the query string.&nbsp;&nbsp;Whenever possible, avoid the problem entirely—do not send sensitive data on a round trip to the user unless they need to edit the data.&nbsp; Instead, store sensitive session data on the server side.&nbsp; If sensitive data must be sent through the user, use an encrypted ViewState instead of a query string parameter. </p>
  <h1>Why</h1>
  <p>Sensitive data in the query string may be logged by web proxies, and will also appear in the user's browser history and in your own web server logs.&nbsp; Additionally, if sensitive content is being sent through the user, the query string does not offer an easy way of protecting the content from user reading or tampering. </p>
  <h1>When</h1>
  <p>Sensitive data should never appear in the query string. </p>
  <h1>How</h1>
  <ol>
    <li>
      <p>Use HTTP POST (form submission) instead of HTTP GET for sensitive data provided by the user.&nbsp; This will ensure that data is not logged by web proxies, the web server's logs, or browser histories. </p>
      <li>
        <p>Store sensitive data server side instead of repeatedly passing it as a query string parameter.&nbsp; The best way to keep sensitive information safe is to leave it somewhere inaccessible. </p>
        <li>
          <p>If sensitive data must be sent through the user—during a server transition, for instance—send it via an encrypted ViewState instead of a query string parameter.&nbsp; ViewStates are designed to support integrity and confidentiality, as needed, and are the best way of ensuring that sensitive data is not tampered with or disclosed when it is sent past the user. </p>
        </li>
      </li>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The order forms on an e-commerce site uses GET to place orders.&nbsp; The URL generated by the payment page is of the form:</p>
  <pre>http://www.example.com/cart.aspx?orderID=[...]&name=[...]&creditCard=[...]&address=[...]</pre>
  <p>When a customer places an order from a public terminal, an attacker retrieves their credit card number and address from the browser history.&nbsp; Having found a vulnerable site, the attacker compromises several proxy servers and steals more credit card numbers from their logs.</p>
  <h1>Solution Example</h1>
  <p>The order forms on an e-commerce site use POST for all transactions, all forms use a ViewStateUserKey, and all sensitive data is transmitted via SSL and stored on the server instead of being repeatedly passed through the client.&nbsp; Using POST ensures that data isn't logged by web proxies, web server logs, or in the browser.&nbsp; The ViewStateUserKey ensures that captured form submissions can't be replayed.&nbsp; SSL and not passing sensitive data back to the client&nbsp;ensures that the information can be neither sniffed nor stolen via XSS.&nbsp; When a customer places an order from a public terminal, attackers are unable to retrieve the submitted data from the browser history or from proxy servers.</p>
  <p />
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>