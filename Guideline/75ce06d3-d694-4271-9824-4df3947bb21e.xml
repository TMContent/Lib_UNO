<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1389035672" Content_Hash="-1467890499">
  <Metadata>
    <Id>75ce06d3-d694-4271-9824-4df3947bb21e</Id>
    <Id_History>75ce06d3-d694-4271-9824-4df3947bb21e,2fe3027c-779b-444b-b419-6c15c76da75a,</Id_History>
    <Library_Id>51eb81c3-1d23-4146-ba83-8a6bb9233c11</Library_Id>
    <Title>Free Only Dynamically Allocated Memory</Title>
    <Category>Unmanaged Code</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Guideline</Type>
    <DirectLink>Free Only Dynamically Allocated Memory</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>C++</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>C&amp;#43;&amp;#43;</li>
  </ul>
  <h1>What to Do</h1>
  <p>Write code in such a way that only dynamically allocated memory is explicitly deallocated.</p>
  <h1>Why</h1>
  <p>Deleting objects that were not allocated dynamically may result in an arbitrary code execution vulnerability if that memory is later reused by calling the new operator.</p>
  <h1>How</h1>
  <p>Perform the following actions to assure that only dynamically allocated memory is freed:</p>
  <ol>
    <li>
      <p>
        <strong>Search for deallocation code.</strong> Review code to find all places where memory is being deallocated by the delete operator or free() function calls.</p>
      <li>
        <p>
          <strong>Identify objects being deleted.</strong> Search for the declarations of the objects that are being deleted.</p>
        <li>
          <p>
            <strong>Remove unnecessary deallocation code.</strong> Remove all delete operators and free() function calls that delete objects, which are not created by calling the new operator.</p>
        </li>
      </li>
    </li>
  </ol>]]></Data>
  </Content>
</TeamMentor_Article>