<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1070649418" Content_Hash="-353203256">
  <Metadata>
    <Id>0e6dbf96-d62b-4868-a28f-2e9fb2bdf909</Id>
    <Id_History>e72c7bb8-3444-4396-9477-c4f423888496,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Avoid Credentials in Connection Strings</Title>
    <Category>Configuration</Category>
    <Phase>Implementation</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Avoid Credentials in Connection Strings</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Where possible, use Windows authentication to connect to the database. Connection strings that use Windows authentication do not contain credentials because the application's process or thread identity is used to connect.</p>
  <h1>Why</h1>
  <ul>
    <li>No credentials are passed over the network during authentication and you do not need to embed user names and passwords in the database connection string. This means that malicious users or attackers cannot obtain the credentials either by monitoring the network or by viewing connection strings inside your configuration files. </li>
    <li>The use of strong passwords and other password policies, such as password expiration, can be enforced through Microsoft Active DirectoryÂ® directory service security policy. </li>
    <li>Active Directory is the central point of account maintenance. There are no separate accounts in the database.</li>
  </ul>
  <h1>When</h1>
  <p>Use Windows authentication whenever possible.&amp;nbsp; However, you might not be able to use Windows authentication if: </p>
  <ul>
    <li>Your database client and database server are separated by a firewall which prevents Kerberos or NTLM authentication. </li>
    <li>Your application server and database server are in separate domains with no trust. </li>
  </ul>
  <p>In these situations, you can use mirrored local accounts.</p>
  <h1>How</h1>
  <p>To use Windows authentication, you need to use an appropriately formatted connection string, the precise syntax of which varies depending on the provider you are using. </p>
  <ul>
    <li>With <b>SqlClient</b>, use <b>Integrated Security=true</b>. </li>
    <li>With <b>SqlClient</b>: <b>OleDb</b>, use <b>Integrated Security=SSPI</b>. </li>
    <li>With <b>Odbc</b>, use <b>Trusted_Connection=yes</b>. </li>
    <li>With <b>OracleClient</b>, use <b>Integrated Security=yes</b>.</li>
  </ul>
  <p>For ASP.NET 2.0 applications, you should store connection strings in the &lt;connectionStrings&gt; section of your application's Web.config file. The connection string used with Windows authentication must include either the Trusted_Connection=Yes attribute, or the equivalent attribute Integrated Security=SSPI:</p>
  <blockquote>
    <pre>&amp;nbsp;&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name="MyLocalSQLServer" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="Initial Catalog=pubs;User Id=sa;Password=asdasd;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; data source=localhost;Integrated Security=SSPI;"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; providerName="System.Data.SqlClient"/&gt;<br />&lt;/connectionStrings&gt;</pre>
  </blockquote>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>