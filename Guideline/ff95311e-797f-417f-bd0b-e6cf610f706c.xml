<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="991735125" Content_Hash="907680232">
  <Metadata>
    <Id>ff95311e-797f-417f-bd0b-e6cf610f706c</Id>
    <Id_History>ff95311e-797f-417f-bd0b-e6cf610f706c,db9aad12-5f67-476b-99da-7adb12de1f72,</Id_History>
    <Library_Id>c4b9cb6a-4561-4451-9b6c-4e59d73584f6</Library_Id>
    <Title>Do Not Leave Passwords in Memory</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Guideline</Type>
    <DirectLink>Do Not Leave Passwords in Memory</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>Applications written using Servlets or JSP.</li>
  </ul>
  <h1>What to Do</h1>
  <p>Clear passwords from memory after their use.</p>
  <h1>Why</h1>
  <p>Passwords are sensitive data that are used to establish a trust relationship. Leaving them in memory after their use can expose them to an attacker.</p>
  <h1>When</h1>
  <p>If your application handles passwords, do not leave them in memory.</p>
  <h1>How</h1>
  <p>Passwords can be cleared by overwriting the memory where the passwords were stored. Deallocating the memory is not sufficient since the Java garbage collector gives no guarantee as to when the deallocated memory will be collected or reused.</p>
  <p>Be aware that any time you assign a password to a new buffer, or pass it as a parameter, the password is being copied and is now in memory in a new location. When clearing memory, ensure you clear every instance.</p>
  <p />Keep in mind the following considerations when handling passwords: <ol><li><p><strong>Identify all password use. </strong>Locate all code segments, both functions and data members, that handle passwords. These can be functions and data structures scattered throughout the application. If the application cannot be managed as easy, centralize all code that handles passwords. </p><li><p><strong>Store passwords in mutable objects. </strong>Mutable objects allow the data in them to be overwritten. This is especially useful in Java as objects are required to be deallocated through the garbage collector. Therefore, there is no certainty when the password instance will be deallocated from the current process space. Examples of mutable objects include character arrays (i.e. <em>char&amp;#91;&amp;#93;</em>). Java strings, however, are not mutable objects; therefore, once allocated, their current memory space cannot be modified. When storing a password into an array, make sure you use arrays of primitive data types such as <em>byte</em>, <em>char</em>, and <em>int</em> but not arrays of the wrapper classes that Java provides for primitive types such as <em>Byte</em>, <em>Character</em>, and <em>Integer</em>. </p><li><p><strong>Clear all password instances. </strong>Make sure that all memory locations, where passwords have been stored, are cleared/overwritten after their use. Losing a pointer to a password instance can result in not cleaning that particular memory and allowing the password to leak. </p></li></li></li></ol><h1>Problem Example</h1><p>The following code makes a use of a password. Although the pointer to the string is removed after garbage collection is called, Java does not guarantee the data will be erased.</p><pre>String pass = getPassword();<br />...<br />pass = null;<br />System.gc();</pre><h1>Solution Example</h1><p>The following code makes use of a password. After the password is used, the memory is explicitly cleared. Since strings are immutable objects, the code uses character arrays to store passwords. This makes it possible to overwrite the data after its use. </p><pre>char&amp;#91;&amp;#93; pass = getPassword();<br />...<br />clearPassword(pass);<br />pass = null;<br />...<br />void clearPassword(char&amp;#91;&amp;#93; pass)<br />&amp;#123;<br />      for(int i=0; i&lt;pass.length; i&amp;#43;&amp;#43;)<br />      &amp;#123;<br />            pass&amp;#91;i&amp;#93; = ' ';<br />      &amp;#125;<br />&amp;#125;</pre><h1>Additional Resources</h1><ul><li>For more information about the Java garbage collection, see: <a href="http://java.sun.com/docs/hotspot/gc1.4.2/">Tuning Garbage Collection with the 1.4.2 JavaTM Virtual Machine</a>. <li>To learn more about writing secure code in Java, see: <a href="http://java.sun.com/security/seccodeguide.html#gcg16">Secure Coding Guidelines for the Java Programming Language, Version 3.0</a>. <li>To learn more about primitive data types in Java, visit: <a href="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/datatypes.html">Primitive Data Types</a>.</li></li></li></ul><h1>Authentication Guidelines</h1><ul><li><a href="/article/989e27ec-ffdf-4006-88bd-1c09fc991a28">Centralize Authentication Controls</a></li><li><a href="/article/d3a69ef7-2c63-41bc-81e4-803b0ea199d8">Use Server-side Authentication</a></li><li><a href="/article/38d12903-9c3b-46bd-9f5e-f223c3272624">Make Sure Authentication Controls Fail Securely</a></li><li><a href="/article/84fd606b-e2f2-4c48-9c6e-6b5e780c6163">Force Re-authentication When Executing Critical Functionality</a></li><li><a href="/article/c566cabe-2463-4d24-8763-22e8468d167e">Validate Usernames Before Processing Them</a></li><li><a href="/article/7ba2d49c-ff53-4755-97ae-0efcb0aa9c22">Lock Accounts After Consecutive Failed Login Attempts</a></li><li><a href="/article/4b5b1f05-aa9a-4ebc-8b2e-3cecabed03e1">Enforce Strong Passwords</a></li><li><a href="/article/ea25af24-8eca-45ad-9f41-94bad8880247">Force Password Renewal</a></li><li><a href="/article/c7825052-f281-4ac8-a786-41b776219af6">Mask All Password Fields</a></li><li><a href="/article/c4d9269f-9157-4919-952c-f0d14ccd7f60">Verify the Application's Authenticity to the User</a></li><li><a href="/article/b4f83e8e-3223-4e49-bc9c-56c8c7268582">Place Logout Links on All Pages that Require Authentication</a></li><li><a href="/article/ff95311e-797f-417f-bd0b-e6cf610f706c">Do Not Leave Passwords in Memory</a></li><li><a href="/article/bcf8adb4-8186-4b97-b490-4fa33f506bfd">Limit Access to the Credential Store</a></li><li><a href="/article/0dba2e1f-7d49-4d91-bc93-ad85480f784a">Consider Using JAAS for Authentication</a></li><li><a href="/article/9cf8aed6-22a5-49c1-a0ce-1d8e5366bebf">Consider Using Two Factor Authentication</a></li></ul><h1>Authentication Checklists</h1><ul><li><a href="/article/4e431329-73aa-41f7-b397-9b7e26294a4c">Authentication Controls Are Centralized</a></li><li><a href="/article/b103207d-73e3-4964-9a00-2b15c3e012b8">Server-side Authentication Is Used</a></li><li><a href="/article/ded06846-ad7f-4044-87d2-8bbb6b885713">Authentication Controls Fail Securely</a></li><li><a href="/article/df093ee3-ad7b-4191-935c-8bb0cad78d98">Re-authentication Is Enforced When Executing Critical Functionality</a></li><li><a href="/article/f8586505-72f9-4c14-a365-3e5049e5ca57">Usernames Are Validated Before Use</a></li><li><a href="/article/61e0e2b4-2f09-429a-b72f-f8933f2fa9b6">Accounts Are Locked After Consecutive Failed Login Attempts</a></li><li><a href="/article/7401862f-ae81-4f31-9340-981b0ec5a854">Strong Passwords Are Enforced</a></li><li><a href="/article/12889762-1d65-4b7d-a90a-58ff6c23d1e4">Password Renewal Is Enforced</a></li><li><a href="/article/09f994c9-a401-404c-bdc9-210038eba658">All Password Fields Are Masked</a></li><li><a href="/article/35851f18-13a0-4bf8-88cc-d35c371cfb12">The Application's Authenticity Is Verified to the User</a></li><li><a href="/article/493e0e57-254a-4697-8fa1-c93e706d416d">All Pages that Use Authentication Have Logout Links</a></li><li><a href="/article/55488f2e-ed85-4f0f-9f83-1d90a5d10bd0">Passwords Are Not Left in Memory</a></li><li><a href="/article/9031f577-80b0-4a2e-9652-7b470439a0df">Access to the Credential Store Is Limited</a></li></ul><h1>Authentication Testing</h1><ul><li><a href="/article/f32846cf-35f6-40fe-8517-f0ac8a415383">How to Test for Account Lockout Bugs in Java</a></li></ul>]]></Data>
  </Content>
</TeamMentor_Article>