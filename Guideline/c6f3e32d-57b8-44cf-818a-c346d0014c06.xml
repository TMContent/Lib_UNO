<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="251459405" Content_Hash="1894016880">
  <Metadata>
    <Id>c6f3e32d-57b8-44cf-818a-c346d0014c06</Id>
    <Id_History>c6f3e32d-57b8-44cf-818a-c346d0014c06,5382c8ea-43c7-475a-a7ea-715e343c1e5e,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Do Not Store Plaintext Sensitive Data</Title>
    <Category>Cryptography</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Do Not Store Plaintext Sensitive Data</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>Use encryption to avoid storing plaintext sensitive data in application configuration files or a database.</p>
  <h1>Why</h1>
  <p>Sensitive application data can be compromised if stored in plaintext. Unauthorized access by users or attackers can lead to information disclosure.</p>
  <h1>When</h1>
  <p>If your application accepts, or processes, user sensitive or private data that should not be readable by anyone except the owning user or other authorized parties. </p>
  <h1>How</h1>
  <p>Use the following steps when storing sensitive data:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive information.</strong> Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information and private keys.&amp;nbsp;</p>
      <p>Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>
      <ul>
        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>
        <li>Information that a user provides that they would not want shared with other users of the application. </li>
        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Choose an appropriate protection mechanism.</strong> Choosing the appropriate protection mechanism depends on the purpose and use of the sensitive data.</p>
      <ul>
        <li>
          <p>
            <strong>Hashing the application data.</strong> Use hashing if the application data will be used only for comparison purposes. If hashing is used, choose a longer salt, 16 or more bits. Assuming that the produced hash is compromised, longer salts makes it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it into a configuration file. Always use a cryptographically secure random number generator such as RNGCryptoServiceProvider to generate the salt. Example:</p>
          <blockquote>
            <pre>public static byte[] GenerateSalt()<br />{<br />    byte[] randBytes = new byte[4];<br />    RNGCryptoServiceProvider gen = new RNGCryptoServiceProvider();<br />    gen.GetNonZeroBytes(randBytes);<br />    return randBytes;<br />}</pre>
          </blockquote>
        </li>
        <li>
          <p>
            <strong>Encrypting the application data.</strong> Use encryption if the application data will be retrieved at a later stage. The encrypted data can be stored either in configuration files on the filesystem or in a database. Both of these scenarios are described below:</p>
          <p>
            <strong>Using encrypted configuration files</strong>: In ASP.NET applications, there are two libraries that provide encryption facilitiesâ€”DPAPI and RSA. If your application is deployed in a Web farm, you should use the RSA protected configuration provider due to the ease with which RSA keys can be exported. Otherwise you should use the DPAPI protected configuration provider. </p>
          <p>
            <strong>Using encryption in the database</strong>: To store encrypted data in SQL Server 2005 and later, please refer to the <a href="/article/51b6776e-c771-4d63-b77d-b16ba295a62f">Encrypt Sensitive Data in the Database</a> guideline.</p>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the appropriate protection mechanism.</strong> Evaluate the code and determine the places where sensitive data is transmitted. Apply the established protection mechanism at each location.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>An ASP.NET application contains the following <strong>appSettings</strong> element in its web.config file:</p>
  <blockquote>
    <pre>&lt;appSettings&gt;<br />    &lt;add key="Name" value="John Doe" /&gt;<br />    &lt;add key="SSN" value="123-45-6789" /&gt;<br />&lt;/appSettings&gt;</pre>
  </blockquote>
  <p>Since the name and social security number are in plaintext they would be easily readable by any attacker who gains access to the server.</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application contains something similar to the following in place of the <strong>appSettings</strong> element in its web.config file:</p>
  <blockquote>
    <pre>  &lt;EncryptedData&gt;<br />    &lt;CipherData&gt;<br />      &lt;CipherValue&gt;AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAexuIJ/8oFE+sGTs7j<br />		BKZdgQAAAACAAAAAAADZgAAqAAAABAAAAAKms84dyaCPAeaSC1dIMI<br />		BAAAAAASAAACgAAAAEAAAAKaVI6aAOFdqhdc6w1Er3HMwAAAAcZ00M<br />		ZOz1dI7kYRvkMIn/BmfrvoHNUwz6H9rcxJ6Ow41E3hwHLbh79IUWii<br />		Np0VqFAAAAF2sXCdb3fcKkgnagkHkILqteTXh&lt;/CipherValue&gt;<br />    &lt;/CipherData&gt;<br />  &lt;/EncryptedData&gt;</pre>
  </blockquote>
  <p>The name and social security number have been encrypted using the aspnet_regiis utility and are not easily readable by an attacker who gains access to the server.</p>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/51b6776e-c771-4d63-b77d-b16ba295a62f">Guideline: Encrypt Sensitive Data in the Database</a>
    </li>
    <li>
      <a href="/article/cd4ccbbb-be9c-4ff4-8b20-d116819b634b">Guideline: Use a Secure Key Storage Location </a>
    </li>
    <li>
      <a href="/article/faada3f5-3f50-42fc-b863-5058e3d848cb">Guideline: Protect Sensitive Data Inside Configuration Files </a>
    </li>
    <li>
      <a href="/article/e1992e93-39c6-4508-9b16-0e07b0939c37">Guideline: Secure Connection Strings </a>
    </li>
    <li>
      <a href="/article/7d83d845-cd2b-4067-bb4c-5fbb890b9c9e">Attack: Information Disclosure Attack</a>
    </li>
    <li>
      <a href="/article/15880c2e-33cb-4bde-9744-5f9239c7f03d">Checklist Item: Plaintext Sensitive Data is Not Stored</a>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>