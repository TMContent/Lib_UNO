<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2130280256" Content_Hash="625330730">
  <Metadata>
    <Id>b070122f-f1d1-47da-a378-57f845d5db61</Id>
    <Id_History>b070122f-f1d1-47da-a378-57f845d5db61,7d4289ee-7a54-4450-8537-0984382bf987,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>.NET Encrypt Communication Links</Title>
    <Category>Communication Security</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET</Technology>
    <Type>Code Example</Type>
    <DirectLink>Encrypt Communication Links</DirectLink>
    <Tag>ASP.NET,ASP.NET 3.5,ASP</Tag>
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* .NET


## Summary ##

Encrypt the communication channels when interacting with other software across the network. Encrypting the communication links allows the application to preserve confidentiality and integrity of the transmitted data.


## Problem Example ##

The following code establishes a connection between two servers. Unfortunately, the communication is not encrypted and it is possible for an attacker to eavesdrop on the connection.

~~~~
public Stream Connect(string remoteHost, int remotePort)
{
    TcpClient client = new TcpClient(remoteHost, remotePort);
    NetworkStream netStream = client.GetStream();
    return netStream;
}
~~~~


## Solution Example ##

The following code establishes a connection between two servers. Because the communication is encrypted the confidentiality of the data in transit is preserved and it is impossible for an attacker to eavesdrop on the connection.

~~~~
public Stream Connect(string remoteHost, int remotePort)
{
    TcpClient client = new TcpClient(remoteHost, remotePort);
    SslStream netStream = new SslStream(client.GetStream(), false,
               new RemoteCertificateValidationCallback(this.ValidateSSLCertificate));
    try
    {
        netStream.AuthenticateAsClient(remoteHost);
    }
    catch (AuthenticationException ae)
    {
        client.Close();
        throw ae;
    }
    return netStream;
}
~~~~

---
Adapted from Microsoft patterns & practices guidance.]]></Data>
  </Content>
</TeamMentor_Article>