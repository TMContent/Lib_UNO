<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="163354598" Content_Hash="-363801401">
  <Metadata>
    <Id>3839edb9-a877-4e4a-8826-f683566ad67a</Id>
    <Id_History>3839edb9-a877-4e4a-8826-f683566ad67a,13ea1888-4491-4463-b9fd-3195df304de4,</Id_History>
    <Library_Id>51eb81c3-1d23-4146-ba83-8a6bb9233c11</Library_Id>
    <Title>Validate Pointers Before Use</Title>
    <Category>Unmanaged Code</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Guideline</Type>
    <DirectLink>Validate Pointers Before Use</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>C&amp;#43;&amp;#43;</li>
  </ul>
  <h1>What to Do</h1>
  <p>Define a pointer validation function and use it before dereferncing pointers.</p>
  <h1>Why</h1>
  <p>Invalid pointers may cause the program to crash or allow an attacker to execute artbitrary code.</p>
  <h1>When</h1>
  <p>Pointer validation is most useful when pointers are passed as arguments to functions.</p>
  <h1>How</h1>
  <p>Perform the following actions to implement a pointer validation function:</p>
  <ol>
    <li>
      <p>
        <strong>Add a pointer validation function.</strong> You should have a class or library dedicated to input and data validation. Add a function to this class or library to validate pointers. The pointer validation function should throw exceptions when invalid pointers are detected.</p>
      <li>
        <p>
          <strong>Check for null pointers.</strong> The first and most obvious thing to check for is null. Add code to check that the pointer is not null to your validation function.</p>
        <li>
          <p>
            <strong>Use dynamic_cast.</strong>&amp;nbsp; When converting an incompatible pointer type, dynamic_cast returns a null pointer.&amp;nbsp; This makes dynamic_cast suitable for checking whether a pointer points to an object of a correct type. For the purpose of pointer validation, use it like this: <br />if (NULL == dynamic_cast(pointer)) //error</p>
          <li>
            <p>
              <strong>Use Win32 APIs.</strong> The following APIs may be used to validate pointers on Windows platforms: </p>
            <ul>
              <li>IsBadReadPtr<li>IsBadWritePtr<li>IsBadCodePtr<li>IsBadStringPtr</li></li></li></li>
            </ul>
            <li>
              <p>
                <strong>Validate pointers.</strong> Use the pointer validation function before dereferencing them. This is most likely to be useful when pointers are passed as arguments to functions. In such cases, pointers should be validated in the very beginning of function code.</p>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ol>]]></Data>
  </Content>
</TeamMentor_Article>