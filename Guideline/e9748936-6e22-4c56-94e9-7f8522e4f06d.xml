<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1858646381" Content_Hash="-907549900">
  <Metadata>
    <Id>e9748936-6e22-4c56-94e9-7f8522e4f06d</Id>
    <Id_History>e9748936-6e22-4c56-94e9-7f8522e4f06d,155fbb17-007a-4926-b5fe-4046a7ae4db4,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Convert Integers Correctly</Title>
    <Category>Memory Management</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Guideline</Type>
    <DirectLink>Convert Integers Correctly</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>C++</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* C++


## What to Do ##

Convert integers in a way that does not cause truncation or lose sign information.


## Why ##

If data is lost during conversion, an unpredictable/unintended value may be stored in a variable. If this variable is used for program flow control, memory operations, or array indexing, an arbitrary code execution vulnerability may result.


## How ##

Identify all integer conversion operations. Add range checks to verify that the result of integer conversion is valid before assigning the result to a variable.


## Problem Example ##

The following code may result in truncation, because an unsigned integer has a larger maximum value than a signed integer. The exact error may be different on different platforms.

~~~~
unsigned short a = 50000;
signed short b = static_cast<signed short>(a);
~~~~


## Solution Example ##

To fix the problem example above, add range checks before assigning the result of conversion to a variable.

~~~~
unsigned short a = 50000;
if (a > SHRT_MIN && a < SHRT_MAX) signed short b = static_cast<signed short>(a);
else {/*handle error*/}
~~~~]]></Data>
  </Content>
</TeamMentor_Article>