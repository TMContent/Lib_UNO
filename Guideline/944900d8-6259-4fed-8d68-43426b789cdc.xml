<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1622381250" Content_Hash="1083637255">
  <Metadata>
    <Id>944900d8-6259-4fed-8d68-43426b789cdc</Id>
    <Id_History>bc6f1a9f-0866-4002-a4f1-354e9beeee4f,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Isolate Applications Using Medium Trust In Hosted Environments</Title>
    <Category>Code Access Security</Category>
    <Phase>Deployment</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Isolate Applications Using Medium Trust In Hosted Environments</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Isolate multiple applications on a shared server from one another and from shared system resources by using the Medium trust policy setting in the machine-level config file. </p>
  <h1>Why</h1>
  <p>If a hosted, malicious application is&amp;nbsp;able to read another application's data or interfere with another application in any way the integrity of all accessible applications on the server has effectively&amp;nbsp;been compromised. Applications in a hosted environment should not trust each other, and lacking enforcement of application&amp;nbsp;isolation prevents applications from effectively protecting themselves.</p>
  <h1>When</h1>
  <p>Whenever multiple applications operate in a shared hosting environment, use&amp;nbsp;the medim trust&amp;nbsp;&amp;nbsp;privilege level to&amp;nbsp;isolate the applications&amp;nbsp;from each other. If your application needs operations that are not available in medium trust such as event log access, or file I/O, create a custom trust policy rather then&amp;nbsp;elevating privilege&amp;nbsp;to&amp;nbsp;a higher policy level. Medium trust is appropriate when the following permission are not required or needs restricted permission&amp;nbsp;for application's operating capablities:</p>
  <ul>
    <li>
      <strong>OleDbPermission</strong>. This means the application does not use the ADO.NET managed OLE DB data provider to access databases. However, the application can use the managed SQL Server provider to access SQL Server databases. </li>
    <li>
      <strong>EventLogPermission.</strong>&amp;nbsp;This means the application does not use the Windows event log. </li>
    <li>
      <strong>ReflectionPermission</strong>. This means the application&amp;nbsp;does not&amp;nbsp;use reflection. </li>
    <li>
      <strong>RegistryPermission.&amp;nbsp;</strong>This means the application does not access the registry. </li>
    <li>
      <strong>WebPermission</strong> is restricted. This means the application&amp;nbsp;communicate only with an address&amp;nbsp;or range of addresses that you define in the <strong>&lt;trust&gt;</strong> element. </li>
    <li>
      <strong>FileIOPermission</strong> is restricted. This means the application access files only in your application's virtual directory hierarchy. Your application performs Read, Write, Append, and PathDiscovery operations in its&amp;nbsp;virtual directory hierarchy. </li>
    <li>The application does not call&amp;nbsp;unmanaged code </li>
    <li>The application does not use enterprise services</li>
  </ul>
  <h1>How</h1>
  <p>To enforce Medium trust for all Web applications on a server, use the following configuration in the machine-level Web.config file:</p>
  <pre>&lt;location allowOverride="false"&gt;<br />&amp;nbsp; &lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp; &lt;trust level="Medium" originUrl="" /&gt;<br />&amp;nbsp; &lt;/system.web&gt;<br />&amp;nbsp;&lt;/location&gt;</pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>