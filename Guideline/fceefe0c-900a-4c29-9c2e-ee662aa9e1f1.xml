<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="672462200" Content_Hash="-1498313326">
  <Metadata>
    <Id>fceefe0c-900a-4c29-9c2e-ee662aa9e1f1</Id>
    <Id_History>fceefe0c-900a-4c29-9c2e-ee662aa9e1f1,a1ffa183-ce84-403a-a253-4ad2231ba8db,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Use Structured Exception Handling</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Use Structured Exception Handling</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Servlets or JSP


## Summary ##

Structured exception handling improves robustness and avoids leaving the application in an inconsistent state. It provides the application more information regarding the encountered error and minimizes the risk of information disclosure.


## Problem Example ##

The following code shows part of an implementation of a JAAS Login Module. Because the code uses a single exception handler, the application cannot log the exception information appropriately.

~~~~
public boolean login() throws LoginException{

      if(callbackHandler == null)
      {
            throw new LoginException("Authentication failed.");
      }

      // Prompt strings and echo flag not used in callbacks
      Callback[] callbacks = new Callback[2];
      callbacks[0] = new NameCallback("User: ");
      callbacks[1] = new PasswordCallback("Pass: ", false);

      try
      {
            callbackHandler.handle(callbacks);
            NameCallback nameCall = (NameCallback)callbacks[0];
            PasswordCallback pwdCall = (PasswordCallback)callbacks[1];

            user = nameCall.getName();
            char[] tempPass = pwdCall.getPassword();
            if(tempPass == null)
            {
                  pass = null;
            }
            else
            {
                  pass = new char[tempPass.length];
                  common.copyArray(tempPass, pass);
            }

            pwdCall.clearPassword();

            // Verify credentials
            if(validUser())
            {
                  succeeded = true;
                  return true;
            }
            else
            {
                  succeeded = false;
                  clearCredentials();
                  throw new FailedLoginException("Authentication failed.");
            }
      }

      // The application has a single exception handler when
      // IOException and UnsupportedCallbackException are expected
      catch (Exception e)
      {
            // Add appropriate logging and exception handling mechanisms.

            // Consult the Logging section

            throw new LoginException("Authentication failed.");
      }
}
~~~~


## Solution Example ##

The following code shows part of an implementation of a JAAS Login Module. Because the code uses structured exception handling, the application can log the exception information appropriately.

~~~~
public boolean login() throws LoginException{


      if(callbackHandler == null)
      {
            throw new LoginException("Authentication failed.");
      }

      // Prompt strings and echo flag not used in callbacks
      Callback[] callbacks = new Callback[2];
      callbacks[0] = new NameCallback("User: ");
      callbacks[1] = new PasswordCallback("Pass: ", false);

      try
      {
            callbackHandler.handle(callbacks);
            NameCallback nameCall = (NameCallback)callbacks[0];
            PasswordCallback pwdCall = (PasswordCallback)callbacks[1];

            user = nameCall.getName();
            char[] tempPass = pwdCall.getPassword();
            if(tempPass == null)
            {
                  pass = null;
            }
            else
            {
                  pass = new char[tempPass.length];
                  common.copyArray(tempPass, pass);
            }

            pwdCall.clearPassword();

            // Verify credentials
            if(validUser())
            {
                  succeeded = true;
                  return true;
            }
            else
            {
                  succeeded = false;
                  clearCredentials();
                  throw new FailedLoginException("Authentication failed.");
            }
      }


      // The application uses structured exception handling for
      // the expected IOException and UnsupportedCallbackException
      catch (IOException ioe)
      {
            // Add appropriate logging and exception handling mechanisms.
            // Consult the Logging section

            throw new LoginException("Authentication failed.");
      }
      catch (UnsupportedCallbackException uce)
      {
            // Add appropriate logging and exception handling mechanisms.

            // Consult the Logging section

            throw new LoginException("Authentication failed.");
      }
      catch (Exception e)
      {
            // Add appropriate logging and exception handling mechanisms.

            // Consult the Logging section

            throw new LoginException("Authentication failed.");
      }
  }
~~~~]]></Data>
  </Content>
</TeamMentor_Article>