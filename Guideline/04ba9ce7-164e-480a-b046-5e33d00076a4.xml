<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1648361803" Content_Hash="44949432">
  <Metadata>
    <Id>04ba9ce7-164e-480a-b046-5e33d00076a4</Id>
    <Id_History>d2c0e044-0894-4d27-bb71-8bf1845da708,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Do Not Serialize Sensitive Data</Title>
    <Category>Serialization</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Do Not Serialize Sensitive Data</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>If you must serialize your class and it contains sensitive data, avoid serializing the fields that contain the sensitive data. Either implement <b>ISerializable</b> to control the serialization behavior or decorate fields that contain sensitive data with the [<b>NonSerialized</b>] attribute. </p>
  <h1>Why</h1>
  <p>This is important because serialization places the data in memory, often in preparation for sending it over a network, making it easier for an attacker to gain access to it.</p>
  <h1>When</h1>
  <p>You need to be able to marshal object by value across a .NET remoting boundary (that is, across application domains, processes, or computers) or if you want to be able to persist the object state to create a flat data stream, perhaps for storage on the file system.</p>
  <h1>How</h1>
  <p>By default, all private and public fields are serialized. </p>
  <p>The following example shows how to use the <b>[NonSerialized]</b> attribute to ensure that a specific field which contains sensitive data cannot be serialized.</p>
  <pre>[Serializable]<br />public class Employee {<br />&amp;nbsp; // OK for name to be serialized<br />&amp;nbsp; private string name;<br />&amp;nbsp; // Prevent salary being serialized<br />&amp;nbsp; [NonSerialized] private double annualSalary;<br />&amp;nbsp; . . .<br />}</pre>
  <p>Alternatively, implement the <b>ISerializable</b> interface and explicitly control the serialization process. If you must serialize the sensitive item or items of data, consider encrypting the data first. The code that de-serializes your object must have access to the decryption key.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>