<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-986712101" Content_Hash="-459948851">
  <Metadata>
    <Id>81f61d02-6521-4d0e-9c4b-7f96889cef76</Id>
    <Id_History>81f61d02-6521-4d0e-9c4b-7f96889cef76,48e0b35d-f01f-4597-8b4f-ffaf44973151,</Id_History>
    <Library_Id>51eb81c3-1d23-4146-ba83-8a6bb9233c11</Library_Id>
    <Title>Create Files Safely on Windows</Title>
    <Category>File I/O</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Guideline</Type>
    <DirectLink>Create Files Safely on Windows</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>C++</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>C&amp;#43;&amp;#43;</li>
    <li>Windows</li>
  </ul>
  <h1>What to Do</h1>
  <p>Create files safely.</p>
  <h1>Why</h1>
  <p>Allowing user input in the lpFileName parameter of CreateFile() can lead to the creation or opening of unexpected objects.</p>
  <h1>When</h1>
  <p>Apply this guideline whenever creating files programmatically on Windows systems.</p>
  <h1>How</h1>
  <p>Perform the following actions to assure that files are created safely on Windows:</p>
  <ol>
    <li>
      <p>
        <strong>Review code.</strong> Search for all calls to the CreateFile() function.</p>
    </li>
    <li>
      <p>
        <strong>Validate file handles.</strong> Use GetFileType() to ensure that you are creating a file instead of some other unexpected object. By calling GetFileType on hfile (the return value of CreateFile()), you can ensure that only a file is created.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>In the code example below, the code is calling CreateFile and passing a command line argument (argv&amp;#91;1&amp;#93;) into the lpFileName parameter. A malicious attacker can exploit this code to force your application to open an unexpected object other than a file.</p>
  <pre>int main(int argc, char &amp;#42;argv&amp;#91;&amp;#93;)<br />&amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; HANDLE hFile = CreateFile(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; argv&amp;#91;1&amp;#93;,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; GENERIC_READ &amp;#124; GENERIC_WRITE,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NULL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NULL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; CREATE_ALWAYS,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FILE_ATTRIBUTE_NORMAL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NULL);<br />&amp;#125;</pre>
  <h1>Solution Example</h1>
  <p>Use GetFileType() to ensure that you are creating a file instead of some other unexpected object.</p>
  <pre>int main(int argc, char &amp;#42;argv&amp;#91;&amp;#93;)<br />&amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; HANDLE hFile = CreateFile(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; argv&amp;#91;1&amp;#93;,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; GENERIC_READ &amp;#124; GENERIC_WRITE,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NULL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NULL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; CREATE_ALWAYS,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FILE_ATTRIBUTE_NORMAL,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NULL);<br />&amp;nbsp;&amp;nbsp; if (GetFileType(hFile) &amp;#33;= FILE_TYPE_DISK)<br />&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;// Error Handling<br />&amp;nbsp;&amp;nbsp;CloseHandle(hFile);<br />&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;#125;</pre>]]></Data>
  </Content>
</TeamMentor_Article>