<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-986712101" Content_Hash="-459948851">
  <Metadata>
    <Id>81f61d02-6521-4d0e-9c4b-7f96889cef76</Id>
    <Id_History>81f61d02-6521-4d0e-9c4b-7f96889cef76,48e0b35d-f01f-4597-8b4f-ffaf44973151,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Create Files Safely on Windows</Title>
    <Category>File I/O</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>How To</Type>
    <DirectLink>Create Files Safely on Windows</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>C++</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* C++
* Windows


## What to Do ##

Create files safely.


## Why ##

Allowing user input in the lpFileName parameter of CreateFile() can lead to the creation or opening of unexpected objects.


## When ##

Apply this guideline whenever creating files programmatically on Windows systems.


## How ##

Perform the following actions to assure that files are created safely on Windows:

1. **Review code.** Search for all calls to the CreateFile() function.

2. **Validate file handles.** Use GetFileType() to ensure that you are creating a file instead of some other unexpected object. By calling GetFileType on hfile (the return value of CreateFile()), you can ensure that only a file is created.


## Problem Example ##

In the code example below, the code is calling CreateFile and passing a command line argument (argv[1]) into the lpFileName parameter. A malicious attacker can exploit this code to force your application to open an unexpected object other than a file.

~~~~
int main(int argc, char *argv[])
{
    HANDLE hFile = CreateFile(
      argv[1],
      GENERIC_READ | GENERIC_WRITE,
      NULL,
      NULL,
      CREATE_ALWAYS,
      FILE_ATTRIBUTE_NORMAL,
      NULL);
}
~~~~


## Solution Example ##

Use GetFileType() to ensure that you are creating a file instead of some other unexpected object.

~~~~
int main(int argc, char *argv[])
{
    HANDLE hFile = CreateFile(
      argv[1],
      GENERIC_READ | GENERIC_WRITE,
      NULL,
      NULL,
      CREATE_ALWAYS,
      FILE_ATTRIBUTE_NORMAL,
      NULL);
   if (GetFileType(hFile) != FILE_TYPE_DISK)
   {
  // Error Handling
  CloseHandle(hFile);
   }
}
~~~~]]></Data>
  </Content>
</TeamMentor_Article>