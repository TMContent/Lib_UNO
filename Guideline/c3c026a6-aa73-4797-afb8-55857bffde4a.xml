<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2058930141" Content_Hash="1117845268">
  <Metadata>
    <Id>c3c026a6-aa73-4797-afb8-55857bffde4a</Id>
    <Id_History>c3c026a6-aa73-4797-afb8-55857bffde4a,317e7229-e147-4f0d-9891-b787f834fb22,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>0sink dupe Do Not Leak Information to the Client</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Design</Phase>
    <Technology>Web Application</Technology>
    <Type>Guideline</Type>
    <DirectLink>Do Not Leak Information to the Client</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Do</h1>
  <p>Do not reveal internal system or application details, such as stack traces, SQL statement fragments, and table or database names to the client. Ensure that this type of information is not allowed to propagate to the end user or beyond your current trust boundary.</p>
  <h1>Why</h1>
  <p>To prevent&amp;nbsp;a malicious user who can exploit the overly detailed information that an error message contains. A malicious user could use system-level diagnostic information to learn about your application and probe for weaknesses to exploit in future attacks. </p>
  <h1>When</h1>
  <p>Whenever exceptions occur, return only the concise error messages to the client.</p>
  <h1>How</h1>
  <p>In the event of a failure, do not expose information that could lead to information disclosure.<b></b>For example, do not expose stack trace details that include function names and line numbers in the case of debug builds (which should not be used on production servers). Instead, return generic error messages to the client.</p>
  <p>Review the type of information that could be revealed to an attacker if he or she obtained a session ID. In ASP.NET applications, the session ID is properly randomized so that it is hard to guess session IDs. However, there are other ways an attacker can get this information. Make sure that the session ID is sent over SSL, and make sure that the session timeout is short.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a>&amp;nbsp; </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>