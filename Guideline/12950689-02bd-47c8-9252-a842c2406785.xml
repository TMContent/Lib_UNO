<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1996521615" Content_Hash="4194782">
  <Metadata>
    <Id>12950689-02bd-47c8-9252-a842c2406785</Id>
    <Id_History>3234dc7a-b17e-4bfc-8163-24826be8bf1e,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use SSL Between the Web Browser And Web Server When Pages Need to Be Encrypted</Title>
    <Category>Communication Security</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use SSL Between the Web Browser And Web Server When Pages Need to Be Encrypted</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use SSL as an encrypted communication channel to protect data sent between servers and web browsers. SSL can be used to help protect communication by encrypting traffic such as account information, billing data, etc.&amp;nbsp;&amp;nbsp; </p>
  <h1>Why</h1>
  <p>If sensitive data is sent between client and server unprotected it may be stolen or modified.&amp;nbsp; SSL can be used to help protect communication between client and server by encrypting network traffic.&amp;nbsp; Encryption will protect against eavesdropping (theft) but an attacker may still blindly modify the data for malicious purposes.&amp;nbsp; Use integrity checking (HMAC) to ensure the data has not been modified.</p>
  <h1>When</h1>
  <p>Use&amp;nbsp;SSL for communication between web browser and web server, when page content&amp;nbsp;needs to be encrypted on the network and the&amp;nbsp;identity&amp;nbsp;of the server needs to be guaranteed. </p>
  <p>
    <strong>Note</strong>: SSL does carry a significant performance penalty in terms of latency that is introduced due to encryption/decryption of pages, so it is important to optimize the number of pages that use SSL. <br /></p>
  <h1>How</h1>
  <p>Use SSL to create a secure encrypted communication channel between browser clients and Web server.</p>
  <p>To use SSL:</p>
  <p>&amp;nbsp;&amp;nbsp; 1. Install a server certificate on the Web server.<br />&amp;nbsp;&amp;nbsp; 2. Install the root certificate authority (CA) certificate from the same authority into the local computer's Trusted Root Certification Authorities certificate store.<br />&amp;nbsp;&amp;nbsp; 3. Use IIS to configure the server to force the use of encryption while accessing Web pages.<br />&amp;nbsp;&amp;nbsp; 4. Design pages with SSL in mind to minimize performance overhead. Optimize pages that use SSL by including less text and simple graphics and partition&amp;nbsp;the site and ensure that only those pages than contain sensitive data use SSL.&amp;nbsp;</p>
  <h1>Problem Example</h1>
  <p>An ASP.NET 2.0 application allows users to login and maintain their contacts in an online database that is accesible via a web browser. The login&amp;nbsp;credentials are sent in plain text, which allows someone on the network to modify&amp;nbsp;the&amp;nbsp;data sent between&amp;nbsp;a browser and a server or view the contents. The lack of integrity and privacy means that the identity of the user and the identity of the web&amp;nbsp;entity serving out the pages can not be verified.&amp;nbsp;&amp;nbsp;&amp;nbsp;</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET 2.0 application allows users to login and maintain their contacts in an online database that is accesible via a web browser. When the application is deployed, an SSL certificate is installed on the Web Server. The server is then setup to force users to use encryption while visiting pages containing sensitive information.</p>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>