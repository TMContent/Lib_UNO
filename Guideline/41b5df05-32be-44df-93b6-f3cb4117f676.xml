<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-632114422" Content_Hash="-2144988167">
  <Metadata>
    <Id>41b5df05-32be-44df-93b6-f3cb4117f676</Id>
    <Id_History>41b5df05-32be-44df-93b6-f3cb4117f676,74ad2b6d-3cc2-4302-b360-4801491f1c28,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use Locks with Mutexes to Avoid Deadlocks</Title>
    <Category>Concurrency</Category>
    <Phase>Implementation</Phase>
    <Technology>Technology Independent</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Locks with Mutexes to Avoid Deadlocks</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* C++


## What to Do ##

Use locks with mutexes, instead of manual locking and unlocking.


## Why ##

Using std::lock_guard makes it simpler to prevent deadlocks, because it unlocks mutexes automaticaly when a function exits.


## How ##

Perform the following actions to use locks with mutexes:

1. **Identify unsafe code.** Search for code that manually locks and unlocks mutexes by calling `lock()` and `unlock()` functions.

2. **Add locks.** Add locks to functions that manually `lock()` and `unlock()` mutexes by declaring them in a manner such as `const std::lock_guard<std::mutex>(mutex);`

3. **Remove old code.** Remove calls to `lock()` and `unlock()` from the functions where a lock is now being used.


## Solution Example ##

In the following example, a lock is being used with the mutex. Notice that nothing else is necessary to assure concurrency when using a lock.

	static std::mutex mutex;

	void function(){

	const std::lock_guard<std::mutex>(mutex);

	//do stuff
	}


## Additional Resources ##

* For more information about using locks with mutexes, see [https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management](https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management)
]]></Data>
  </Content>
</TeamMentor_Article>