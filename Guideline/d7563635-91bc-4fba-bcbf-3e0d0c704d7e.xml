<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-2101239241" Content_Hash="1125908172">
  <Metadata>
    <Id>d7563635-91bc-4fba-bcbf-3e0d0c704d7e</Id>
    <Id_History>abdb195a-7111-433a-861c-64d998d885d0,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Finally Blocks to Make Sure That Database Connections Are Closed.</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Finally Blocks to Make Sure That Database Connections Are Closed.</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>If exceptions occur, you must make sure that database connections are closed. Use a try/finally block and close database connections in the finally clause.&amp;nbsp;</p>
  <h1>Why</h1>
  <p>Using a try/finally block ensures that resources are disposed even if an exception occurs. Not disposing resources properly leads to performance degradation over time.</p>
  <h1>When</h1>
  <p>Database connection is an expensive shared resource hence this guideline ahould followed all the time.</p>
  <h1>How</h1>
  <p>Be aware that exceptions are expensive. Do not catch exceptions and then return them if your data access logic cannot add any value. A less costly approach is to permit the exception to propagate from the database to the caller. Similarly, do not wrap transaction attempts with <b>try</b>/<b>catch</b> blocks unless you plan to implement retry mechanisms. Use code similar to the following example to make sure that database connections are closed.</p>
  <pre>// Data access method<br />public string RetrieveProductName(int productID)<br />{<br />&amp;nbsp; ...<br />&amp;nbsp; SqlConnection conn = null;<br />&amp;nbsp; try<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Open database connection and perform data access<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&amp;nbsp; <br />&amp;nbsp; }<br />&amp;nbsp; catch (SqlException sqlex)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Log exception details on the server<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Re-throw a new more relevant exception <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&amp;nbsp; }<br />&amp;nbsp; finally<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if(conn != null) <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; conn.Close(); // Ensures connection is closed<br />&amp;nbsp; }<br />}</pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>