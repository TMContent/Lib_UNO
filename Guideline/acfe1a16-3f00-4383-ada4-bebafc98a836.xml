<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-850392901" Content_Hash="-1601387862">
  <Metadata>
    <Id>acfe1a16-3f00-4383-ada4-bebafc98a836</Id>
    <Id_History>acfe1a16-3f00-4383-ada4-bebafc98a836,9ab607c5-86a7-4aa2-b697-2d9046202c51,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Make Inactive Sessions Time-out</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Make Inactive Sessions Time-out</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Java


## Summary ##

Make inactive sessions time-out. Make sessions expire after a period of inactivity to make it harder for an attacker to hijack a session.


## Solution Example ##

To make inactive sessions time-out:

1. **Identify login functionality.** Find code that handles user logins.

2. **Add code that sets the inactive session time-out period.** Add code that handles an HttpSession object and sets the setMaxInactiveInterval value, like so:

	~~~~
	session.setMaxInactiveInterval(300);
	~~~~

	where "session" is the HttpSession object and 300 is the inactive time-out period in seconds.

	Another approach to making inactive sessions time-out is by configuring the "session-timeout" value in the web.xml file, like so:

	~~~~
	<session-config>
		<session-timeout>300</session-timeout>
	</session-config>
	~~~~

	where 300 is the inactive time-out period in seconds. The difference between the first and second approaches is that using setMaxInactiveInterval sets the time-out period for a specific session, while the "session-timeout" option sets the time-out period for all sessions by default.
]]></Data>
  </Content>
</TeamMentor_Article>