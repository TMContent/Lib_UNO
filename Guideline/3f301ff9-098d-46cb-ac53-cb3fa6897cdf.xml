<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1979490337" Content_Hash="1865910825">
  <Metadata>
    <Id>3f301ff9-098d-46cb-ac53-cb3fa6897cdf</Id>
    <Id_History>3f301ff9-098d-46cb-ac53-cb3fa6897cdf,6f3d588a-ba00-41f3-ba67-9d6030a863c7,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Protect Sensitive Data Inside Configuration Files</Title>
    <Category>Hardening</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Guideline</Type>
    <DirectLink>Protect Sensitive Data Inside Configuration Files</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>Applications written using Servlets or JSP.</li>
  </ul>
  <h1>What to Do</h1>
  <p>Protect all sensitive data that is stored within configuration files.</p>
  <h1>Why</h1>
  <p>Configuration files are a likely target for any attacker. If an attacker does compromise the configuration files, any unprotected sensitive data inside them will also be compromised.</p>
  <h1>When</h1>
  <p>If your application uses configuration files that contain sensitive data such as connection strings, directory paths or credentials, then protect the files.</p>
  <h1>How</h1>
  <p>To protect sensitive data inside configuration files use the following steps:</p>
  <ol>
    <li>
      <p>
        <strong>Identify the sensitive data. </strong>Locate all sensitive data that is stored inside configuration files. Examples of sensitive data include, but are not limited to, credentials, connection strings and directory paths.</p>
      <li>
        <p>
          <strong>Encrypt sensitive data inside the configuration files. </strong>Encrypt the sensitive data inside the configuration file to ensure its confidentiality in case this file is compromised. Once the application accesses the configuration file, it should decrypt the sensitive data just before use. Example:</p>
        <pre>public Properties loadDatabaseCredentials()<br />      throws GeneralSecurityException, IOException&amp;#123;<br />      // Set the decryption mechanism<br />      byte&amp;#91;&amp;#93; rawKey = getEncryptionKey();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<br />      Cipher cipher = Cipher.getInstance("AES");<br />      cipher.init(Cipher.DECRYPT_MODE, skeySpec);<br /><br />      // Decrypt config file<br /><br />      File configFile = new File("../../config/testProp.config");<br />      byte&amp;#91;&amp;#93; tempBuff = new byte&amp;#91;(int)configFile.length()&amp;#93;;<br />      FileInputStream fileStream = new FileInputStream(configFile);<br />      fileStream.read(tempBuff, 0, tempBuff.length);<br /><br />      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));<br />      prop.load(propStream);<br />      propStream.close();<br />      fileStream.close();<br /><br />      return prop;&amp;#125;</pre>
        <li>
          <p>
            <strong>Protect configuration files.</strong>
          </p>
          <ul>
            <li>
              <p>
                <strong>Choose a configuration directory</strong>: Dedicate a directory for storing your application's configuration files. Make sure the directory is not web-accessible. This limits the scope of users&amp;nbsp;who can potentially compromise the contents inside the directory.</p>
              <li>
                <p>
                  <strong>Set appropriate permissions</strong>: Apply the appropriate filesystem permissions such that the configuration files can be only accessed by your application and its administrators.</p>
              </li>
            </li>
          </ul>
        </li>
      </li>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code retrieves database credentials from a configuration file. Unfortunately, the credentials are not encrypted; therefore, anybody with access to the configuration file can retrieve the credentials and access the database on behalf of the application.</p>
  <pre>public Properties loadDatabaseCredentials() throws IOException&amp;#123;<br />      Properties prop = new Properties();<br />      InputStream propStream = new FileInputStream("../../config/testProp.config");<br />      prop.load(propStream);<br />      propStream.close();<br /><br />      return prop;&amp;#125;</pre>
  <h1>Solution Example</h1>
  <p>The following code retrieves database credentials from a configuration file. Because the credentials are encrypted, the application decrypts them in real time, protecting the credentials' confidentiality in case the local access to the configuration file is not properly secured.</p>
  <pre>public Properties loadDatabaseCredentials()<br />      throws GeneralSecurityException, IOException&amp;#123;<br />      // Set the decryption mechanism<br />      byte&amp;#91;&amp;#93; rawKey = getEncryptionKey();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<br />      Cipher cipher = Cipher.getInstance("AES");<br />      cipher.init(Cipher.DECRYPT_MODE, skeySpec);<br /><br />      // Decrypt config file<br /><br />      File configFile = new File("../../config/testProp.config");<br />      byte&amp;#91;&amp;#93; tempBuff = new byte&amp;#91;(int)configFile.length()&amp;#93;;<br />      FileInputStream fileStream = new FileInputStream(configFile);<br />      fileStream.read(tempBuff, 0, tempBuff.length);<br /><br />      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));<br />      prop.load(propStream);<br />      propStream.close();<br />      fileStream.close();<br /><br />      return prop;&amp;#125;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about the JCE API, see: <a href="http://download.oracle.com/javase/1.4.2/docs/guide/security/jce/JCERefGuide.html">Java Cryptography Extension for the Java 2 SDK, v 1.4</a>.</li>
  </ul>
  <h1>Java Deployment Guidelines</h1>
  <ul>
    <li>
      <a href="/article/f21f5350-826d-44dd-b758-fd824d52f592">Remove Test Accounts</a>
    </li>
    <li>
      <a href="/article/df860f3d-2185-4939-be4b-ef26d8891855">Remove Test Interfaces</a>
    </li>
    <li>
      <a href="/article/fd675679-e8ad-40fc-bac4-d56fc440bc00">Disable Directory Browsing</a>
    </li>
    <li>
      <a href="/article/aebb10ce-aeb6-45e5-b159-e2bc76b012bf">Use a Least-Privileged Account for Running Applications</a>
    </li>
    <li>
      <a href="/article/47e80747-3e12-4dd1-a522-ea5c33154a86">Protect the JAAS Policy and Configuration Files</a>
    </li>
    <li>
      <a href="/article/3f301ff9-098d-46cb-ac53-cb3fa6897cdf">Protect Sensitive Data Inside Configuration Files</a>
    </li>
  </ul>
  <h1>Java Deployment Checklists</h1>
  <ul>
    <li>
      <a href="/article/256b4884-9ff0-4a33-960c-305b824bab68">Test Accounts Are Removed</a>
    </li>
    <li>
      <a href="/article/fe7941bc-b986-48f9-9fa3-422c34db36bd">Test Interfaces Are Removed</a>
    </li>
    <li>
      <a href="/article/65e70f79-645d-415c-9e71-9cff045cc1c4">Directory Browsing Is Disabled</a>
    </li>
    <li>
      <a href="/article/a2000bc9-7e22-4d0c-91b8-a9ec623985d3">A Least Privileged Account Is Used for Running Applications</a>
    </li>
    <li>
      <a href="/article/4bc8430f-b950-455a-80c1-8cbdb524c1e3">JAAS Policy and Configuration Files Are Protected</a>
    </li>
    <li>
      <a href="/article/f9c1e6b0-1bc4-4108-9c9a-55dca84749ac">Sensitive Data Inside Configuration Files Is Protected</a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>