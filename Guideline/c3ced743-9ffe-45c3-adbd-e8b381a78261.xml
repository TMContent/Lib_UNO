<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-996339944" Content_Hash="366231424">
  <Metadata>
    <Id>c3ced743-9ffe-45c3-adbd-e8b381a78261</Id>
    <Id_History>39b628de-0610-4c93-9357-bd188ce87e8b,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Set HttpOnlyCookies Attribute on All Authentication Cookies</Title>
    <Category>Forms Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0 </li>
  </ul>
  <h1>What to Do</h1>
  <p>Set the <b>httpOnlyAttribute</b> to true on all authentication cookies to prevent client side scripts from accessing the cookie. </p>
  <h1>Why</h1>
  <p>Authentication cookies are only used on the server side to authenticate requests coming from a user; they're never used on the client.&nbsp; Preventing the client from accessing them via scripts means that if a script injection attack occurs on your site, the attacker will not be able to steal a user's cookies and emulate the user directly.&nbsp; Injection attacks still have the potential to completely compromise an account, but making authentication cookies unavailable does reduce their impact. </p>
  <h1>When</h1>
  <p>All systems which use authentication cookies should set their <b>httpOnlyCookies</b> attribute. </p>
  <h1>How</h1>
  <p>Set the <b>httpOnlyCookies</b> attribute on the authentication cookie.&nbsp; Internet Explorer 6 Service Pack 1 supports this attribute, which prevents client-side script from accessing the cookie from the <b>document.cookie</b> property.&nbsp; The <b>System.Net.Cookie</b> class in .NET Framework version 2.0 supports an <b>HttpOnly</b> property.&nbsp; You can set this property programmatically or by using the <b>&lt;httpCookies&gt;</b> element in your application's Web.config file. By default, the <b>HttpOnly</b> cookie property is not set. To set the <b>HttpOnly</b> property of the cookie, add the following entry in your application's Web.config file. </p>
  <pre>&lt;system.web&gt;...<br />  &lt;httpCookies httpOnlyCookies="true" requireSSL="false" topic="" /&gt;...<br />&lt;/system.web&gt;</pre>
  <p>
    <strong>Note:</strong> &nbsp; &nbsp; Not all browsers support HttpOnly, and it is possible to circumvent it's protection in a number of cases.&nbsp; Thus, this should not be relied upon as an absolute security measure.</p>
  <h1>Problem Example</h1>
  <p>A web application has an existing cross-site scripting flaw, and does not set HttpOnly on its cookies.&nbsp; When a user is attacked, the attacker is able to easily retrieve the user's authentication and authorization cookies, allowing her to impersonate the user.</p>
  <p />
  <h1>Solution Example</h1>
  <p>A web application has an existing cross-site scripting flaw, but sets HttpOnly on its cookies.&nbsp; When a user is attacked, the attacker is unable to easily retrieve the user's authentication and authorization cookies, preventing her&nbsp;from impersonating the user.</p>
  <p />
  <p />
  <hr />
  <p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>