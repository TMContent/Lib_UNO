<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1460688119" Content_Hash="1402807187">
  <Metadata>
    <Id>49a76878-ab5d-4b08-8f55-a9c6b521f2d3</Id>
    <Id_History>eb00762e-1c8a-4c03-ae23-b0656b697524,</Id_History>
    <Library_Id>51eb81c3-1d23-4146-ba83-8a6bb9233c11</Library_Id>
    <Title>Use New And Delete Instead of Direct Memory Operations</Title>
    <Category>Unmanaged Code</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use New And Delete Instead of Direct Memory Operations</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>C++</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>C&amp;#43;&amp;#43;</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use object-oriented operators new and delete instead of direct memory operations, such as malloc, calloc, realloc, and free.</p>
  <h1>Why</h1>
  <p>One advantage of using object-oriented operators instead of direct memory operations is that new and delete operators automatically call constructors and destructors - this significantly reduces the likelihood of a number of typical programming errors. Calling constructors automatically removes the possibility of accessing memory of an object before it is initialized.</p>
  <h1>When</h1>
  <p>Use new and delete operators whenever initiating objects based on classes.</p>
  <h1>How</h1>
  <p>New and delete operators are very basic operators in C&amp;#43;&amp;#43; programming.</p>
  <ul>
    <li>
      <p>
        <strong>To use the new operator:</strong> declare a class, declare a variable of that class type, and initialize the variable by calling the new operator. Arguments to the new operator are passed as arguments to the constructor.</p>
      <li>
        <p>
          <strong>To use the delete operator:</strong> call the delete operator on a previously declared and initialized pointer of a non-system class type. Memory allocation and deallocation of basic system types, such as int, double, char, etc. are handled automatically.</p>
      </li>
    </li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about using C&amp;#43;&amp;#43; operators instead of direct memory operations, please see <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.&amp;#43;Use&amp;#43;new&amp;#43;and&amp;#43;delete&amp;#43;rather&amp;#43;than&amp;#43;raw&amp;#43;memory&amp;#43;allocation&amp;#43;and&amp;#43;deallocation">https://www.securecoding.cert.org/confluence/display/cplusplus/MEM08-CPP.&amp;#43;Use&amp;#43;new&amp;#43;and&amp;#43;delete&amp;#43;rather&amp;#43;than&amp;#43;raw&amp;#43;memory&amp;#43;allocation&amp;#43;and&amp;#43;deallocation</a></li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>