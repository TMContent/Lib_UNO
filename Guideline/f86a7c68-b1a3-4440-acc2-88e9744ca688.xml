<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1258969138" Content_Hash="-1311881859">
  <Metadata>
    <Id>f86a7c68-b1a3-4440-acc2-88e9744ca688</Id>
    <Id_History>d6f98e6d-df1c-4ece-ae56-4b53cd622036,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Store Encrypted Connection Strings in the Web.config File</Title>
    <Category>Deployment Considerations</Category>
    <Phase>Deployment</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Store Encrypted Connection Strings in the Web.config File</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Many applications store connection strings in code, primarily for performance reasons. However, the performance benefit is negligible, and use of file system caching helps to ensure that storing connection strings in external files gives comparable performance. </p>
  <p>Store connection strings in the &lt;<b>connectionStrings</b>&gt; section of your application's Web.config file, and then use Aspnet_regiis.exe to encrypt them by using either the DPAPI or RSA protected configuration providers.</p>
  <h1>Why</h1>
  <p>connection strings typically contain privacy sensitive resource access credentials (e.g., a connection string for a SQL server resource includes a username and password.) As a precautionary measure, they should not be stored in plaintext, because an attacker that can compromise a server will be able to read those values if they are not adequately protected. </p>
  <h1>When</h1>
  <p>This guideline is applicable whenever connection strings are stored in web.config file.</p>
  <h1>How</h1>
  <p>This section describes how to use DPAPI to encrypt connection strings. Please check the related guidelines for more information on using the RSA Protected Configuration Provider.&amp;nbsp;</p>
  <p>
    <strong>1. Choose the appropriate configuration provider.</strong> Under most circumstances DPAPI will suffice, although the RSA protected configuration is the logical choice in web farms where multiple servers are employed. </p>
  <p>
    <strong>2.</strong>
    <strong>Identify the configuration sections to be encrypted.</strong> Encrypting and decrypting data incurs performance overhead. To keep this overhead to a minimum, encrypt only the sections of the configuration file that store sensitive data.&amp;nbsp; Encrypt the &lt;connectionStrings&gt; element of the Web.config file to protect the database connection string. </p>
  <p>
    <strong>3. Choose the machine or user store.</strong> The DataProtectionConfigurationProvider supports machine-level and user-level stores for key storage. The choice of store depends largely on whether or not&amp;nbsp;the application shares a server with other applications and whether or not sensitive data must be kept private for each application.</p>
  <p>
    <strong>Machine Store</strong>
  </p>
  <p>By default, the DataProtectionConfigurationProvider is configured to use DPAPI with the machine store. Use machine-level key storage in the following situations:</p>
  <ul>
    <li>The application runs on its own dedicated server with no other applications. </li>
    <li>Multiple applications run on the same server&amp;nbsp;and&amp;nbsp;those applications need to be able to share sensitive information.</li>
  </ul>
  <p>To encrypt the connectionStrings section&amp;nbsp;with the Machine Store, run the following command from a .NET command prompt:</p>
  <pre>aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" -prov "DataProtectionConfigurationProvider" </pre>
  <p>
    <strong>User Store</strong>
  </p>
  <p>Use user-level key storage if the application runs in a shared hosting environment and the&amp;nbsp;application's sensitive data should&amp;nbsp;not be accessible to other applications on the server. In this situation, each application should run under a separate identity, and the resources for the application—such as files and databases—should be restricted to that identity.</p>
  <p>To encrypt the connectionStrings section&amp;nbsp;with the&amp;nbsp;User Store, run the following command from a .NET command prompt:</p>
  <pre>   aspnet_regiis -pe "connectionStrings" -app "/UserDPAPI" -prov "MyUserDataProtectionConfigurationProvider"</pre>
  <p>
    <strong>4.</strong>
    <strong>Encrypt&amp;nbsp;the configuration file data.</strong>&amp;nbsp;To encrypt the connectionStrings section in Web.config using DPAPI with the Machine Store, run the following command from a .NET command prompt:</p>
  <pre>   aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" -prov "DataProtectionConfigurationProvider" </pre>
  <p>The above command with the -app switch assumes that there is an IIS virtual directory called MachineDPAPI. If Visual Studio .NET 2005 Web server is being utilized instead of IIS, use the -pef switch, which&amp;nbsp;specifies the physical directory location of&amp;nbsp;the configuration file.</p>
  <pre>   aspnet_regiis.exe -pef "connectionStrings" C:\Projects\MachineDPAPI -prov "DataProtectionConfigurationProvider"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>