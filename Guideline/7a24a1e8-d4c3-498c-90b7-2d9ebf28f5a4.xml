<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-2048933056" Content_Hash="-883648977">
  <Metadata>
    <Id>7a24a1e8-d4c3-498c-90b7-2d9ebf28f5a4</Id>
    <Id_History>1bdc59f9-200b-45c1-8396-9f2f55cebe9a,</Id_History>
    <Library_Id>c037d0d2-0617-44f3-b846-21dc3d02c4f8</Library_Id>
    <Title>Design a Strong Application Architecture</Title>
    <Category>Design Considerations</Category>
    <Phase>Design</Phase>
    <Technology> Any</Technology>
    <Type>Guideline</Type>
    <DirectLink>Design a Strong Application Architecture</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>Design a strong application architecture that provides separation between components.</p>
  <h1>Why</h1>
  <p>Compartmentalizing software allows you to limit the amount of damage that can be done to a system. You can divide the system into a collection of isolated units so that even if one component is breached, the entire system is not compromised. Compartmentalization separates resources, data, users, and processes from one another.</p>
  <h1>When</h1>
  <p>Designing an application architecture is best done in the early stages of the project. Later on, the architecture can be strengthened gradually over time. </p>
  <h1>How</h1>
  <p>To provide separation between components:</p>
  <ol>
    <li>
      <p>
        <strong>Compartmentalize users.</strong> You should never provide the same set of permissions on application resources to different users. The separation of users ensures that even if one user's account is compromised, other accounts remain secure. Use role-based and user-based authorization to enforce separation of users. For role-based authorization, the roles need to be defined. Additionally, you need to determine the type of resources that can be accessed by a group of users. For user-based authorization, determine the type of resources that can only be accessed by specific users.</p>
      <li>
        <p>
          <strong>Compartmentalize processes.</strong> Break your applications into a collection of well-defined functional components. Each of these components should have its own specific purpose. This separation applies even more when dealing with critical operations and processes, such as credit card transactions. If the application is not properly compartmentalized, a failure or breach in one process can compromise the application and its assets.</p>
        <li>
          <p>
            <strong>Compartmentalize data.</strong> Data should be stored separately depending on its sensitivity and purpose:</p>
          <ul>
            <li>Store data in a database on a nonpublicly accessible machine. <li>Place Web-root on a separate partition from OS installation. <li>Segment data by the authorization level required to access it (database tables, config files, Web folders). <li>Separate databases/tables for storing different types of data and create different database users with privileges limited to their needs. <li>On the file system, assign permissions carefully, granting only the privileges a given process needs.</li></li></li></li></li>
          </ul>
        </li>
      </li>
    </li>
  </ol>
  <h1>Related Guideline</h1>
  <ul>
    <li>
      <a href="/article/8aeb811d-3c04-48a4-889f-25871e535933">Define a Security Policy</a>
    </li>
  </ul>
  <h1>Related Checklists</h1>
  <ul>
    <li>
      <a href="/article/222800fe-aa5f-404e-a4b4-878d6e0c68d2">A Strong Application Architecture Is Used</a>
    </li>
    <li>
      <a href="/article/5338f3dc-2b13-41d1-9515-9c3c3ec448fe">A Security Policy is Defined</a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>