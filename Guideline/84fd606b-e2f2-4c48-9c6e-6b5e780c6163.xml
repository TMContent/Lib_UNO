<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="664273310" Content_Hash="300636188">
  <Metadata>
    <Id>84fd606b-e2f2-4c48-9c6e-6b5e780c6163</Id>
    <Id_History>84fd606b-e2f2-4c48-9c6e-6b5e780c6163,1edab30d-254f-4911-9679-25056e97da82,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Force Reauthentication When Executing Critical Functionality</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Force Re-authentication When Executing Critical Functionality</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Applications written using Servlets or JSP.


## Problem Example ##

The following code allows a user to change their credentials. Unfortunately, the code enters the new credentials into the credentials repository without verifying that it is the actual user changing the credentials.

~~~~
public boolean changePassword(String user, char[] newPass)
{
       // The application fails to re-authenticate the user
       // Verify that new password meets password requirements
       // Update the credential store with the new password
}
~~~~


## Solution Example ##

The following code allows a user to change their credentials. Before entering the new credentials into the credentials repository, the code verifies that it is the actual user doing the credentials change.

~~~~
public boolean changePassword(String user, char[] oldPass, char[] newPass)
{
      // The application forces re-authentication
      if(!validateUser(user, oldPass))
      {
            return false;
      }
      // Verify that new password meets password requirements
      // Update the credential store with the new password
}
~~~~]]></Data>
  </Content>
</TeamMentor_Article>