<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1664379680" Content_Hash="-1324653369">
  <Metadata>
    <Id>880d6dff-ebeb-40b9-9bc2-d41997813dee</Id>
    <Id_History>880d6dff-ebeb-40b9-9bc2-d41997813dee,2292edae-1fe5-4bfd-a6e8-9b835ec32176,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Remove Test Interfaces</Title>
    <Category>Hardening</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Remove Test Interfaces</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>Remove all public interfaces used solely for testing the application.</p>
  <h1>Why</h1>
  <p>Test interfaces add extra functionality that is not intended for the released application. Often these interfaces will be used by a test team to gain information or drive functionality that would be dangerous in the hands of an attacker.</p>
  <h1>When</h1>
  <p>If your application contains test interfaces remove them before deployment.</p>
  <h1>How</h1>
  <p>To remove all test interfaces:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all test APIs</strong>: Enumerate all public APIs. Identify which APIs are intended for application use and which APIs are intended for test purposes. Ideally these interfaces will already be documented as test interfaces and can be discovered through specifications.</p>
      <li>
        <p>
          <strong>Remove the test interfaces</strong>: Code removal is a straight forward procedure. Once the test code is identified, it should be isolated from the application and removed from your code base. This should happen before final functional and integration testing to ensure that the system still works as intended with the test code missing.</p>
        <li>
          <p>
            <strong>Compile your application with release flag</strong>: Always compile your application with a release flag before shipping. This ensures that your application does not contain extra debug information in its assemblies.</p>
        </li>
      </li>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code shows the user management system for an application. Because the class contains test APIs it is possible for a malicious user to execute untested code and possibly exploit any vulnerabilities in it.</p>
  <pre>public sealed class UserManager<br />&amp;#123;<br />      public UserManager()<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />      public boolean AddUser(User user, char&amp;#91;&amp;#93; pass, char&amp;#91;&amp;#93; verifyPass)<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />      public boolean RemoveUser(User user)<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />      public boolean ModifyUser(User user)<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />      public boolean ChangePass(User user, char&amp;#91;&amp;#93; oldPass, char&amp;#91;&amp;#93; pass, char&amp;#91;&amp;#93; verifyPass)<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />      // The class contains test APIs<br />      public void AddTestUsers()<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />&amp;#125;</pre>
  <h1>Solution Example</h1>
  <p>The following code shows the user management system for an application. Because the test APIs is removed from the class, there is no untested code that a malicious user can attack.</p>
  <pre>// The class contains no test APIs<br />public sealed class UserManager<br />&amp;#123;<br />      public UserManager()<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />      public boolean AddUser(User user, char&amp;#91;&amp;#93; pass, char&amp;#91;&amp;#93; verifyPass)<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />      public boolean RemoveUser(User user)<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />      public boolean ModifyUser(User user)<br />      &amp;#123;<br />            ...<br />      &amp;#125; <br />      public boolean ChangePass(User user, char&amp;#91;&amp;#93; oldPass, char&amp;#91;&amp;#93; pass, char&amp;#91;&amp;#93; verifyPass)<br />      &amp;#123;<br />            ...<br />      &amp;#125;<br />&amp;#125;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about compiling your application with debug and release configurations, see: <a href="http://msdn2.microsoft.com/en-us/library/wx0123s5(vs.80).aspx">How to: Set Debug and Release Configurations</a>.</li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/058ce803-1871-4365-acc1-51219a7f8a1b">Guideline: Remove Test Accounts&amp;nbsp;</a>
      <li>
        <a href="/article/e49c6b3a-880f-46db-a07d-80dc2177a36a">Attack: Business Rule Attack</a>
        <li>
          <a href="/article/576e329e-2528-4189-94c6-db64d4b99640">Checklist Item: Test Interfaces are Removed </a>
        </li>
      </li>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>