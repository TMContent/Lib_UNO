<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="587011624" Content_Hash="-1221406383">
  <Metadata>
    <Id>c6135cce-c5b5-4720-a60f-d2546e0ce223</Id>
    <Id_History>ac058cd0-c5ee-4e53-b18a-99c9b3928ba9,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Use Properties to Expose Fields</Title>
    <Category>Design Considerations</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Properties to Expose Fields</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>Use properties to expose non-private fields.</p>
  <h1>Why</h1>
  <p>Properties allow you to add additional constraints, such as input validation or permission demands.</p>
  <h1>When</h1>
  <p>This is an important guideline and should be followed all the time.</p>
  <h1>How</h1>
  <p>Fields should not be exposed directly to calling code. Mark fields as private, and create read/write or read-only properties to access them.</p>
  <blockquote>
    <p>
      <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;Private fields are enforced at compile time only. When malicious code runs in a full trust environment, it could use reflection or unmanaged pointers to bypass these visibility restrictions.</p>
  </blockquote>
  <p>Here is an example of how to use property for adding input validation.&amp;nbsp;</p>
  <pre>public class Employee<br />&amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; private String employeeName;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; public String Name<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; get<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.employeeName; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; set<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(&amp;#33;Regex.IsMatch(value,&amp;#64;"&amp;#94;&amp;#91;a-zA-Z'.\s&amp;#93;&amp;#123;1,40&amp;#125;&amp;#36;"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#123;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new ArgumentException("Employee Name is not well formed");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.employeeName = value;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;#125;<br />&amp;#125;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>Using Properties at&amp;nbsp;<a href="http://msdn.microsoft.com/en-us/library/w86s7x04.aspx">http://msdn.microsoft.com/en-us/library/w86s7x04.aspx</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>