<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1052728755" Content_Hash="64923356">
  <Metadata>
    <Id>2314618a-47ce-4ff0-9641-365fb3e262e4</Id>
    <Id_History>2314618a-47ce-4ff0-9641-365fb3e262e4,4017bead-a5ac-4dca-8138-39519688d920,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Create Processes Securely with CreateProcess()</Title>
    <Category>Dangerous APIs</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>How To</Type>
    <DirectLink>Create Processes Securely with CreateProcess()</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>C++</Source>
  </Metadata>
  <Content Sanitized="true" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>C&amp;#43;&amp;#43;<li>Windows</li></li>
  </ul>
  <h1>What to Do</h1>
  <p>Use caution when creating processes.</p>
  <h1>Why</h1>
  <p>Improperly creating processes may allow an attacker to execute arbitrary code.</p>
  <h1>When</h1>
  <p>Use caution whenever using any of the following APIs: CreateProcess(), CreateProcessAsUser(), CreateProcessWithLogon(), ShellExecute(), ShellExecuteEx(), exec(), spawn().</p>
  <h1>How</h1>
  <p>Perform the following actions to create processes securely:</p>
  <ol>
    <li>
      <p>
        <strong>Identify code the creates processses.</strong> Search code for the following functions that may be used to create processes: CreateProcess(), CreateProcessAsUser(), CreateProcessWithLogon(), ShellExecute(), ShellExecuteEx(), exec(), spawn().</p>
      <li>
        <p>
          <strong>Replace shell and CRT APIs with base APIs.</strong> Shell APIs and CRT functions all wrap CreateProcess() as some point while adding additional threats. Use CreateProcess() as often as possible. Shell and CRT APIs are: ShellExecute(), ShellExecuteEx(), exec(), spawn().</p>
        <li>
          <p>
            <strong>Use fully qualified paths with CreateProcess().</strong> Either lpApplicationName or lpCommandLine should be fully qualified. If neither of them are fully-qualified, an attacker may place an executable with the same name as the one being launched by CreateProcess() into the current folder and CreateProcess() will run it instead.</p>
        </li>
      </li>
    </li>
  </ol>]]></Data>
  </Content>
</TeamMentor_Article>