<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-2073027109" Content_Hash="-97182363">
  <Metadata>
    <Id>8f8ce908-5172-4ac7-91d0-f5a4057a8cb1</Id>
    <Id_History>a6b2858e-e973-48de-b6a4-83ae5c47ff66,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Consider Transport-level Encryption to Protect Secrets on the Network</Title>
    <Category>Communication Security</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink />
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>.NET 2.0</div>
    </li>
  </ul>
  <h1>What to Do</h1>
  <p>Use an encrypted communication channel to protect data sent between servers</p>
  <h1>Why</h1>The internet is full of abstractions and layers. When data is sent over a wire, it typically passes through several intermediate relays on it's way towards&nbsp;some final destination. Using a safe protocol to transmit information is important because it adds protection against inadvertent eavesdropping and modification in mid transport. 
<h1>When</h1>This is appropriate whenever sensitive data needs to be sent between two hosts, whether it is using the public internet or a private LAN as a transmission medium. If your servers are not inside a physically secure data center where the network eavesdropping threat is considered insignificant, you need to use an encrypted communication channel to protect data sent between servers 
<h1>How</h1><p>You can use SSL or IPSec to encrypt traffic and help protect communication between servers. Use SSL when you need granular channel protection for a particular application, instead of protection for all applications and services running on a computer. Use IPSec to help protect the communication channel between two servers and to restrict the computers that can communicate with each other. For example, you can help protect a database server by establishing a policy that permits requests only from a trusted client computer, such as an application or Web server. You can also restrict communication to specific IP protocols and TCP/UDP ports </p><p><strong>SSL</strong></p><p>Use SSL to create a secure encrypted communication channel between browser clients and Web server.</p><p>To use SSL:</p><p>&nbsp;&nbsp; 1. Install a server certificate on the Web server.<br />&nbsp;&nbsp; 2. Install the root certificate authority (CA) certificate from the same authority into the local computer's Trusted Root Certification Authorities certificate store.<br />&nbsp;&nbsp; 3. Use IIS to configure the server to force the use of encryption while accessing Web pages.<br />&nbsp;&nbsp; 4. Design pages with SSL in mind to minimize performance overhead. Optimize pages that use SSL by including less text and simple graphics and partition&nbsp;the site and ensure that only those pages than contain sensitive data use SSL.</p><p><strong>IPSec</strong></p><p>IPSec can be used&nbsp;for the following tasks:</p><ul><li>Provide message confidentiality by encrypting all of the data sent between two computers. 
<li>Provide message integrity between two computers (without encrypting data). 
<li>Provide mutual authentication between two computers. For example, you can help secure a database server by establishing a policy that permits requests only from a specific client computer (for example, an application or Web server). 
<li>Restrict which computers can communicate with one another. You can also restrict communication to specific IP protocols and TCP/UDP ports.</li></li></li></li></ul><p>Using IPSec is not a possibility when the two servers are not using static ip addresses.</p><p>To secure traffic between two servers, follow these steps:</p><p><strong>1.&nbsp;Create an IP Filter.</strong> This&nbsp;restricts&nbsp;what computers can communicate with each other, and require that&nbsp;specific&nbsp;communication protocols are used.&nbsp;A filter consists of:</p><ul><li>A source IP address or range of addresses. 
<li>A destination IP address or range of addresses. 
<li>An IP protocol, such as TCP, UDP, or "any." 
<li>Source and destination ports (for TCP or UDP only).<br /><strong></strong></li></li></li></li></ul><p><strong>2. Create Filter Actions.</strong> This procedure creates two filter actions. The first will be used to block all communications from specified computers and the second will be used to enforce the use of encryption between application server and database server computers.<br /><strong>3. Create Rules.</strong> This procedure creates two new rules that will be used to associate the filter that you created in Procedure 1, with the two filter actions you created in Procedure 2.<br /><strong>4. Export the IPSec Policy to the Remote Computer.</strong> The IPSec policy that you have created on the database server must now be exported and copied to the application server computer.<br /><strong>5. Assign Policies.</strong> An IPSec policy must be assigned before it becomes active. Note that only one policy may be active at any one time on a particular computer.<br /><strong>6. Verify that it Works.</strong> Use Network Monitor (netmon.exe) to verify that data sent between the two servers&nbsp;is encrypted. </p><hr /><p>Adapted from Microsoft patterns & practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>