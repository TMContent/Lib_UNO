<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1422032231" Content_Hash="-321122786">
  <Metadata>
    <Id>991c6236-4549-4d49-ba4b-fe193fda9680</Id>
    <Id_History>42a23dce-8b33-4421-936a-d28d74f971d2,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>If You Use SQL Authentication, Protect Credentials in the Configuration Files</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>If You Use SQL Authentication, Protect Credentials in the Configuration Files</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>To protect credentials in configuration files, place connection strings inside the &lt;<b>connectionStrings</b>&gt; section, and encrypt them by using the Aspnet_regiis.exe tool.</p>
  <h1>Why</h1>
  <p>Connection strings contain sensitive resource access credentials such as user names, passwords and server names. Connection strings stored in plaintext are dangerous, because an attacker that can compromise a server will be able to read those connection strings. Even if a machine is not compromised, connection strings stored in plain text&amp;nbsp;are accessible to administrators and any other users with sufficient privileges&amp;nbsp;on the host machine and/or Windows domain.</p>
  <h1>When</h1>
  <p>Always encrypt connection strings. The Windows Data Protection API (DPAPI) is the default provider and is&amp;nbsp;an acceptable choice under most circumstances. If&amp;nbsp;an application is deployed&amp;nbsp;within a Web farm environment,&amp;nbsp;the RSA-protected configuration provider is a better choice because it uses asymmetric, public&amp;nbsp;key encryption to encrypt and decrypt data keys that can easily be exported and imported across servers. If neither of these suffice, create a&amp;nbsp;custom provider. </p>
  <h1>How</h1>
  <p>This section describes how to use DPAPI to encrypt connection strings. Please check the related guidelines for more information on using the RSA Protected Configuration Provider.&amp;nbsp;</p>
  <p>
    <strong>1. Choose the appropriate configuration provider.</strong> Under most circumstances DPAPI will suffice, although the RSA protected configuration is the logical choice in web farms where multiple servers are employed. </p>
  <p>
    <strong>2.</strong>
    <strong>Identify the configuration sections to be encrypted.</strong> Encrypting and decrypting data incurs performance overhead. To keep this overhead to a minimum, encrypt only the sections of the configuration file that store sensitive data.&amp;nbsp; Encrypt the &lt;connectionStrings&gt; element of the Web.config file to protect the database connection string. </p>
  <p>
    <strong>3. Choose the machine or user store.</strong> The DataProtectionConfigurationProvider supports machine-level and user-level stores for key storage. The choice of store depends largely on whether or not&amp;nbsp;the application shares a server with other applications and whether or not sensitive data must be kept private for each application.</p>
  <p>
    <strong>Machine Store</strong>
  </p>
  <p>By default, the DataProtectionConfigurationProvider is configured to use DPAPI with the machine store. Use machine-level key storage in the following situations:</p>
  <ul>
    <li>The application runs on its own dedicated server with no other applications. </li>
    <li>Multiple applications run on the same server&amp;nbsp;and&amp;nbsp;those applications need to be able to share sensitive information.</li>
  </ul>
  <p>To encrypt the connectionStrings section&amp;nbsp;with the Machine Store, run the following command from a .NET command prompt:</p>
  <pre>aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" -prov "DataProtectionConfigurationProvider" </pre>
  <p>
    <strong>User Store</strong>
  </p>
  <p>Use user-level key storage if the application runs in a shared hosting environment and the&amp;nbsp;application's sensitive data should&amp;nbsp;not be accessible to other applications on the server. In this situation, each application should run under a separate identity, and the resources for the application—such as files and databases—should be restricted to that identity.</p>
  <p>To encrypt the connectionStrings section&amp;nbsp;with the&amp;nbsp;User Store, run the following command from a .NET command prompt:</p>
  <pre>   aspnet_regiis -pe "connectionStrings" -app "/UserDPAPI" -prov "MyUserDataProtectionConfigurationProvider"</pre>
  <p>
    <strong>4.</strong>
    <strong>Encrypt&amp;nbsp;the configuration file data.</strong>&amp;nbsp;To encrypt the connectionStrings section in Web.config using DPAPI with the Machine Store, run the following command from a .NET command prompt:</p>
  <pre>   aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" -prov "DataProtectionConfigurationProvider" </pre>
  <p>The above command with the -app switch assumes that there is an IIS virtual directory called MachineDPAPI. If Visual Studio .NET 2005 Web server is being utilized instead of IIS, use the -pef switch, which&amp;nbsp;specifies the physical directory location of&amp;nbsp;the configuration file.</p>
  <pre>   aspnet_regiis.exe -pef "connectionStrings" C:\Projects\MachineDPAPI -prov "DataProtectionConfigurationProvider"</pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>