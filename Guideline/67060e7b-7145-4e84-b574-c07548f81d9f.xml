<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-2023967331" Content_Hash="402272746">
  <Metadata>
    <Id>67060e7b-7145-4e84-b574-c07548f81d9f</Id>
    <Id_History>67060e7b-7145-4e84-b574-c07548f81d9f,6799fc9c-ba08-4514-be19-03a42496be5f,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Validate All Input Passed to the Database</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>Validate All Input Passed to the Database</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Java
* Servlets or JSP 
* SQL Database


## Problem Example ##

The following code allows the user to query a database. Unfortunately, the application fails to validate the user's input; therefore, an attacker can access the backend database on behalf of the application through the use of SQL injection.

~~~~
public void doGet(HttpServletRequest request,
     HttpServletResponse response) throws ServletException, IOException{
     PrintWriter out = response.getWriter();
     String query = request.getParameter("query");
     String retData = "";

     // The application fails to validate the user-supplied
     // query before submitting it to the database server
     retData = queryDB(query);

     ...

     out.flush();
     out.close();
}
~~~~


## Solution Example ##

The following code allows the user to query a database. Because the application validates the user's input, it is much more difficult for an attacker to access the backend database through a SQL injection attack.

~~~~
public void doGet(HttpServletRequest request,
     HttpServletResponse response) throws ServletException, IOException{
     PrintWriter out = response.getWriter();
     String query = request.getParameter("query");
     String retData = "";

     // The application validates the user-supplied query
     // before submitting it to the database server
     if (validateQuery(query))
     {
          retData = queryDB(query);

          ...

     }

     out.flush();
     out.close();
}


public boolean validateQuery(String input){

      // The input can be only of numeric characters
      String goodPattern = "[0-9]++";

      Pattern p = Pattern.compile(goodPattern);
      Matcher m = p.matcher(input);

      if(!m.matches())
      {
            return false;
      }

      return true;
}
~~~~]]></Data>
  </Content>
</TeamMentor_Article>