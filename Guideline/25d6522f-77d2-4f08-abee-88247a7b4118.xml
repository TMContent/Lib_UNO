<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2023216636" Content_Hash="1053050880">
  <Metadata>
    <Id>25d6522f-77d2-4f08-abee-88247a7b4118</Id>
    <Id_History>25d6522f-77d2-4f08-abee-88247a7b4118,79767bfe-fefc-435a-9b34-780af44dd82e,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use C++ Exceptions Where Possible</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use C++ Exceptions Where Possible</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>C++</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## What to Do ##

Use structured exception handling and catch exception conditions. Do not rely on function return codes to perform all error handling.


## Why ##

The classic approach for error handling has been to use the codes that functions return in order to evaluate the success or failure of certain operations. However, with a nontrivial function call hierarchy, this approach clutters the code significantly. Every function must check the return code of every function call it makes and take care of errors. In most cases, the function will merely pass any errors back up to its caller. Complex applications may have several hundred internal functions and a call hierarchy many levels deep, so this approach is difficult to maintain. Using exception handling simplifies and de-clutters the application code, which improves robustness and avoids leaving your application in an inconsistent state that may lead to information disclosure. It also helps protect your application from denial of service attacks.


## When ##

Use structured exceptions whenever erroneous or exceptional conditions can be raised in a given program. It is reasonable to expect that if a function is capable of raising an exception, it eventually will. All exceptions should be handled.


## How ##

There are three types of sections necessary to effectively utilize exception handling:

* Try represents some code which needs to trap errors. Any methods that are called that can raise exceptions should be invoked within a try block. 
* Catch is the place where specific exceptions are handled. 
* Finally is the place where cleanup from raised exceptions should go. 

Fortunately, exception handling syntax and behavior is similar across most modern programming languages. ]]></Data>
  </Content>
</TeamMentor_Article>