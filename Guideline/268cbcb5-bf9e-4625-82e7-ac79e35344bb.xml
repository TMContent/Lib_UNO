<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-2060251485" Content_Hash="403751606">
  <Metadata>
    <Id>268cbcb5-bf9e-4625-82e7-ac79e35344bb</Id>
    <Id_History>04580530-926a-4c22-b32f-1bbd495415b4,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Separate Administration Privileges</Title>
    <Category>Configuration</Category>
    <Phase>Design</Phase>
    <Technology>Web Application</Technology>
    <Type>Guideline</Type>
    <DirectLink>Separate Administration Privileges</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Do</h1>
  <p>Verify that your administration interfaces support role-based authorization to differentiate between content developers and operators or system administrators.</p>
  <h1>Why</h1>
  <p>Inadequate separation of privileges causes no accountability or ability to perform per-user authorization.</p>
  <h1>When</h1>
  <p>This is important guideline and follow it all the time.&amp;nbsp;</p>
  <h1>How</h1>
  <p>If the functionality supported by the features of your application's configuration management varies based on the role of the administrator, consider authorizing each role separately by using role-based authorization. For example, the person responsible for updating a site's static content should not necessarily be allowed to change a customer's credit limit.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>