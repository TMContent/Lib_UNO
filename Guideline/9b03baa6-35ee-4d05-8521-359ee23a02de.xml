<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="869433932" Content_Hash="1504117645">
  <Metadata>
    <Id>9b03baa6-35ee-4d05-8521-359ee23a02de</Id>
    <Id_History>a0f70baf-c7ac-48cc-ba70-87308de35b60,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Structured Exception Handling</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Structured Exception Handling</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use structured exception handling and catch exception conditions. Do not rely on function return codes to perform all error handling.</p>
  <h1>Why</h1>
  <p>The classic approach for error handling has been to use the codes that functions return in order to evaluate the success or failure of certain operations. It is easy to forget to check a return code, and, as a result, your code will fail to an insecure mode.</p>
  <h1>When</h1>
  <p>Use structured exceptions whenever erroneous or exceptional conditions can be raised in a given program. It is reasonable to expect that if a function is capable of raising an exception, it eventually will. All exceptions must be handled!</p>
  <h1>How</h1>
  <p>Microsoft Visual C# ® development tool and Microsoft Visual Basic® .NET development system provide structured exception handling constructs. C# provides the <b>try / catch</b> and <b>finally</b> construct. You can protect code by placing it inside <b>try</b> blocks, and implement <b>catch</b> blocks to log and process exceptions. Also, use the <b>finally</b> construct to ensure that critical system resources such as connections are closed, whether an exception condition occurs or not.</p>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>