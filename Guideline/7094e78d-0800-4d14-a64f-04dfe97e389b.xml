<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-384397922" Content_Hash="2133911461">
  <Metadata>
    <Id>7094e78d-0800-4d14-a64f-04dfe97e389b</Id>
    <Id_History>3b34ae5d-169c-4e53-9839-e625fd5b14b2,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Role Caching If Role Store Lookups Are Too Costly</Title>
    <Category>Authorization</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Role Caching If Role Store Lookups Are Too Costly</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority> J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0 </li>
  </ul>
  <h1>What to Do</h1>
  <p>Use role caching if role store lookups are too costly. </p>
  <h1>Why</h1>
  <p>If the performance overhead of role lookup is too great, perhaps because of slow data access or a large number of roles, role caching offers a way to improve performance.&amp;nbsp; If role cookies are properly protected, this change does not directly weaken system security, although it does increase the application's attack surface. </p>
  <h1>When</h1>
  <p>Applications which are running into performance problems related to role store lookups should consider role caching.&amp;nbsp; As it increases the attack surface of the application and requires some care to ensure that vulnerabilities are not introduced, it should only be used when needed. </p>
  <h1>How</h1>
  <p>Enable role caching in the roles cookie by setting the <b>cacheRolesInCookie</b> attribute to <b>true</b> in the Web.config file as shown here. </p>
  <pre>&lt;roleManager enabled="true"             <br />	cacheRolesInCookie="true"<br />        ... &gt;<br />&lt;/roleManager&gt;</pre>
  <p>When role checks are performed, the roles cookie is checked before calling the role provider to check the list of roles within the data source. This improves performance.&amp;nbsp; The cookie is dynamically updated to cache the most recently validated role names.&amp;nbsp; If the role information for a user is too long to store in a cookie, ASP.NET stores only the most recently used role information in the cookie and then it looks up additional role information in the data source as required.&amp;nbsp; The most recently referred to roles end up being cached in the cookie. </p>
  <p />
  <p />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>