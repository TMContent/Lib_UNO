<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-437847628" Content_Hash="-1540877558">
  <Metadata>
    <Id>afb7610c-53ab-49dd-a425-f3e3272f7749</Id>
    <Id_History>afb7610c-53ab-49dd-a425-f3e3272f7749,addbfd1a-2f86-4b82-b97c-177fae75f688,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>.NET Use Structured Exception Handling</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET</Technology>
    <Type>Code Example</Type>
    <DirectLink>Use Structured Exception Handling</DirectLink>
    <Tag>ASP.NET,ASP.NET 4.0,ASP</Tag>
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* ASP.NET 4.0


## Summary ##

Use structured exception handling to catch exception conditions. Do not rely on function return codes to perform error handling.

The classic approach for error handling was to use the codes that functions return in order to evaluate the success or failure of certain operations. However, with a nontrivial function call hierarchy, this approach clutters the code significantly. Every function must check the return code of every function call it makes and take care of errors. In most cases, the function will merely pass any errors back up to its caller. Complex ASP.NET applications may have several hundred internal functions and a call hierarchy many levels deep, so this approach is difficult to maintain. Using structured exception handling simplifies and de-clutters the application code, which improves robustness and avoids leaving the application in an inconsistent state. It provides the application more information regarding the encountered error and minimizes the risk of information disclosure.


## Problem Example ##

The following code shows a component that queries the application's backend database. Because the developers have assigned a single exception of type System.Exception to the entire try/catch block, the application cannot respond adequately when an exception is thrown.

~~~~
try
{
    ...
    command = new SqlCommand(query, connection);
    ...
    result = command.ExecuteReader();
}
catch (Exception e)
{
    // Add appropriate exception handling
    // E.g.: Notify the user that the request cannot be completed
    // Log the event
}
~~~~


## Solution Example ##

The following code shows a component that queries the application's backend database. The developers have assigned a catch block to each of the appropriate types of exceptions; therefore allowing the application to handle all thrown exceptions accordingly.

~~~~
try
{
    ...
    command = new SqlCommand(query, connection);
    ...
    result = command.ExecuteReader();
}
catch (SqlException se)
{
     // Add appropriate exception handling
     // E.g.: Check database connectivity and restore lost connections
     // Log the event
}
catch (Exception e)
{
     // Add appropriate exception handling
     // E.g.: Notify the user that the request cannot be completed
     // Log the event
}
~~~~

---
Adapted from Microsoft patterns & practices guidance.]]></Data>
  </Content>
</TeamMentor_Article>