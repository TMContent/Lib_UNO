<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="190569653" Content_Hash="268749740">
  <Metadata>
    <Id>e38efbc0-26a7-4882-a74c-cc492ac52aae</Id>
    <Id_History>4a02d79f-417b-493f-9998-9b35ae033e06,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Avoid Connection Strings Constructed With User Input</Title>
    <Category>Data Access</Category>
    <Phase>Implementation</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Avoid Connection Strings Constructed With User Input</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Where possible, avoid connection strings constructed with user input. If you must build a connection string dynamically make sure that you validate any input from the source. Then, use one of the connection string builder classes that derive from <b>System.Data.Common.DbConnectionStringBuilder</b> class.</p>
  <h1>Why</h1>
  <p>Use the <b>ConnectionStringBuilder</b> class to allow compile-time checks and to reduce the risk of connection string injection attacks. </p>
  <h1>When</h1>
  <p>You must build a connection string dynamically with information from an external sourceâ€”such as using a user-supplied data source or server name or a user ID and password.</p>
  <h1>How</h1>
  <p>The code example shows the <b>System.Data.SqlClient.SqlConnectionStringBuilder</b> class for use with the SQL Server managed data provider.</p>
  <pre>using System.Data.SqlClient;<br />...<br />public string BuildConnectionString(string serverName, string uid, string pwd)<br />{<br />&amp;nbsp; // Validate input parameters<br />&amp;nbsp; ...</pre>
  <pre>&amp;nbsp; // Build Connection string<br />&amp;nbsp; SqlConnectionStringBuilder connectionStringBuilder = new <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SqlConnectionStringBuilder();<br />&amp;nbsp; connectionStringBuilder.DataSource = serverName;<br />&amp;nbsp; connectionStringBuilder.UserID = uid;<br />&amp;nbsp; connectionStringBuilder.Password = pwd;<br />&amp;nbsp; return connectionStringBuilder.ConnectionString;<br />}  </pre>
  <p>
    <strong>Note</strong> - <strong>DbConnectionStringBuilder</strong> class provides the base class from which strongly typed connection string builders derive. These include <strong>SqlConnectionStringBuilder</strong>, <strong>OracleConnectionStringBuilder</strong>, <strong>OdbcConnectionStringBuilder</strong>, and <strong>OleDbConnectionStringBuilder</strong>. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>