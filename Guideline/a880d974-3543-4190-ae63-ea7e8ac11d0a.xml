<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1148688328" Content_Hash="-1570652385">
  <Metadata>
    <Id>a880d974-3543-4190-ae63-ea7e8ac11d0a</Id>
    <Id_History>a880d974-3543-4190-ae63-ea7e8ac11d0a,4a91fe9d-0f2e-46ec-85b3-1bc258eec7ad,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>.NET Use Simple Error Messages</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET</Technology>
    <Type>Code Example</Type>
    <DirectLink>Do Not Disclose Valuable Information in Error Messages</DirectLink>
    <Tag>ASP.NET,ASP.NET 4.0,ASP</Tag>
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* ASP.NET 4.0+


## Summary ##

Ensure that all error messages are generic and do not disclose any valuable or sensitive information. All error messages should take care to not disclose any information that could be useful to an attacker. 

Attackers often probe web applications for error messages as a first attempt to understand the underlying technologies in place. An attacker will look for discrepancies between error messages to discover when different code paths are being taken or to discover information about the quality of their input. Error messages that are directly echoed from backend systems such as SQL or OS error messages can help a malicious user choose their next attacks.


## Problem Example ##

The following code authenticates a user. Unfortunately, the code reveals through its error messages whether the credentials sent represent a valid user or an invalid user:

~~~~
public void login()
{
      if (!validUser())
      {
            throw new Exception("User not found.");
      }
      if (!validPass())
      {
            throw new Exception("Wrong password.");
      }
      commit();
}
~~~~


## Solution Example ##

The following code authenticates a user. Since it presents the same error message regardless of why the authentication failed, an attacker can't determine if the credentials tried represent a valid user or not.

~~~~
public void login()
{
      if (!validUser() || !validPass())
      {
            throw new Exception("Authentication failed.");
      }
      commit();
}
~~~~

---
Adapted from Microsoft patterns & practices guidance.]]></Data>
  </Content>
</TeamMentor_Article>