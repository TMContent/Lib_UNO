<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1663176271" Content_Hash="-1893891339">
  <Metadata>
    <Id>a706450d-653c-4928-84ea-b9f754db8644</Id>
    <Id_History>a706450d-653c-4928-84ea-b9f754db8644,5a8d9de6-8df8-400f-a465-0e0d073d945f,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Use Structured Exception Handling</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>PHP</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Structured Exception Handling</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>PHP</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use structured exception handling to catch exception conditions. </p>
  <h1>Why</h1>
  <p>Using structured exception handling simplifies and de-clutters the application code, which improves robustness and avoids leaving the application in an inconsistent state. It provides the application more information regarding the encountered error and minimizes the risk of information disclosure. </p>
  <h1>When</h1>
  <p>Use structured exceptions whenever erroneous or exceptional conditions can be raised in a given program. </p>
  <h1>How</h1>
  <p>Exception handlers should be as specific and relevant as possible. When multiple exceptions are anticipated, the <em>try/catch</em> block should have multiple catch clauses to satisfy each type of exception. Consider the following aspects when constructing your application's exception handlers:</p>
  <ol>
    <li>
      <p>
        <strong>Location of handlers.</strong> The location of your exception handlers is very important if your code is to recover properly without damaging other parts of your application. Placing your handler closer to the exception source allows your application to have better information of the current operation and properly recover the appropriate resources.</p>
      <li>
        <p>
          <strong>Purpose of handlers.</strong> Carefully choose the purpose of your exception handlers. Although developers commonly use exception handlers to wrap up after their code has failed, exception handlers provide a mechanism for recovering allocated resources and safely disposing them. Keep track of the associated resources and handle them accordingly when an exception is thrown. If your code handles sensitive data, ensure that all instances of sensitive data inside your block of code have been safely disposed of.</p>
        <li>
          <p>
            <strong>Exception data.</strong> Because it is a common practice to log exceptions to help troubleshoot a problem, make sure that your exceptions do not contain sensitive data that could compromise your application's users or assets when logged.</p>
          <li>
            <p>
              <strong>Type of handlers.</strong> Always catch the type of exceptions that best fit your application's efforts to recover into its normal state of operation upon encountering an error. If a block in your application is expected to throw multiple types of exceptions, make sure that each exception type is handled accordingly.</p>
          </li>
        </li>
      </li>
    </li>
  </ol>]]></Data>
  </Content>
</TeamMentor_Article>