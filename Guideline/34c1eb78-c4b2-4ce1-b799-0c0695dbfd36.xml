<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-619735273" Content_Hash="1052901501">
  <Metadata>
    <Id>34c1eb78-c4b2-4ce1-b799-0c0695dbfd36</Id>
    <Id_History>adfc2ca1-7ef6-41cf-a6fe-65360f0324b0,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Validate Serialized Data Streams</Title>
    <Category>Serialization</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Validate Serialized Data Streams</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Serialized data should not be considered trusted data. Subject it to the same level of scrutiny that you would subject any other untrusted file, network, or user input.</p>
  <h1>Why</h1>
  <p>To avoid potentially damaging data being injected into the object which can harm your application.</p>
  <h1>When</h1>
  <p>Deserializing serialized data streams.</p>
  <h1>How</h1>
  <p>validate each field as it is reconstituted as shown in the following example.</p>
  <pre>public void DeserializationMethod(SerializationInfo info, StreamingContext cntx)<br />{<br />&amp;nbsp; string someData = info.GetString("someName");<br />&amp;nbsp; // Use input validation techniques to validate this data.<br />}  </pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>