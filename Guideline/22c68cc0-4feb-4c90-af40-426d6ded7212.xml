<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="802767888" Content_Hash="-1609436131">
  <Metadata>
    <Id>22c68cc0-4feb-4c90-af40-426d6ded7212</Id>
    <Id_History>ea25af24-8eca-45ad-9f41-94bad8880247,</Id_History>
    <Library_Id>c4b9cb6a-4561-4451-9b6c-4e59d73584f6</Library_Id>
    <Title>Force Password Renewal</Title>
    <Category>Authentication</Category>
    <Phase>Design</Phase>
    <Technology>Java</Technology>
    <Type>Guideline</Type>
    <DirectLink>Force Password Renewal</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>Applications written using Servlets or JSP.</li>
  </ul>
  <h1>What to Do</h1>
  <p>Force users to renew their passwords after a given period of time.</p>
  <h1>Why</h1>
  <p>Forcing users to renew their passwords reduces the risk of valid credentials becoming exposed. While this technique can prevent attackers from obtaining the valid credentials through the use of a <a href="/article/9df0124a-286e-4254-85cf-64cac5962631">Credentials Brute Force Attack</a> or a <a href="/article/fa4a8a3c-67e1-4391-a9a3-a5e17806eb1a">Credentials Dictionary Attack</a>, it can also reduce the business risk associated with any instances of discovered or leaked valid credentials.</p>
  <h1>When</h1>
  <p>Your application should always force its users to change their passwords.</p>
  <h1>How</h1>
  <p>Use the following steps to force users to change their passwords:</p>
  <ol>
    <li>
      <p>
        <strong>Define a password change policy. </strong>Establish a maximum password age for your application's users. For example, require that users must change passwords every 60 days and privileged users must change passwords every 30 days.</p>
      <li>
        <p>
          <strong>Design a password change mechanism. </strong>Track the password age and prompt the user to change their password when the password expires. For example, the following SQL transaction will help the application to determine whether a user's password has expired:</p>
        <pre>sql&gt; select &amp;#42; from passHistory<br />      where userid = &amp;#123;&amp;#123;username&amp;#125;&amp;#125; and<br />            last_changed &lt; (current_timestamp - interval '30' day);</pre>
        <li>
          <p>
            <strong>Enforce the password change policy. </strong>Embed the change of password mechanism into the authentication routine. Example:</p>
          <pre>String dbStatement = "select login_attempts from users"<br />                   &amp;#43; "where user = ? and pass = ?;";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br /><br />if (rs.first())<br />&amp;#123;<br />      userIsValid = true;<br />      loginCount = rs.getInt(1);&amp;#125;else<br />&amp;#123;<br />      userIsValid = false;<br />&amp;#125;<br /><br />rs.close();<br /><br />if(userIsValid)<br />&amp;#123;<br />      checkPasswordMaturity(user);<br />&amp;#125;</pre>
        </li>
      </li>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> PCI DSS requirements state that a user's password must be renewed at most every 90 days and that the new password cannot be the same as the previous four.</p>
  <h1>Problem Example</h1>
  <p>The following code is part of the application's authentication routine. Because the application fails to force the user to renew their password, it allows more time for an attacker to guess the user's password.</p>
  <pre>String dbStatement = "select login_attempts from users"<br />                   &amp;#43; "where user = ? and pass = ?;";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br /><br />if (rs.first())<br />&amp;#123;<br />      userIsValid = true;<br />      loginCount = rs.getInt(1);<br />&amp;#125;<br />else<br />&amp;#123;<br />      userIsValid = false;<br />&amp;#125;<br /><br />rs.close();<br /><br />if(userIsValid)<br />&amp;#123;<br />       // The application fails to check the password's maturity<br />&amp;#125;</pre>
  <h1>Solution Example</h1>
  <p>The following code is part of the application's authentication routine. Because the application forces its users to renew their passwords, there is limited time for an attacker to guess the user's password or to use a guessed password.</p>
  <blockquote>
    <pre>String dbStatement = "select login_attempts from users"<br />                   &amp;#43; "where user = ? and pass = ?;";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br />if (rs.first())<br />&amp;#123;<br />      userIsValid = true;<br />      loginCount = rs.getInt(1);<br />&amp;#125;<br />else<br />&amp;#123;<br />      userIsValid = false;<br />&amp;#125;<br /><br />rs.close();<br /><br />if(userIsValid)<br />&amp;#123;<br />      // The application checks the password's maturity<br />      checkPasswordMaturity(user);<br />&amp;#125;<br /><br />...<br /><br />private void checkPasswordMaturity(String user)<br />      throws UserMustChangePasswordException<br />&amp;#123;<br />      Connection dbConnection = MyApp.getDBConnection();<br />      String dbStatement = "select &amp;#42; from passHistory"<br />                         &amp;#43; "where userid = ? and"<br />                         &amp;#43; " last_changed &lt; (current_timestamp - interval '30' day);";<br />      PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />      st.setString(1, user);<br />      ResultSet rs = st.executeQuery();<br />      if (rs.first())<br />      &amp;#123;<br />            rs.close();<br />            throw new UserMustChangePasswordException();<br />      &amp;#125;<br />      rs.close();<br />&amp;#125;</pre>
  </blockquote>
  <h1>Authentication Guidelines</h1>
  <ul>
    <li>
      <a href="/article/989e27ec-ffdf-4006-88bd-1c09fc991a28">Centralize Authentication Controls</a>
    </li>
    <li>
      <a href="/article/d3a69ef7-2c63-41bc-81e4-803b0ea199d8">Use Server-side Authentication</a>
    </li>
    <li>
      <a href="/article/38d12903-9c3b-46bd-9f5e-f223c3272624">Make Sure Authentication Controls Fail Securely</a>
    </li>
    <li>
      <a href="/article/84fd606b-e2f2-4c48-9c6e-6b5e780c6163">Force Re-authentication When Executing Critical Functionality</a>
    </li>
    <li>
      <a href="/article/c566cabe-2463-4d24-8763-22e8468d167e">Validate Usernames Before Processing Them</a>
    </li>
    <li>
      <a href="/article/7ba2d49c-ff53-4755-97ae-0efcb0aa9c22">Lock Accounts After Consecutive Failed Login Attempts</a>
    </li>
    <li>
      <a href="/article/4b5b1f05-aa9a-4ebc-8b2e-3cecabed03e1">Enforce Strong Passwords</a>
    </li>
    <li>
      <a href="/article/ea25af24-8eca-45ad-9f41-94bad8880247">Force Password Renewal</a>
    </li>
    <li>
      <a href="/article/c7825052-f281-4ac8-a786-41b776219af6">Mask All Password Fields</a>
    </li>
    <li>
      <a href="/article/c4d9269f-9157-4919-952c-f0d14ccd7f60">Verify the Application's Authenticity to the User</a>
    </li>
    <li>
      <a href="/article/b4f83e8e-3223-4e49-bc9c-56c8c7268582">Place Logout Links on All Pages that Require Authentication</a>
    </li>
    <li>
      <a href="/article/ff95311e-797f-417f-bd0b-e6cf610f706c">Do Not Leave Passwords in Memory</a>
    </li>
    <li>
      <a href="/article/bcf8adb4-8186-4b97-b490-4fa33f506bfd">Limit Access to the Credential Store</a>
    </li>
    <li>
      <a href="/article/0dba2e1f-7d49-4d91-bc93-ad85480f784a">Consider Using JAAS for Authentication</a>
    </li>
    <li>
      <a href="/article/9cf8aed6-22a5-49c1-a0ce-1d8e5366bebf">Consider Using Two Factor Authentication</a>
    </li>
  </ul>
  <h1>Authentication Checklists</h1>
  <ul>
    <li>
      <a href="/article/4e431329-73aa-41f7-b397-9b7e26294a4c">Authentication Controls Are Centralized</a>
    </li>
    <li>
      <a href="/article/b103207d-73e3-4964-9a00-2b15c3e012b8">Server-side Authentication Is Used</a>
    </li>
    <li>
      <a href="/article/ded06846-ad7f-4044-87d2-8bbb6b885713">Authentication Controls Fail Securely</a>
    </li>
    <li>
      <a href="/article/df093ee3-ad7b-4191-935c-8bb0cad78d98">Re-authentication Is Enforced When Executing Critical Functionality</a>
    </li>
    <li>
      <a href="/article/f8586505-72f9-4c14-a365-3e5049e5ca57">Usernames Are Validated Before Use</a>
    </li>
    <li>
      <a href="/article/61e0e2b4-2f09-429a-b72f-f8933f2fa9b6">Accounts Are Locked After Consecutive Failed Login Attempts</a>
    </li>
    <li>
      <a href="/article/7401862f-ae81-4f31-9340-981b0ec5a854">Strong Passwords Are Enforced</a>
    </li>
    <li>
      <a href="/article/12889762-1d65-4b7d-a90a-58ff6c23d1e4">Password Renewal Is Enforced</a>
    </li>
    <li>
      <a href="/article/09f994c9-a401-404c-bdc9-210038eba658">All Password Fields Are Masked</a>
    </li>
    <li>
      <a href="/article/35851f18-13a0-4bf8-88cc-d35c371cfb12">The Application's Authenticity Is Verified to the User</a>
    </li>
    <li>
      <a href="/article/493e0e57-254a-4697-8fa1-c93e706d416d">All Pages that Use Authentication Have Logout Links</a>
    </li>
    <li>
      <a href="/article/55488f2e-ed85-4f0f-9f83-1d90a5d10bd0">Passwords Are Not Left in Memory</a>
    </li>
    <li>
      <a href="/article/9031f577-80b0-4a2e-9652-7b470439a0df">Access to the Credential Store Is Limited</a>
    </li>
  </ul>
  <h1>Authentication Testing</h1>
  <ul>
    <li>
      <a href="/article/f32846cf-35f6-40fe-8517-f0ac8a415383">How to Test for Account Lockout Bugs in Java</a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>