<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-767364072" Content_Hash="-922618676">
  <Metadata>
    <Id>8d535d67-4302-45d7-865b-b887e78f5eff</Id>
    <Id_History>bb59636f-b266-40fd-b1bf-616af904efe2,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use a Least-Privileged Account for Running ASP.NET Applications</Title>
    <Category>Deployment Considerations</Category>
    <Phase>Deployment</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use a Least-Privileged Account for Running ASP.NET Applications</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority> J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to </h1>
  <ul>
    <li>ASP.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use an account with the minimum privilege levels necessary to run an ASP.Net application. </p>
  <h1>Why</h1>
  <p>The principle of least privilege is a ubiquitous security concept. Following that guideline, applications should not be given privileges that are unnecessary for normal operation. </p>
  <h1>When</h1>
  <p>On IIS 5, ASP.NET Web applications run by default using the least privileged ASPNET account. On IIS 6, they run inside an application pool using the least privileged Network Service account. If you need to use a custom service account to run your ASP.NET Web application, create a least-privileged account. You might need to create a custom service account to isolate your application from other applications on the same server or to be able to audit each application separately. </p>
  <h1>How</h1>
  <p>To create a least privileged account Create a local or domain Windows account. Run the following Aspnet_regiis.exe command to assign the relevant ASP.NET permissions to the account: aspnet_regiis.exe -ga machineName\userName On Windows Server 2003, running the Aspnet_regiis.exe -ga command will add the account to the IIS_WPG group. The IIS_WPG group provides the Log on as a batch job user right and ensures that the necessary file system permissions are granted. Note With ASP.NET Beta 2, the Aspnet_regiis.exega command does not add the account to the IIS_WPG group. However, it will do so prior to the final release of ASP.NET 2.0. Use the Local Security Policy tool to grant the Windows account the Deny logon locally user right. This reduces the privileges of the account and prevents anyone logging onto Windows locally with the account. Use IIS Manager to create an application pool running under the new account's identity and assign your ASP.NET application to the pool. </p>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>