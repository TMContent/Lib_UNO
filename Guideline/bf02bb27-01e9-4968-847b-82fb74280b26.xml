<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2007178813" Content_Hash="945482957">
  <Metadata>
    <Id>bf02bb27-01e9-4968-847b-82fb74280b26</Id>
    <Id_History>bf02bb27-01e9-4968-847b-82fb74280b26,730542fd-244a-41a2-8660-4eb28f6b6054,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>.NET Put Logs on a Separate Server</Title>
    <Category>Auditing and Logging</Category>
    <Phase>Deployment</Phase>
    <Technology>.NET</Technology>
    <Type>Code Example</Type>
    <DirectLink>Put Logs on a Separate Server</DirectLink>
    <Tag>ASP.NET,ASP.NET 3.5,ASP</Tag>
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* ASP.NET


## Summary ##

Log application events on a separate, protected server. If the primary server is compromised, logs which are located elsewhere cannot be compromised.  This prevents an attacker from covering their steps.  Also, the logging server can have a much smaller attack surface than the primary server, as it does not need to be accessible to end users.  This makes logs much harder to compromise than other parts of the site, which can be valuable when non-repudiation is a primary business requirement.


## Problem Example ##

An e-commerce site with a two-tier web server/database model is built using file-based logging, and each machine keeps its logs on local disk.  When several of the web servers are compromised, the attackers wipe the logs and the owners are unable to determine how they got in.  The attacks re-occur several times because of this, before the hole is finally found and patched.


## Solution Example ##

An e-commerce site with a two-tier web server/database model is built using remote logging server, with communication occuring over an encrypted channel.  When several of the web servers are compromised, the attackers are unable to break into the remote logging machine and cannot wipe the logs.  The owners find the whole quickly, thanks to the information in the log files, and the machines are patched immediately.

~~~~
<healthMonitoring heartbeatInterval="0" enabled="true">
 <providers>
    <add connectionStringName="MySqlConnection"
       maxEventDetailsLength="1073741823"
       buffer="true"
       bufferMode="Extra Critical Notification"
        name="MySqlWebEventProvider"
        type="System.Web.Management.SqlWebEventProvider,System.Web,Version=2.0.0 .0,
                Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a" />
  </providers>
</healthMonitoring> 
~~~~

* name. This is a name for the buffer mode used to reference it from other elements.
type. This is a fully-qualified assembly reference to the provider class. This class should implement the System.Configuration.Provider.ProviderBase class.

* buffer. If you are using the SqlWebEventProvider, use this attribute to enable event buffering. If this attribute is true, you must configure the bufferMode attribute. The default value is false.

* bufferMode. If you are using the SqlWebEventProvider, use this attribute to specify the friendly name of the buffer mode to be used for buffering the events.

* connectionStringName. If you are using the SqlWebEventProvider, use this attribute to specify the friendly name of the connection string used for connecting to the SQL Server database.

* maxEventDetailsLength. This is the maximum length of the event details.

---
Adapted from Microsoft patterns & practices guidance.]]></Data>
  </Content>
</TeamMentor_Article>