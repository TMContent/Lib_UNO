<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="765155645" Content_Hash="-170310625">
  <Metadata>
    <Id>461370b3-66e7-4ac3-900f-7e2f757c54a8</Id>
    <Id_History>461370b3-66e7-4ac3-900f-7e2f757c54a8,db8b28a8-40d0-405b-bbef-e2964d35aca7,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>.NET Use a Global Exception Handler</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET</Technology>
    <Type>Code Example</Type>
    <DirectLink>Use a Global Exception Handler for Unhandled Exceptions</DirectLink>
    <Tag>ASP.NET,ASP.NET 4.0,ASP</Tag>
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* ASP.NET 4.0+


## Summary ##

Use a global exception handler to catch unhandled exceptions. A global exception handler improves the application's robustness and minimizes the risk of information disclosure.

Unhandled exceptions can be a serious stumbling block to an application's performance and security. Unhandled exceptions must be avoided as they can result in the application entering an unknown state and/or revealing sensitive internal application details. Using a global exception handler will prevent unhandled exceptions.


## Problem Example ##

An ASP.NET application connects to a SQL database. However, the application does not have a generic error handler specified. As a result, when the connection times out application details are revealed to the client in the exception.


## Solution Example ##

An ASP.NET application has code to connect to a SQL database. It has defined an application-level global error handler to trap and log all unhandled exceptions. This allows the application to present a generic error message to the client while logging more detailed information to the server.

~~~~
<%@ Application Language="C#" %>
<%@ Import Namespace="System.Diagnostics" %>
 <script language="C#" runat="server">
 void Application_Error(object sender, EventArgs e)
 {
     // Add the appropriate logging code
     Exception ex = Server.GetLastError();
     if (ex.GetType().Name.Equals("SQLException"))
     { 
        Server.Transfer("dbError.html");
     }
     else
     {
         Server.Transfer("genericError.html");
     }
         Server.ClearError();
 }
 </script>
~~~~

---
Adapted from Microsoft patterns & practices guidance.]]></Data>
  </Content>
</TeamMentor_Article>