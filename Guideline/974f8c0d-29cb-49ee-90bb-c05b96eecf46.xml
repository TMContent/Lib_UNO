<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2095553994" Content_Hash="-239886588">
  <Metadata>
    <Id>974f8c0d-29cb-49ee-90bb-c05b96eecf46</Id>
    <Id_History>d91b96b6-397b-4e92-903b-45f58c4e6816,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Type-Safe SQL Parameters for Data Access</Title>
    <Category>SQL Injection</Category>
    <Phase>Implementation</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Type-Safe SQL Parameters for Data Access</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ADO.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>Use type-safe parameters when constructing dynamic SQL queries or when passing parameters to stored procedures.</p>
  <h1>Why</h1>
  <p>If you use the Parameters collection, such as <strong>SqlParameterCollection</strong>,&amp;nbsp;treats the input is&amp;nbsp;as a literal value rather then as&amp;nbsp;executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception. If&amp;nbsp;type-safe SQL parameters are not used, attackers might be able to execute&amp;nbsp;injection attacks&amp;nbsp;that are embedded in the&amp;nbsp;unfiltered input.</p>
  <h1>When</h1>
  <p>Use type-safe SQL parameters with stored procedures or dynamically constructed SQL command strings.</p>
  <h1>How</h1>
  <p>The following code shows how to use <b>SqlParameterCollection</b> when your code calls a stored procedure.</p>
  <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
  <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myAdapter = new SqlDataAdapter( <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "LoginStoredProcedure", connection);<br />&amp;nbsp; myAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;<br />&amp;nbsp; myAdapter.SelectCommand.Parameters.Add("@au_id", SqlDbType.VarChar, 11);<br />&amp;nbsp; myAdapter.SelectCommand.Parameters["@au_id"].Value = SSN.Text;</pre>
  <pre>&amp;nbsp; myAdapter.Fill(userDataset);<br />}</pre>
  <p>If you cannot use stored procedures, you should still use parameters when constructing dynamic SQL statements. The following code shows how to use <b>SqlParametersCollection</b> with dynamic SQL.</p>
  <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
  <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "SELECT au_lname, au_fname FROM Authors WHERE au_id = @au_id", <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connection);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp; myDataAdapter.SelectCommand.Parameters.Add("@au_id", SqlDbType.VarChar, 11);<br />&amp;nbsp; myDataAdapter.SelectCommand.Parameters["@au_id"].Value = SSN.Text;<br />&amp;nbsp; myDataAdapter.Fill(userDataset);<br />}</pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>