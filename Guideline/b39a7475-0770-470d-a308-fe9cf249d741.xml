<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="303313200" Content_Hash="1084435923">
  <Metadata>
    <Id>b39a7475-0770-470d-a308-fe9cf249d741</Id>
    <Id_History>e8796398-e543-4d4e-91f9-064b9200985e,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Use Strong Passwords for SQL Authentication</Title>
    <Category>Data Access</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Use Strong Passwords for SQL Authentication</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>When&amp;nbsp;using SQL Server authentication, choose a strong password. </p>
  <h1>Why</h1>
  <p>Using strong passwords decreases the likelihood that an attacker is able to gain access to an account by guessing the&amp;nbsp;password.&amp;nbsp;Failing to use sufficiently strong passwords might make it possible for an attacker to succesfully brute-force crack a password without resorting to millions of attempts.&amp;nbsp;</p>
  <h1>When</h1>
  <p>This guideline is applicable&amp;nbsp;whenever SQL authentication is used. Never use weak passwords for SQL authentication.</p>
  <h1>How</h1>
  <p>Here are the steps that should be followed to create a strong password:</p>
  <ol>
    <li>
      <strong>DO </strong>use a password with mixed-case letters. Use uppercase letters throughout the password. </li>
    <li>
      <strong>DO NOT</strong> just capitalize the first letter, but add uppercase letters throughout the password.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> use a network login ID in any form (reversed, capitalized, or doubled as a password). </li>
    <li>
      <strong>DO</strong> use a password that contains alphanumeric characters and include punctuation, such as ! and $.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> use your first, middle or last name or anyone elseâ€™s in any form. Do not use initials or any nicknames.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> use a word contained in English or foreign dictionaries, spelling lists, or other word lists and abbreviations.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO</strong> use at least seven characters.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> use other information easily obtainable. This includes pet names, license plate numbers, telephone numbers, identification numbers, the brand of your automobile, the name of the street you live on, and so on. Such passwords are very easily guessed by someone who knows the user.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO</strong> use a seemingly random selection of letters and numbers.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> use a password of all numbers, or a password composed of alphabet characters. Mix numbers and letters.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO </strong>use a password that can be typed quickly, without having to look at the keyboard. This makes it harder for someone to steal&amp;nbsp;a password by looking at&amp;nbsp;the keyboard (also known as "shoulder surfing").&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> use dates e.g., September, SEPT1999 or any combination thereof.&amp;nbsp; </li>
    <li>
      <strong>DO</strong> change passwords regularly. The more critical an account to network integrity (such as root on a Unix host or Administrator on Windows NT), the more frequently the password should be changed. This change stops someone who has already compromised an account from continued access. </li>
    <li>
      <strong>DO NOT</strong> use keyboard sequences, e.g., qwerty.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> use a sample password, no matter how good, from a book that discusses information and computer security.&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> use any of the above things spelled backwards, or in caps, or otherwise disguised.&amp;nbsp;&amp;nbsp;&amp;nbsp; </li>
    <li>
      <strong>DO NOT</strong> reveal a password to anyone, as this automatically&amp;nbsp;invalidates it's strength.&amp;nbsp; <br /></li>
  </ol>
  <h1>Problem Example</h1>
  <p>
    <br />An ASP.NET application uses SQL server for it's persistence layer. There is an instance of SQL injection&amp;nbsp;in the application, and the SQL administrative account 'sa' password is '1234'.&amp;nbsp;The database account that the application uses is configured with minimal privileges. Here's how a hacker can run arbitrary commands in SQL: </p>
  <p>1. The hacker locates an instance of SQL injection on the Web site.</p>
  <p>2. The hacker determines that he needs to run the command under the sa account, since the database account that the application uses lacks the appropriate privilege to carry out the atttack that the hacker has in mind. </p>
  <p>3. The hacker knows he can run a SQL command with an alternate identity if he runs an OPENROWSET command such as:</p>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SELECT * FROM OPENROWSET <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ('SQLOLEDB',';'sa'; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&lt;password&gt;','&lt;query to be <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; executed&gt;')</pre>
  <p>4. The hacker comes up with a SQL injection attack that will let him pass in a valid query. He uses sa as the username and guesses the password.</p>
  <p>5. The application errors out, which lets him know that the password was invalid.</p>
  <p>6. The hacker creates a simple brute-force program to crack the sa password. since the password is '1234', it will most likely be discovered with minimal effort.</p>
  <p>7. Once the hacker has the sa password, he can continue to execute the SQL injection attack using the OPENROWSET command. </p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application uses SQL server for it's persistence layer. The SQL administrative account 'sa' password is set to &amp;nbsp;'rYK56lm4$'.&amp;nbsp;The database account that the application uses is configured with minimal privileges. This is a better password choice then using a password like '1234' for several reasons:</p>
  <ul>
    <li>uses mixed case letters </li>
    <li>uses special characters beyond alpha numeric </li>
    <li>does not look like any default passwords that a system might use </li>
    <li>uses several characters that are close to the home row on a QWERTY keyboard, which makes it much faster to tyep and harder to shoulder surf. </li>
    <li>does not correspond to any words in language dictionaries</li>
  </ul>
  <p>Note: DO NOT use any of the above&amp;nbsp;examples directly as password choices! They are immediately invalidated as safe since they are included in a security reference guide that is publically available.&amp;nbsp; </p>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>