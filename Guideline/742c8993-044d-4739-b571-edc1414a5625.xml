<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
  <Metadata>
    <Id>742c8993-044d-4739-b571-edc1414a5625</Id>
    <Id_History>00000000-0000-0000-0000-0000007c30fb,</Id_History>
    <Library_Id>c4b9cb6a-4561-4451-9b6c-4e59d73584f6</Library_Id>
    <Title>Cross-Site Request Forgery</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Vulnerability</Type>
    <DirectLink>Cross-Site Request Forgery</DirectLink>
    <Author />
    <Priority />
    <Status />
  </Metadata>
  <Content Sanitized="false" DataType="wikitext">
    <Data><![CDATA[==Description==

A Cross Site Request Forgery (CSRF) attack occurs when an attacker tricks a victim into loading a page that contains a malicious request. This request may be able to change the state of the web application and is possible because the request is sent in the context of the logged in victim. For many sites each request automatically sends the victim's credentials such as the session cookie or authentication credentials. Due to this fact there is no way to distinguish the false request from a legitimate request. CSRF vulnerabilities affect web applications that allow authenticated users to perform operations that are not available to guest users. To prevent CSRF, include unique tokens in pages that invoke security sensitive operations. To check your application for CSRF, determine whether unique tokens are used in pages that carry out sensitive operations.

Cross Site Request Forgery attacks are known by other names including XSRF, Session Riding, One-Click and Zero-Click attacks. A One-Click attack refers to a link that causes a malicious action to be performed when a victim clicks on it. A Zero-Click attack is automatically executed upon page load. A common way to perform a zero-click attack is to embed the request in the source of an image. 

==Impact==

CSRF allows the attacker to carry out actions on the behalf of an authenticated user by tricking the user into visiting a malicious page or link. The exact impact depends on what functionality is vulnerable to CSRF. The attacker will usually try to add a privileged user account for himself or to inject arbitrary code into the application. If either of those scenarios succeeds, the attacker gains full control of the application.

==Countermeasures==

Implement all of the following countermeasures to protect your application against CSRF. 

* [[61b8ebc8-3ba5-4e75-aea8-94d6d3b3177e|Include Unique Tokens in HTTP Requests]]
* [[7d647e95-e47f-42e3-bb84-fd0dd727245c|Add Unique Tokens to HTTP Requests Using ESAPI]]
* [[25e3943b-a651-42c5-9e19-76077de05e90|Add Unique Tokens to HTTP Requests Using Java Server Faces (JSF)]]
* [[986c7161-0a76-430a-8d0e-80d4615ab5db|Add Unique Tokens to HTTP Requests Using Plain Java Server Pages (JSP)]]
* [[bf931bed-21c0-4b89-9cb2-9274d8c796a6|Cross-Site Request Forgery (CSRF) Prevention Using SpringMVC]]
* [[63deed1a-6df4-4e04-9f61-898f190e1fe1|Cross-Site Request Forgery (CSRF) Prevention Using Struts 1]]
* [[a9c2c121-614c-4a3f-9b7c-f2cf57d6aa0b|Cross-Site Request Forgery (CSRF) Prevention Using Struts 2]]
* [[84fd606b-e2f2-4c48-9c6e-6b5e780c6163|Force Re-authentication When Executing Critical Functionality]]

==Checklists==

Use each of the following checklist items to make sure that sufficient countermeasures against CSRF have been implemented. 

* [[0463ae25-dc35-45e7-8b24-9b1f8ddb6af0|Unique Tokens Are Included in HTTP Requests]]
* [[df093ee3-ad7b-4191-935c-8bb0cad78d98|Re-authentication Is Enforced When Executing Critical Functionality]]

==Computer Based Training Links==

Use the following Computer Based Training courses to learn more about Cross-Site Request Forgery including techniques for remediation and prevention.

===Creating Secure Code – JRE Foundations===

In this course, you will learn to recognize and remediate common Java Web software security vulnerabilities.  This course has three modules, which introduce you to these vulnerabilities and help you to identify and remediate them. 

For more information about Cross-Site Request Forgery in Java applications, see screens 40-45 in [[http://teamprofessor.absorbtraining.com/ninja/#/courses/course/127615|COD 211 Creating Secure Code – JRE Foundations]].

//Valid login credentials and enrollment in the course itself are required to access Team Professor content. If you need login credentials, please contact support@securityinnovation.com for help.//]]></Data>
  </Content>
</TeamMentor_Article>