<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1071940948" Content_Hash="-208119685">
  <Metadata>
    <Id>71f0d76c-1767-41ef-94eb-9cb98f9c1f93</Id>
    <Id_History>485a8261-d637-4a47-8643-de094828bf56,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Force Password Renewal</Title>
    <Category>Authentication</Category>
    <Phase>Design</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Guideline</Type>
    <DirectLink>Force Password Renewal</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Do</h1>
  <p>Force users to renew their passwords after a given period of time.</p>
  <h1>Why</h1>
  <p>Forcing users to renew their passwords reduces the risk of valid credentials becoming exposed. While this technique can prevent attackers from obtaining the valid credentials through the use of a <a href="/article/d72d0706-99df-4a65-a19d-6a83ec868a7b">Credentials Brute Force Attack</a> or a <a href="/article/e8b05112-2416-436a-9679-07d9e5626bca">Credentials Dictionary Attack</a>, it can also reduce the business risk associated with any instances of &amp;#8220;discovered&amp;#8221; or &amp;#8220;leaked&amp;#8221; valid credentials.</p>
  <h1>When</h1>
  <p>Your application should always force its users to change their passwords.</p>
  <h1>How</h1>
  <p>Use the following steps to force users to change their passwords:</p>
  <ol>
    <li>
      <p>
        <strong>Define a password change policy. </strong>Establish a maximum password age for your application's users. Determining the maximum password age depends on the level of security required for your application as well as the likelihood of attack. Recognize that there is a tradeoff to be considered when defining any password policy; if the policy is too strict, then users tend to just write passwords down which can hurt the overall security of the application. A good baseline for password renewal is every 90 days.</p>
      <p>You may also consider defining different frequencies for various user groups within your application. For instance, it might make sense to require more frequent changes for the system administrator passwords as this class of users typically has more privileges and is therefore a bigger target for attack.</p>
      <li>
        <p>
          <strong>Design a password change mechanism.</strong> Track the password age and prompt the user to change their password when the password is expiring. If your application uses ASP.NET membership providers, use MembershipUser.LastPasswordChangedDate property to track the last update of the user's password. Example:</p>
        <pre>MembershipUser user = membershipProvider.GetUser(username, true);<br />TimeSpan diff = DateTime.Now - user.LastPasswordChangedDate;</pre>
        <li>
          <p>
            <strong>Enforce the password change policy.</strong> Embed the change of password mechanism into the authentication routine. If your application uses ASP.NET membership providers, use the ASP.NET RoleManager to identify the appropriate password change interval and prompt the user to change their password if necessary. It is recommended to place such functionality immediately after the authentication procedure. Example:</p>
          <pre>bool changePass = false;<br />string username = HttpContext.Current.User.Identity.Name;<br />MembershipProvider membershipProvider = Membership.Provider;<br />MembershipUser user = membershipProvider.GetUser(username, true); <br />TimeSpan diff = DateTime.Now - user.LastPasswordChangedDate;<br />if (Roles.IsUserInRole("Admin") &amp;&amp; diff.Days &gt;= 30)<br />&amp;#123;    <br />  changePass = true;<br />&amp;#125; <br />if (Roles.IsUserInRole("Users") &amp;&amp; diff.Days &gt;= 90)<br />&amp;#123;    <br />  changePass = true;<br />&amp;#125; <br />if (changePass)<br />&amp;#123;    <br />  HttpContext.Current.Response.Redirect("ChangePass.aspx", true);<br />&amp;#125;</pre>
        </li>
      </li>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code is part of the application's authentication routine. Because the application fails to force the user to renew their password, it allows more time for an attacker to guess the user's password.</p>
  <blockquote>
    <pre>&lt;&amp;#33;-- The application's login control --&gt;<br />&lt;asp:Login ID="Login1" runat="server" DestinationPageUrl="~/Protected.aspx" /&gt;<br /> // The Page_Load method of Protected.aspxprotected <br />void Page_Load(object sender, EventArgs e)&amp;#123;&amp;#125;</pre>
  </blockquote>
  <h1>Solution Example</h1>
  <p>The following code is part of the application's authentication routine. Because the application forces its users to renew their passwords, there is limited time for an attacker to guess the user's password.</p>
  <blockquote>
    <pre>&lt;&amp;#33;-- The application's login control --&gt;<br />&lt;asp:Login ID="Login1" runat="server" DestinationPageUrl="~/Protected.aspx" /&gt; <br />// The Page_Load method of Protected.aspxprotected <br />void Page_Load(object sender, EventArgs e)<br />&amp;#123;    <br />  CheckPasswordMaturity();<br />&amp;#125; </pre>
    <pre>void CheckPasswordMaturity()<br />&amp;#123;    <br />  bool changePass = false;    <br />  string username = HttpContext.Current.User.Identity.Name;    <br />  MembershipProvider membershipProvider = Membership.Provider;    <br />  MembershipUser user = membershipProvider.GetUser(username, true);     <br />  TimeSpan diff = DateTime.Now - user.LastPasswordChangedDate;    <br />  if (Roles.IsUserInRole("Admin") &amp;&amp; diff.Days &gt;= 30)    <br />  &amp;#123;        <br />    changePass = true;    <br />  &amp;#125;     <br />  if (Roles.IsUserInRole("Users") &amp;&amp; diff.Days &gt;= 90)    <br />  &amp;#123;        <br />    changePass = true;    <br />  &amp;#125;     <br />  if (changePass)    <br />  &amp;#123;        <br />    HttpContext.Current.Response.Redirect("ChangePass.aspx", true);    <br />  &amp;#125;<br />&amp;#125;</pre>
  </blockquote>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about ActiveDirectoryMembershipProvider class, visit: Documentation for <a href="http://msdn2.microsoft.com/en-us/library/system.web.security.activedirectorymembershipprovider(vs.80).aspx">ActiveDirectoryMembershipProvider Class</a> in MSDN. <li>To learn more about SqlMembershipProvider class, visit: Documentation for <a href="http://msdn2.microsoft.com/en-us/library/system.web.security.sqlmembershipprovider(vs.80).aspx">SqlMembershipProvider Class</a> in MSDN.</li></li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/c2611962-a559-4a30-bbb7-bf792242ec04">Guideline: Enforce Strong Passwords </a>
      <li>
        <a href="/article/d72d0706-99df-4a65-a19d-6a83ec868a7b">Attack: Credentials Brute Force Attack</a>
        <li>
          <a href="/article/e8b05112-2416-436a-9679-07d9e5626bca">Attack: Credentials Dictionary Attack</a>
          <li>
            <a href="/article/b0ac82e3-fe0d-4581-85bd-48ff3fd9fb19">Attack: Weak Password Attack</a>
            <li>
              <a href="/article/c468e4b0-92cc-4558-8532-e0c77606efa5">Checklist Item: Password Renewal is Enforced </a>
              <hr />
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>