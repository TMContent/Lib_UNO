<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1377257656" Content_Hash="-211748602">
  <Metadata>
    <Id>1a99f15c-09f1-4cbb-acf3-672e320ad552</Id>
    <Id_History>953fc08c-01a5-4224-9a6d-d12f37fc022b,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Consider Constraining File IO Within Your Application&amp;#39;s Context</Title>
    <Category>File I/O</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 2.0</Technology>
    <Type>Guideline</Type>
    <DirectLink>Consider Constraining File IO Within Your Application&amp;#39;s Context</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Srinath Vasireddy, Ashish Babbar, Rico Mariani, and Alex Mackman</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>.NET 2.0</li>
  </ul>
  <h1>What to Do</h1>
  <p>You can use a restricted <b>FileIOPermission</b> to constrain an assembly's ability to perform file I/O; for example, by specifying allowed access rights (read, read/write, and so on) or limiting access to specific directories.</p>
  <h1>Why</h1>
  <p>If you don't constrain file&amp;nbsp;I/O within your application's context, it&amp;nbsp;can result in attackers coercing your application into accessing arbitrary files and resources.</p>
  <h1>When</h1>
  <p>This is important guideline and should be followed all the time.</p>
  <h1>How</h1>
  <p>You can use declarative attributes together with <b>SecurityAction.PermitOnly</b> to constrain file I/O, as shown in the following example.</p>
  <pre>// Allow only this code to read files from c:\YourAppDir<br />[FileIOPermission(SecurityAction.PermitOnly, <a href="mailto:Read=@&quot;c:\YourAppDir\">Read=@"c:\YourAppDir\</a>")]<br />[FileIOPermission(SecurityAction.PermitOnly, <a href="mailto:PathDiscovery=@&quot;c:\YourAppDir\">PathDiscovery=@"c:\YourAppDir\</a>")]<br />public static string ReadFile(string filename)<br />{<br />&amp;nbsp; // Use Path.GetFullPath() to canonicalize the file name<br />&amp;nbsp; // Use FileStream.OpenRead to open the file<br />&amp;nbsp; // Use FileStream.Read to access and return the data<br />}  </pre>
  <blockquote>
    <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;The second attribute that specifies <b>PathDiscovery</b> access is required by the <b>Path.GetFullPath</b> function that is used to canonicalize the input file name.</blockquote>
  <p>To avoid hard coding your application's directory hierarchy, you can use imperative security syntax, and then use the <b>HttpContext.Current.Request.MapPath(".")</b>to retrieve your Web application's directory at run time. You must refer to the <b>System.Web</b> assembly and add the corresponding <b>using</b> statement, as shown in the following example.</p>
  <pre>using System.Web;<br />using System.Security.Permissions;<br />...<br />public static string ReadFile(string filename)<br />{<br />&amp;nbsp; string appDir = HttpContext.Current.Request.MapPath(".");<br />&amp;nbsp; FileIOPermission f = new FileIOPermission(PermissionState.None);<br />&amp;nbsp; f.SetPathList(FileIOPermissionAccess.Read, appDir);<br />&amp;nbsp; f.SetPathList(FileIOPermissionAccess.PathDiscovery, appDir);<br />&amp;nbsp; f.PermitOnly();</pre>
  <pre>&amp;nbsp; // Use Path.GetFullPath() to canonicalize the file name<br />&amp;nbsp; // Use FileStream.OpenRead to open the file<br />&amp;nbsp; // Use FileStream.Read to access and return the data<br />}  </pre>
  <p>Partial trust ASP.NET Web applications that run with medium trust use code access security to restrict the directories that your application can access. Medium trust policy permits your application to access the directories beneath your application's virtual root directory.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>