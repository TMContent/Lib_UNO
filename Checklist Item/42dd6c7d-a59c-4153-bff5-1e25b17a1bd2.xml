<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-908010439" Content_Hash="-819446444">
  <Metadata>
    <Id>42dd6c7d-a59c-4153-bff5-1e25b17a1bd2</Id>
    <Id_History>42dd6c7d-a59c-4153-bff5-1e25b17a1bd2,0ab6b388-76f1-4bcb-86b6-759cb438cc1d,</Id_History>
    <Library_Id>51eb81c3-1d23-4146-ba83-8a6bb9233c11</Library_Id>
    <Title>Only Dynamically Allocated Memory Is Freed</Title>
    <Category>Unmanaged Code</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Only Dynamically Allocated Memory Is Freed</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <p>C&amp;#43;&amp;#43;</p>
  <h1>What to Check For</h1>
  <p>Verify that the delete operator is only called on pointers returned by the new operator.</p>
  <h1>Why</h1>
  <p>Deleting objects that were not allocated dynamically may result in an arbitrary code execution vulnerability if that memory is later reused by calling the new operator.</p>
  <h1>How to Check</h1>
  <p>Identify code that uses the delete operator. Verify that the delete operator is only called on pointers that are returned by the new operator.</p>
  <h1>How to Fix</h1>
  <p>Identify code that uses the delete operator on an object that was not dynamically allocated. Remove this code - let the compiler handle memory of the objects that are not dynamically allocated.</p>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/75ce06d3-d694-4271-9824-4df3947bb21e">Free Only Dynamically Allocated Memory</a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>