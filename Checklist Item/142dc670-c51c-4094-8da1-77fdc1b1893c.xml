<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="438600107" Content_Hash="-1053256963">
  <Metadata>
    <Id>142dc670-c51c-4094-8da1-77fdc1b1893c</Id>
    <Id_History>142dc670-c51c-4094-8da1-77fdc1b1893c,9b62ec73-aed6-46b7-b236-bf8c99ff022d,</Id_History>
    <Library_Id>51eb81c3-1d23-4146-ba83-8a6bb9233c11</Library_Id>
    <Title>New And Delete Are Used Instead of Direct Memory Operations</Title>
    <Category>Unmanaged Code</Category>
    <Phase>Implementation</Phase>
    <Technology>C++</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>New And Delete Are Used Instead of Direct Memory Operations</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>C&amp;#43;&amp;#43;</li>
  </ul>
  <h1>What to Check For</h1>
  <p>Verify that new and delete operators are used instead of direct memory operations such as: calloc(), malloc(), realloc(), and free().</p>
  <h1>Why</h1>
  <p>The object-oriented approach to memory allocation manifested by new and delete operators has multiple advantages over raw memory operations. The new and delete operators call class constructors and destructors automatically, thus asssuring that memory is&amp;nbsp;allocated and variables are initialized. The new operator also throws an exception if it fails to allocate memory, which causes the program to abort if there is no error handling code, thus preventing unintended behavior.</p>
  <h1>How to Check</h1>
  <p>Search code for calloc(), malloc(), realloc(), and free() function calls.</p>
  <h1>How to Fix</h1>
  <p>Replace calloc(), malloc(), realloc(), and free() function calls with new and delete operators respectively.</p>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/eb00762e-1c8a-4c03-ae23-b0656b697524">Use new and delete Instead of Direct Memory Operations</a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>