<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="771292987" Content_Hash="1671087247">
  <Metadata>
    <Id>d8e92600-fc63-4a0c-8fb5-073be95d4cb4</Id>
    <Id_History>ad1dd3d4-6726-4f77-8d57-42497425f732,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>If File Names Must Be Accepted Through Input, the Names And Locations Are First Validated.</Title>
    <Category>File I/O</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET 3.5</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>If File Names Must Be Accepted Through Input, the Names And Locations Are First Validated.</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that the file names are strictly formed so that you can determine whether they are valid when you do need to receive input file names from the caller.</p>
  <p />
  <h1>How to Fix</h1>
  <p>There are two aspects to validating input file paths. You need to: </p>
  <ul>
    <li>Check for valid file system names. <li>Check for a valid location as defined by your application's context. For example, are the file names within the directory hierarchy of your application? </li></li>
  </ul>
  <p>To validate a path and file name, use the <b>System.IO.Path.GetFullPath</b> method as shown in the following code example. This method also canonicalizes the supplied file name.</p>
  <pre>using System.IO;<br />public static string ReadFile(string filename)<br />&amp;#123;<br />&amp;nbsp; // Obtain a canonicalized and valid filename<br />&amp;nbsp; string name = Path.GetFullPath(filename);<br />&amp;nbsp; // Now read the file and return the file content.<br />&amp;#125;</pre>
  <div>&amp;nbsp;</div>
  <div>As part of the canonicalization process, <b>GetFullPath</b> performs the following checks: </div>
  <ul>
    <li>It checks that the file name does not contain any invalid characters, as defined by <b>Path.InvalidPathChars</b>. <li>It checks that the file name represents a file and not another device type, such as a physical drive, a named pipe, a mail slot, or a DOS device such as LPT1, COM1, AUX, and other devices. <li>It checks that the combined path and file name is not too long. <li>It removes redundant characters such as trailing dots. <li>It rejects file names that use the //?/ format.</li></li></li></li></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>