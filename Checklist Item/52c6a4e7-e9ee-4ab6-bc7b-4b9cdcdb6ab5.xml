<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="189814384" Content_Hash="-1417749259">
  <Metadata>
    <Id>52c6a4e7-e9ee-4ab6-bc7b-4b9cdcdb6ab5</Id>
    <Id_History>af08606b-3073-44ae-bffc-0df9a4f7b09f,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Output That Contains Untrusted Data Is Encoded With HtmlEncode Or UrlEncode</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Output That Contains Untrusted Data Is Encoded With HtmlEncode Or UrlEncode</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0</li>
  </ul>
  <h1>What to Check For</h1>
  <p />Check to ensure&amp;nbsp;that any untrusted input used in the output stream is first encoded with HtmlEncode or Url Encode.<span><p /></span><h1>Why</h1><p /><span>Echoing input directly back to the user makes your application vulnerable to cross site scripting attacks.<p /></span><h1>How to Check</h1><p>Use the following steps to check for this problem:</p><h2>1. Look for user supplied input inside HTML tags</h2><p>Check for the existence of user supplied input inside html tags your application generates.&amp;nbsp;If user input is echoed inside a tag without encoding you are vulnerable to cross site scripting attacks.&amp;nbsp; For instance "&lt;A href='somelink'&gt;USERINPUT&lt;/a&gt;</p><h2>2. Look for user supplied input elsewhere in your application output</h2><p>Check for the existing of user supplied input in the following locations:</p><ul><li>In the HTML tags themselves.&amp;nbsp; For instance, "&lt;A href='USERINPUT'&gt;" </li><li>In database tables that are later used as page content.&amp;nbsp; For instance, you may find unencoded user input in a user profile stored in your database. </li><li>In files that are later used as page content.&amp;nbsp; For instance, you may find unencoded user input in a local configuration file.</li></ul><span></span><h1>How to Fix</h1><p>Encode untrusted data ensures that it is treated as literal text and not as script.&amp;nbsp; You can use the <b>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</b> method to encode untrusted data.&amp;nbsp;&amp;nbsp;If you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <b>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</b> to make them safe. </p><strong>Note</strong> &amp;nbsp; &amp;nbsp; Make sure that you encode data at the last possible opportunity before the data is returned to the client.&amp;nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&amp;nbsp; Also, early encoding of some data can result in double encoding problems.<hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>