<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="987948900" Content_Hash="-176439533">
  <Metadata>
    <Id>c4146077-7312-4a46-a338-17c19835b8ba</Id>
    <Id_History>fbe1592c-98fe-45f0-bd07-9b6bac3d5874,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Significant Business Operations Are Logged</Title>
    <Category>Auditing and Logging</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Significant Business Operations Are Logged</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <p>ASP.NET 2.0</p>
  <h1>What to Check For</h1>
  <p>Check to ensure your application instruments and logs significant business operations.&amp;nbsp;For instance an e-commerce application would log all user purchases.</p>
  <h1>Why</h1>
  <p>Logging access to business logic is vital for the enforcement of many business rules.&amp;nbsp; Logging can be a key component of fraud prevention and dispute resolution.&amp;nbsp; Furthermore, its vital to forensics work when determining if a break-in is about to occur or has occurred and what damage may have been done. </p>
  <h1>How to Check</h1>
  <p>Use the following steps to check:</p>
  <p>
    <strong>1. Define what should be logged</strong>
  </p>
  <p>Before you can check whether the correct logging is taking place, create a list that defines unusual activity for your application.&amp;nbsp; Review sensitive methods and all business logic to define your list.</p>
  <p>
    <strong>2. Ensure the data is being logged</strong>
  </p>
  <p>Review your application's code and logs to determine if each of the operations in your list are being logged. When reviewing code look for the definition and use of custom event classes that inherits from <b>System.Web.Management.WebSuccessAuditEvent</b> or <b>System.Web.Management.WebFailureAuditEvent</b></p>
  <h1>How to Fix</h1>
  <p>Use ASP.NET health monitoring to track significant business operations. For example, instrument your application to record access to particularly sensitive methods and business logic. To do this, create a custom event class that inherits from <b>System.Web.Management.WebSuccessAuditEvent </b>or<b> System.Web.Management.WebFailureAuditEvent</b> and raise that event in the appropriate methods. <br /></p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>