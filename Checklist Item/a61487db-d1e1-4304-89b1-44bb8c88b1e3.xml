<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1135052223" Content_Hash="15474628">
  <Metadata>
    <Id>a61487db-d1e1-4304-89b1-44bb8c88b1e3</Id>
    <Id_History>a61487db-d1e1-4304-89b1-44bb8c88b1e3,a5256e2d-27bd-4915-8e41-c36ea3b7bfa9,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Java Validate JNI Data</Title>
    <Category>Unmanaged Code</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Code Example</Type>
    <DirectLink>All Data Passed Between Native And Java Code Is Validated</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Java


## Problem Example ##

The following segment shows a JNI code that utilizes a COM object. Making the assumption that the Java code will handle data validation, the JNI segment does not verify that the passed input is a valid GUID. Since invalid GUIDs may cause unhandled exceptions, an attacker can force the application to disclose its call stack and possibly its source filenames.

~~~~
#include <jni.h>
#include <sys/types.h>
#include <fcntl.h>
#include <stdio.h>
#include <atlbase.h>
#include <windows.h>
#include <wtypes.h>
JNIEXPORT jboolean
JNICALL Java_Identifier_invokeObject
      (JNIEnv * env, jobject jobj, jstring jguid)
{
      HRESULT result;
      CLSID clsid;
      IUnknown *pIunkn;
      LPWSTR guid;
      jboolean iscopy;
      jboolean ret = false;
      char* temp_guid = (*env)->GetStringUTFChars(env, jguid, &iscopy);
      //The application fails to verify that the GUID is valid
      guid = SysAllocStringLen(0, 38);
      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);
      result = GUIDFromString(guid, &clsid);
      ...
      return ret;
}
~~~~


## Solution Example ##

The following segment shows a JNI code that utilizes a COM object. Because the passed input is validated as being a GUID, the application reduces the risk of unhandled exceptions.

~~~~
#include <jni.h>
#include <sys/types.h>
#include <fcntl.h>
#include <stdio.h>
#include <atlbase.h>
#include <windows.h>
#include <wtypes.h>  
JNIEXPORT jboolean 
JNICALL Java_Identifier_invokeObject
      (JNIEnv * env, jobject jobj, jstring jguid)
{
      HRESULT result;
      CLSID clsid;
      IUnknown *pIunkn;
      LPWSTR guid;
      jboolean iscopy;
      jboolean ret = false;
      char* temp_guid = (*env)->GetStringUTFChars(env, jguid, &iscopy);
      // The application verifies that the input matches the criteria for a GUID
      if(!validGUID(temp_guid))
      {
            return ret;
      }
      guid = SysAllocStringLen(0, 38);
      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);
      result = GUIDFromString(guid, &clsid);
       ...
      return ret;
}

bool validGUID(char *guid)
{
      // Check that GUID is of right length
      if(strlen(guid) != 38) return false;
      // Sample GUID: {1EF4A023-143A-4e0e-AD72-69C2C68C2D70
}
      if(guid[0]  != '{') return false;
      if(guid[9]  != '-') return false;
      if(guid[14] != '-') return false;
      if(guid[19] != '-') return false;
      if(guid[24] != '-') return false;
      if(guid[37] != '}') return false;
      int i=1;
      while(i<37)
      {
            if((guid[i] >= 'a' && guid[i] <= 'f')
                  || (guid[i] >= 'A' && guid[i] <= 'F')
                  || (guid[i] >= '0' && guid[i] <= '9')
            {
                  // GUID is valid
            }
            else
            {
                  return false;
            }
            i++;
            if(i == 9 || i == 14 || i == 19 || i == 24)
            {
                  i++;
            }
      }

      return true;
}
~~~~
]]></Data>
  </Content>
</TeamMentor_Article>