<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1879217227" Content_Hash="1416055273">
  <Metadata>
    <Id>72bb474e-80c6-4533-b363-0195c2c74196</Id>
    <Id_History>72bb474e-80c6-4533-b363-0195c2c74196,da489122-c52a-4298-9f5b-3a90c738bf03,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>[1612Dupe] Stored Procedures with Type-safe Parameters Are Used for SQL Queries</Title>
    <Category>Database Security</Category>
    <Phase>Implementation</Phase>
    <Technology>.NET</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Stored Procedures with Type-safe Parameters Are Used for SQL Queries</DirectLink>
    <Tag>ASP.NET,ASP.NET 4.0,ASP</Tag>
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

- ASP.NET 4.0


## What to Check For ##

Verify that stored procedures with type-safe parameters are used for SQL queries.


## Why ##

Using stored procedures with type-safe parameters helps prevent SQL injection attacks.


## How To Check ##

To verify that stored procedures with type-safe parameters are used for SQL queries:

1. **Identify all SQL queries used by the application.** Review code to find all functions that query the database.

2. **Make sure that stored procedures are used.** Examine each function that queries the database to make sure that it uses stored procedures.

3. **Review stored procedures.** Examine stored procedures used by the application to make sure they do not concatenate untrusted data into SQL syntax, but use parameters instead.


## How To Fix ##

First the stored procedure will have to be created on the database. Here is an example of a stored procedure:

	CREATE PROCEDURE sp_AddNewUser (@UserName nvarchar(255), @Email  nvarchar(255), @FirstName nvarchar(255), @LastName nvarchar(255)) AS
	-- INSERT the new user
	INSERT INTO Users_Table(UserName, Email, FirstName, LastName) VALUES(@UserName, @Email, @FirstName, @LastName);

Now to call the stored procedure we can use the following .NET code:

	//create a new connection using our connection string
	SqlConnection myConnection = new SqlConnection(connection string);
	myConnection.Open();
	//create a new command that specifies our store procedure
	SqlCommand myCommand = new SqlCommand("sp_AddNewUser", myConnection);
	//Specify our command is a stored proceduremy
	Command.CommandType = CommandType.StoredProcedure;
	//Create a new parameter to carry the username
	SqlParameter UserParameter = new SqlParameter("@UserName", SqlDbType.VarChar);
	UserParameter.Direction = ParameterDirection.Input;
	UserParameter.Value = "TestUser";
	//Add the parameter to the command
	myCommand.Parameters.Add(UserParameter);
	//Repeat this code to add commands for each parameter in the SPROC
	//Execute the command on the Database
	myCommand.ExecuteNonQuery();

---

Adapted from Microsoft patterns & practices guidance. ]]></Data>
  </Content>
</TeamMentor_Article>