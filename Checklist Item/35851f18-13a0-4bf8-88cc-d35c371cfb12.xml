<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-891577072" Content_Hash="817195418">
  <Metadata>
    <Id>35851f18-13a0-4bf8-88cc-d35c371cfb12</Id>
    <Id_History>35851f18-13a0-4bf8-88cc-d35c371cfb12,e1dfcc41-26bc-4bbf-8b04-d58d0bcf54b2,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>The Application's Authenticity Is Verified to the User</Title>
    <Category>Authentication</Category>
    <Phase>Design</Phase>
    <Technology>Technology Independent</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>The Application's Authenticity Is Verified to the User</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## What to Check For ##

Ensure the application always proves its credential to its users.


## Why ##

Verifying the application's authenticity to the user makes it harder for phishers to trick users into disclosing sensitive information. A phishing attack is when an attacker makes a fake web site that looks like one that the user expects and then sending the user to that web site. If the web site displays unique elements to each user, the web site becomes harder to fake.


## How to Check ##

Use the following steps to ensure the application is capable of proving its authenticity to its users:

1. **Check if your application uses TLS to identify itself to the user.** Verify that when your application's users are performing transactions of a sensitive nature, your application uses TLS with the following considerations in place:
	* Certificate Validity: Your application's TLS certificate has not reached its expiration date.
	* Domain Name: The domain name for your application is the same as the domain name listed in the TLS certificate.
	* Chain of Trust: Your application's users can verify your application's TLS certificate based on the root certificates that are stored in their browsers. If your application uses self-signed TLS certificates, ensure that your organization's root certificate is securely imported into the users' browsers.
	* Server Configuration: Your application's environment has enabled HTTPS and transactions of a sensitive nature are transmitted only over HTTPS connections.
2. **Check if your application displays a shared secret with its users.** Check if your application has a personal shared secret for each of its users. Verify that the shared secret is displayed to the user after providing their ID and before providing their credentials. Shared secrets include, but are not limited to, combinations of any of the following:
	* Layout: a user-defined layout/color scheme.
	* Picture: a user-defined image.
	* Word/Phrase: a user-defined word, phrase, or question.


## How to Fix ##

Use the following measures to authenticate your application to its users:

1. **Use TLS.** Due to the nature of the TLS certificates, TLS can be used to certify the remote host's name. Because of TLS's chain of trust and DNS limitations, spoofing a host that uses TLS is very difficult.
2. **Display personalized and identifiable content.** Do not ask the user for credentials in one step. Instead, after the user enters a valid username, display personal and identifiable content to which the user can relate, for example: a personal user-supplied question, an image that has been pre-selected from a library, or a personalized color schema. After the user has authenticated the application, they may enter their password.


## Problem Example ##

MyApp is a financial application with a public web interface. Because the application does not use TLS to certify its identity in front of the user, an attacker can set up a fake site and pretend to be MyApp. Because the user's browser has no mechanism of identifying the real from the fake MyApp interface, it will not provide any warning signs to the user. Once a user accesses the fake MyApp interface, they may be fooled into providing their credentials to the attacker.


## Solution Example ##

MyApp is a financial application with a public web interface. Because the application uses TLS to certify its identity in front of the user, the user's browser uses the TLS chain of trust and MyApp's URL to verify MyApp's identity. If an attacker attempts to spoof the MyApp interface, the user's browser has a mechanism for detecting the fake site, and the user will be warned that they are not accessing the real MyApp interface.]]></Data>
  </Content>
</TeamMentor_Article>