<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="2010385212" Content_Hash="2060175005">
  <Metadata>
    <Id>4bb67e97-3d89-48e9-b4da-b4d2fd2067d1</Id>
    <Id_History>c9ff2e9d-5663-4b48-a529-9fe402831347,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>ADO.NET Exceptions Are Not Propagated to Users</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>ADO.NET 2.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>ADO.NET Exceptions Are Not Propagated to Users</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Chaitanya Bijwe</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>ADO.NET 2.0</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Check to ensure that your application uses <b>try</b>/<b>catch</b> blocks to trap exceptions on the server, logs appropriate details for subsequent diagnostics, and returns an appropriate error message to the user. </p>
  <p />
  <h1>How to Fix</h1>
  <p>You should prevent ADO.NET exception details from being displayed to your application users. ADO.NET exceptions include many details that are useful to an attacker, including database server names, database names, table names, and so on. Use <b>try</b>/<b>catch</b> blocks to trap exceptions on the server, log appropriate details for subsequent diagnostics, and return an appropriate error message to the user. Display only generic information. It is usually enough for users to know that an error has occurred and the operation did not succeed, and to have a failure error code that they can report to a help desk.</p>
  <p>One approach is to catch ADO.NET exceptions on the server and then propagate a custom exception object from your data access code, as shown in the following example.</p>
  <div>
    <pre>// Data access methodpublic string RetrieveProductName(int productID){<br />  ...<br />  try<br />  {<br />    // Open database connection and perform data access<br />    ...<br />    }<br />  catch (SqlException sqlex)<br />  {<br />    // Log exception details on the server<br />    ...<br />    // Re-throw a new more relevant exception<br />     throw new DataAccessException(<br />                       "Failed to retrieve product information for product ID: " +<br />                      ProductID.ToString());,<br />  }<br />  finally<br />  {<br />    if(conn != null)<br />        conn.Close();<br /> // Ensures connection is closed<br />  }<br />}  </pre>
  </div>
  <p>Note that when ADO.NET data access code generates a database exception, the abstract <b>System.Data.Common.DbException</b> is thrown. The actual type of exception generated by ADO.NET depends on the data provider. For example, the exception type could be any of the following: </p>
  <ul>
    <li>
      <b>System.Data.Odbc.OdbcException</b>
      <li>
        <b>System.Data.OleDb.OleDbException</b>
        <li>
          <b>System.Data.OracleClient.OracleException</b>
          <li>
            <b>System.Data.SqlClient.SqlException</b>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <blockquote>
    <b>Note</b>&amp;nbsp;&amp;nbsp;&amp;nbsp;If you are writing provider independent code, catch the <b>DBException</b> type. Otherwise catch one of the provider specific exception types listed above, depending on the provider you are using.</blockquote>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>