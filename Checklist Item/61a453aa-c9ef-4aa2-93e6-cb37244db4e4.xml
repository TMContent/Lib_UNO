<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="228344145" Content_Hash="1223829631">
  <Metadata>
    <Id>61a453aa-c9ef-4aa2-93e6-cb37244db4e4</Id>
    <Id_History>df093ee3-ad7b-4191-935c-8bb0cad78d98,</Id_History>
    <Library_Id>c4b9cb6a-4561-4451-9b6c-4e59d73584f6</Library_Id>
    <Title>Re-authentication Is Enforced When Executing Critical Functionality</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Re-authentication Is Enforced When Executing Critical Functionality</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure your application forces the user to re-authenticate when executing security-critical functionality including, but not limited to change of password, account modifications and critical transactions</p>
  <h1>Why</h1>
  <p>Forcing the user to re-authenticate verifies the user's decision to execute the given functionality and preserves the application's integrity in the event that a user's account has been compromised via session hijacking.</p>
  <h1>How to Check</h1>
  <ol>
    <li>
      <p>
        <strong>Identify all critical functionality within your application. </strong>Locate all critical functionality within your application's code base. Common places to look include:</p>
      <ul>
        <li>Creating new accounts <li>Changing passwords for existing users <li>User transactions that are sensitive in nature <li>Changing your application's global configuration <li>Any operation affecting your application's overall wellness such as start-up and shutdown</li></li></li></li></li>
      </ul>
      <li>
        <p>
          <strong>Ensure that your application has adopted a&amp;nbsp;re-authentication mechanism. </strong>Ensure that your application's design and requirements ask for re-authentication mechanisms. Common re-authentication mechanisms include:</p>
        <ul>
          <li>
            <strong>Current password:</strong> The user uses their current password to confirm the identity. This technique ensures that the given user is aware of the action to be performed and holds responsibility for executing it. <li><strong>CAPTCHA:</strong> CAPTCHA is a mechanism where alpha-numeric codes are embedded into displayed pictures. Forcing the user to confirm the embedded code ensures that the application is interacting with a human. If your application uses CAPTCHA, ensure that your version of CAPTCHA is up-to-date with its security updates.<li><strong>2nd Factor:</strong> If your application supports a second factor of authentication such as a token, this could play a role in the re-authentication scheme.</li></li></li>
        </ul>
        <li>
          <p>
            <strong>Verify that re-authentication is enforced. </strong>Ensure that the re-authentication procedures are positioned properly throughout your application's critical functionality. Verify that re-authentication is performed immediately upon entering a critical component. Example:</p>
          <blockquote>
            <pre>public boolean changePassword(String user, char&amp;#91;&amp;#93; oldPass, char&amp;#91;&amp;#93; newPass)<br />&amp;#123;<br />      // The application forces re-authentication<br />      if(&amp;#33;validateUser(user, oldPass))<br />      &amp;#123;<br />            return false;<br />      &amp;#125;<br />      // Logic to critical functionality<br /> &amp;#125;  </pre>
          </blockquote>
        </li>
      </li>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Follow these steps when forcing re-authentication:</p>
  <ol>
    <li>
      <p>
        <strong>Identify critical functionality.</strong> Evaluate your application's design and requirements and determine what parts and resources of your application are very important to your organization's business model or your application's security architecture. This could include activities such as financial transactions or resetting user passwords.</p>
      <li>
        <p>
          <strong>Adopt re-authentication mechanism.</strong> Establish a mechanism that requires the user to verify their authenticity:</p>
        <ul>
          <li>
            <strong>Current password.</strong> The user uses their current password to confirm the identity. This technique ensures that the given user is aware of the action to be performed and holds responsibility for executing it. <li><strong>CAPTCHA.</strong> CAPTCHA are mechanisms designed to ensure that a human, not an automated script, is using the system. Using a CAPTCHA should be seen as a way of augmenting a password in this kind of situation, not a way of replacing it. Many CAPTCHA systems embed distorted letters or numbers into displayed images which the user must enter. There are a number of problems with many CAPTCHA systems, so they should not be relied on too heavily. First, many graphical CAPTCHAs can be trivially broken by optical character recognition systems, and ensuring that a CAPTCHA is sufficiently strong to be useful without having too high of a failure rate for real users is difficult. If CAPTCHAs are reused, the attacker can simply record the session IDs of CAPTCHAs with known values and replay them. CAPTCHAs can also be broken by using a man-in-the-middle technique where the image is saved and forwarded to another site controlled by the attacker. An unsuspecting user of that site solves the CAPTCHA and the attacker forwards the answer to the victim site. CAPTCHAs also create accessibility problems for users, as blind and sometimes even color-blind individuals can find them impossible. If you choose to implement a CAPTCHA, be aware of the trade-offs involved and ensure that the system you use is appropriately protected against the attacks you expect to see. <li><strong>2nd Factor.</strong> If your application supports a second factor of authentication such as a token, this could play a role in the re-authentication scheme.</li></li></li>
        </ul>
        <li>
          <strong>Enforce the re-authentication mechanism.</strong> Once the critical functionality is identified and the re-authentication mechanism is established, enforce the re-authentication mechanism before all security-critical actions.</li>
      </li>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code allows a user to change their credentials. Unfortunately, the code enters the new credentials into the credentials repository without verifying that it is the actual user changing the credentials.</p>
  <pre>public boolean changePassword(String user, char&amp;#91;&amp;#93; newPass)<br />&amp;#123;<br />       // The application fails to re-authenticate the user<br />       // Verify that new password meets password requirements<br />       // Update the credential store with the new password<br />&amp;#125;</pre>
  <h1>Solution Example</h1>
  <p>The following code allows a user to change their credentials. Before entering the new credentials into the credentials repository, the code verifies that it is the actual user doing the credentials change.</p>
  <pre>public boolean changePassword(String user, char&amp;#91;&amp;#93; oldPass, char&amp;#91;&amp;#93; newPass)<br />&amp;#123;<br />      // The application forces re-authentication<br />      if(&amp;#33;validateUser(user, oldPass))<br />      &amp;#123;<br />            return false;<br />      &amp;#125;<br />      // Verify that new password meets password requirements<br />      // Update the credential store with the new password<br />&amp;#125;</pre>
  <h1>Authentication Guidelines</h1>
  <ul>
    <li>
      <a href="/article/989e27ec-ffdf-4006-88bd-1c09fc991a28">Centralize Authentication Controls</a>
      <li>
        <a href="/article/d3a69ef7-2c63-41bc-81e4-803b0ea199d8">Use Server-side Authentication</a>
        <li>
          <a href="/article/38d12903-9c3b-46bd-9f5e-f223c3272624">Make Sure Authentication Controls Fail Securely</a>
          <li>
            <a href="/article/84fd606b-e2f2-4c48-9c6e-6b5e780c6163">Force Re-authentication When Executing Critical Functionality</a>
            <li>
              <a href="/article/c566cabe-2463-4d24-8763-22e8468d167e">Validate Usernames Before Processing Them</a>
              <li>
                <a href="/article/7ba2d49c-ff53-4755-97ae-0efcb0aa9c22">Lock Accounts After Consecutive Failed Login Attempts</a>
                <li>
                  <a href="/article/4b5b1f05-aa9a-4ebc-8b2e-3cecabed03e1">Enforce Strong Passwords</a>
                  <li>
                    <a href="/article/ea25af24-8eca-45ad-9f41-94bad8880247">Force Password Renewal</a>
                    <li>
                      <a href="/article/c7825052-f281-4ac8-a786-41b776219af6">Mask All Password Fields</a>
                      <li>
                        <a href="/article/c4d9269f-9157-4919-952c-f0d14ccd7f60">Verify the Application's Authenticity to the User</a>
                        <li>
                          <a href="/article/b4f83e8e-3223-4e49-bc9c-56c8c7268582">Place Logout Links on All Pages that Require Authentication</a>
                          <li>
                            <a href="/article/ff95311e-797f-417f-bd0b-e6cf610f706c">Do Not Leave Passwords in Memory</a>
                            <li>
                              <a href="/article/bcf8adb4-8186-4b97-b490-4fa33f506bfd">Limit Access to the Credential Store</a>
                              <li>
                                <a href="/article/0dba2e1f-7d49-4d91-bc93-ad85480f784a">Consider Using JAAS for Authentication</a>
                                <li>
                                  <a href="/article/9cf8aed6-22a5-49c1-a0ce-1d8e5366bebf">Consider Using Two Factor Authentication</a>
                                </li>
                              </li>
                            </li>
                          </li>
                        </li>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>Authentication Checklists</h1>
  <ul>
    <li>
      <a href="/article/4e431329-73aa-41f7-b397-9b7e26294a4c">Authentication Controls Are Centralized</a>
      <li>
        <a href="/article/b103207d-73e3-4964-9a00-2b15c3e012b8">Server-side Authentication Is Used</a>
        <li>
          <a href="/article/ded06846-ad7f-4044-87d2-8bbb6b885713">Authentication Controls Fail Securely</a>
          <li>
            <a href="/article/df093ee3-ad7b-4191-935c-8bb0cad78d98">Re-authentication Is Enforced When Executing Critical Functionality</a>
            <li>
              <a href="/article/f8586505-72f9-4c14-a365-3e5049e5ca57">Usernames Are Validated Before Use</a>
              <li>
                <a href="/article/61e0e2b4-2f09-429a-b72f-f8933f2fa9b6">Accounts Are Locked After Consecutive Failed Login Attempts</a>
                <li>
                  <a href="/article/7401862f-ae81-4f31-9340-981b0ec5a854">Strong Passwords Are Enforced</a>
                  <li>
                    <a href="/article/12889762-1d65-4b7d-a90a-58ff6c23d1e4">Password Renewal Is Enforced</a>
                    <li>
                      <a href="/article/09f994c9-a401-404c-bdc9-210038eba658">All Password Fields Are Masked</a>
                      <li>
                        <a href="/article/35851f18-13a0-4bf8-88cc-d35c371cfb12">The Application's Authenticity Is Verified to the User</a>
                        <li>
                          <a href="/article/493e0e57-254a-4697-8fa1-c93e706d416d">All Pages that Use Authentication Have Logout Links</a>
                          <li>
                            <a href="/article/55488f2e-ed85-4f0f-9f83-1d90a5d10bd0">Passwords Are Not Left in Memory</a>
                            <li>
                              <a href="/article/9031f577-80b0-4a2e-9652-7b470439a0df">Access to the Credential Store Is Limited</a>
                            </li>
                          </li>
                        </li>
                      </li>
                    </li>
                  </li>
                </li>
              </li>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <h1>Authentication Testing</h1>
  <ul>
    <li>
      <a href="/article/f32846cf-35f6-40fe-8517-f0ac8a415383">How to Test for Account Lockout Bugs in Java</a>
    </li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>