<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-1008944421" Content_Hash="1313810706">
  <Metadata>
    <Id>918b5d86-24df-404d-87d3-8f5e1683fcd2</Id>
    <Id_History>165da895-2be3-4df1-b316-574b17967558,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>If Input File Names Are Required, They Are Well Formed And Are Verifiably Valid Within the Application Context</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>If Input File Names Are Required, They Are Well Formed And Are Verifiably Valid Within the Application Context</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>ASP.NET 2.0</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p />Check to ensure that user-supplied filenames or paths are in the correct format and point to a valid location in the context of your application.<span><p /></span><h1>Why</h1><p />Malicious file input can be used to coerce your application into accessing arbitrary files and resources.<span><p /></span><h1>How to Check</h1><p />If your application accepts user supplied files or paths check to ensure they are passed through a validation routine. The validation routine should not only check for appropriate format, but also ensure that the file name is legitimate for your applicaiton.&amp;nbsp; For more information on input validation, see the related checklist item: All the Input is Validated For Length, Range, Format, and Type.<span><p /></span><h1>How to Fix</h1><p>Use the following steps to fix this issue:</p><h2>1. Check File Names</h2><p>Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate.&amp;nbsp; When checking file names, obtain the full name of the file by using the <b>System.IO.Path.GetFullPath</b> method. </p><h2>2. Check File Paths</h2><p>If you use <b>MapPath</b> to map a supplied virtual path to a physical path on the server, use the overloaded <b>Request.MapPath</b> method that accepts a <b>bool</b> parameter so that you can prevent cross-application mapping. The following code example shows this technique. </p><pre>try{<br /> string mappedPath = Request.MapPath(inputPath.Text, Request.ApplicationPath, false);<br />}<br />catch (HttpException){<br /> // Cross-application mapping attempted <br />}</pre><p />The final <b>false</b> parameter prevents cross-application mapping.&amp;nbsp; This means that a user cannot successfully supply a path that contains ".." to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <b>HttpException</b>. <span><p /></span><p /><span><p /></span><br /><hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>