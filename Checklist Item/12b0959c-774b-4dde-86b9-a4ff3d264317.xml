<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1381674727" Content_Hash="2017414650">
  <Metadata>
    <Id>12b0959c-774b-4dde-86b9-a4ff3d264317</Id>
    <Id_History>12b0959c-774b-4dde-86b9-a4ff3d264317,3d4cf7a2-3c6c-4d61-b030-e57b65acd2f3,</Id_History>
    <Library_Id>92718d53-36b2-47bc-b6f5-e60994385f46</Library_Id>
    <Title>Windows Authentication Is Used for Web Users If Possible</Title>
    <Category>Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Windows Authentication Is Used for Web Users If Possible</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="html">
    <Data><![CDATA[<br />
  <h1>What to Check For</h1>
  <p>Verify that windows authentication is used if it is a viable alternative to ASP.Net Forms Authentication.</p>
  <h1>Why</h1>
  <p>Unlike Forms Authentication, Windows Authentication never transmits a password in plain text or a direct hash of the password over the network. This makes it much more difficult for an attacker to monitor network traffic&amp;nbsp;and steal passwords or to steal a session through a replay attack.</p>
  <p>In addition,&amp;nbsp;you also benefits a unified identity store, centralized account administration, and enforceable account and password policies. </p>
  <h1>How to Check</h1>
  <p>To verify that Windows authentication is properly used, check that the application is correctly configured, and check for protections against Cross-site Request Forgery.</p>
  <p>
    <strong>Verify that your application is configured to use Windows Authentication</strong>:</p>
  <ol>
    <li>
      <p />Start Internet Information Services (IIS). <ol><li><p>Right-click your application's virtual directory and go to Properties. </p><li><p>Click the Directory Security tab. </p><li><p>Under Anonymous access and authentication control, click Edit. </p><li><p />Verify that: <ul><li>Anonymous access check box is not selected <li>Integrated Windows authentication is the only selected check box. </li></li></ul></li></li></li></li></ol><li><p>Locate the <strong>authentication</strong>&gt; element in your application's Web.config file or in the machine-level Web.config file. Verify that the authentication mode is set to Windows. For example:</p><pre>
...
  &lt;system.web&gt; 
    ...  
      &lt;authentication mode="Windows"&gt; &lt;/authentication&gt;   
   ...
  &lt;/system.web&gt; 
...
</pre></li></li>
  </ol>
  <p>
    <strong>Check for protection against Protect against Cross-Site Request Forgery attacks</strong>:</p>
  <ol>
    <li>Check that a unique key is assigned to each user's ViewState.</li>
    <li>Verify that single GET requests are: <ul><li>only used when necessary <li>never allowed to change the state of the web application</li></li></ul></li>
  </ol>
  <h1>Problem Example</h1>
  <p>John created a payroll ASP.Net Web Application for his company and decided to use ASP.Net Forms Authentication with the Active Directory Membership Provider because it seemed to be the simplest option at the time. He had no idea that Forms Authentication sends passwords and authentication cookies in plain text over the network. One week after the application was released, an employee used this vulnerability to impersonate a manager and increase&amp;nbsp;his salary.</p>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/5b641c0a-a63a-4524-8ce8-432150e6df6d">Guideline: Use Windows Authentication for Web Users if Possible</a>
      <li>
        <a href="/article/6ae71499-095c-49bd-bed0-4e08303a4324">Cross Site Request Forgery</a>
      </li>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>