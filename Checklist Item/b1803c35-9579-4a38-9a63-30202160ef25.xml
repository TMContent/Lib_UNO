<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-700549902" Content_Hash="1880258264">
  <Metadata>
    <Id>b1803c35-9579-4a38-9a63-30202160ef25</Id>
    <Id_History>b1803c35-9579-4a38-9a63-30202160ef25,5e5c0989-4cc9-4ba5-950d-4553f2a6935c,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>The Application Does Not Rely on Client-Side Validation</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Design</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>The Application Does Not Rely on Client-Side Validation</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>1</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="html">
    <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that all input validation is performed on the server. Client-side validation should only be used for performance and usability reasons. </p>
  <h1>Why</h1>
  <p>Client-side validation is executed by the client and can be easily bypassed. Client side validation is a major design problem when it appears in web applications. It places trust in the browser, an entity that should never be trusted.</p>
  <h1>How to Check</h1>
  <p>An application can take input via various ways such as a web interface, database, file system or other software running on the server. Use the following steps to establish a validation strategy:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all sources of input. </strong>During design time, identify all of the potential input sources to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps. The most common sources are: </p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) </li>
        <li>Local filesystem </li>
        <li>Database </li>
        <li>Other services running on the system </li>
        <li>Javascript variables </li>
        <li>File upload and attributes (filename, size, data, etc) </li>
        <li>DNS results or host names </li>
        <li>External component call return values (COM, AJAX, ActiveX) </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Identify validation routines. </strong>Each input source should have a server side validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base and may be located in a single component.</p>
      <p>Validation may be identified by any of the following:</p>
      <ul>
        <li>Custom Java Validator class </li>
        <li>Regular expression use (<em>java.util.regex</em>) </li>
        <li>Method names that contain <em>validate</em> or <em>validator</em></li>
        <li>Client-side validation is often linked to events: <ul><li>onSubmit </li><li>onChange </li><li>onFocus </li><li>onBlur </li><li>onKeyDown/Press/Up</li></ul></li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Ensure validators run on the server. </strong>At a minimum, validation routines should run on the server. Server-side validation guarantees that malformed input will be caught and discarded regardless of the state that the client is in. As an optional feature, validation can also be implemented client side in order to improve application performance and user experience.<br /><br />Server-side validation is done within the application code. Ideally validation occurs immediately after canonicalization, and canonicalization should be done&amp;nbsp;as soon as the input reaches your application. In web applications, look for application-supplied validators, such as a Custom Java Validator, to validate and constrain input after it is received from an input source, such as a <em>GET</em> parameter. Check for the use of regular expressions and <em>java.util.regex</em>, or the use of a validator that checks numeric ranges.</p>Client-side Example: <pre>//The validation function is defined in JavaScript in the client-side form<br />&lt;script language="JavaScript"&gt; function validate()<br />{<br /> ...<br />}<br />&lt;/script&gt;<br />...<br />// The application uses validation in the client-side form to validate the input<br />&lt;form method="post"<br /> action="/myapp/aggregate"<br /> onsubmit="return validate()"&gt;</pre><p>Server-side Example:</p><pre>//The input "searchTerm" is received from a request<br />String searchTerm = request.getParameter("index");<br />...<br />// The application uses validation in the application code to validate the input<br />if (validateSearchTerm(searchTerm))<br />{<br />      ...<br />}</pre></li>
  </ol>
  <h1>How to Fix</h1>
  <p>Client-side validation should only be used to improve user experience, never for security purposes. A client-side input validation check can improve application performance by catching malformed input on the client and, therefore, saving a roundtrip to the server. However, client side validation can be easily bypassed and should never be used for security purposes. Always use server-side validation to protect your application from malicious attacks.</p>
  <p>Use the following steps when developing client side validation: </p>
  <ol>
    <li>
      <p>
        <strong>Never trust the browser.</strong> Because the browser is running on the user's machine, it can be fully controlled by the user. Therefore, any client-side validation code can be controlled and bypassed by an attacker.</p>
    </li>
    <li>
      <p>
        <strong>Use JavaScript only to enhance your pages.</strong> JavaScript is useful for enhancing your application's presentation. However, it has no mechanism to protect the integrity of its code. Do not rely on JavaScript to enforce security decisions. </p>
    </li>
    <li>
      <p>
        <strong>Place a server-side validator for all input. </strong>Input validation should be executed on the server side. Use the following steps to properly set the validation routines: </p>
      <ul>
        <li>
          <p>
            <strong>Identify input.</strong> Determine the data that is to be passed from the client to your application. Input can take the following forms on the client-side:</p>
          <ul>
            <li>URL-based parameters </li>
            <li>Form-based parameters </li>
            <li>Hidden fields </li>
            <li>Cookies</li>
          </ul>
        </li>
        <li>
          <p>
            <strong>Understand the input.</strong> Understand the use and constraints associated with each input. Be clear how each input is used. Define the format and type of each input. Build a server-side validator for each format and type of expected input.</p>
        </li>
        <li>
          <p>
            <strong>Create a set of validators.</strong> Build a validator for each type of input. Place the set of validators on the server-side of your application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well.<br /></p>
        </li>
      </ul>
      <p>Once developed, it is important to place the validation routines at your application's trust boundary. Because your application's trust boundary extends only to your application's process space, the user's browser should not be considered&amp;nbsp;a part of your application's trust boundary.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Unfortunately, the user's input is validated only on the client side via a JavaScript routine. Since there is no validation on the server, an attacker can bypass all validation and exploit cross-site scripting and SQL injection vulnerabilities.</p>
  <pre>&lt;!-- Filename: idv01.html --&gt;<br />&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;!-- The page uses client-side validation only --&gt;<br />    &lt;script language="JavaScript"&gt;<br />&lt;!--function validate()<br />{<br />   var idx = document.forms[0].elements[0].value;<br />   var regex = new RegExp("[a-zA-Z0-9]+");<br />   var match = regex.exec(idx);<br />   var ret = false;<br />    if(idx.length &lt; 9 &amp;&amp; match != null)<br />    {<br />      ret = true;<br />    }<br />   else<br />   {<br />      alert("Invalid index!");<br />   }<br />    return ret;<br />}<br />// --&gt;<br />    &lt;/script&gt;<br />    &lt;title&gt;Query for index&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;!-- The application relies on client side validation --&gt;<br />    &lt;form method="post" action="/myapp/aggregate" onsubmit="return validate()"&gt;<br />      index:&amp;nbsp;&lt;input name="index" type="text" size="10"&gt;<br />      &lt;input name="submit" value="query" type="submit"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;<br /><br /><br />// Filename: /myapp/aggregate<br />import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  String retString;<br />                  retString = "The queried index \"";<br />                  retString += encodeHtml(searchTerm);<br />                  retString += "\" produced the following results:&lt;br&gt; ";<br />                  out.println(retString);<br />                   // The application does not provide a server-side validation<br />                  aggregateData(out, searchTerm);<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling and<br />                  // Logging sections<br />                  out.println("We cannot handle your request at the moment."<br />                           +  "Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because the application uses server-side validation, it is impossible for an attacker to bypass the validation routines and exploit any cross-site scripting and/or SQL injection vulnerabilities.</p>
  <pre>&lt;!-- Filename: idv01.html --&gt;<br />&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;!-- The page uses server-side validation only --&gt;<br />    &lt;title&gt;Query for index&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;!-- The application uses no client-side validation --&gt;<br />    &lt;form method="post" action="/myapp/aggregate"&gt;<br />      index:&amp;nbsp;&lt;input name="index" type="text" size="10"&gt;<br />      &lt;input name="submit" value="query" type="submit"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;<br /><br /><br />// Filename: /myapp/aggregate<br />import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  // The application uses only server-side validation<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                        retString = "The queried index \"";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" produced the following results:&lt;br&gt; ";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                        // Logging sections<br />                        out.println("We cannot handle your request at the moment."<br />                                 +  "Please try again later.");<br />                  }<br />            }<br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling and<br />                  // Logging sections<br />                  out.println("We cannot handle your request at the moment."<br />                           +  "Please try again later.");<br />            }<br /><br />            out.flush();<br /><br />            out.close();<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = "(\\w|\\d)+";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br /><br />            if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br />}</pre>]]></Data>
  </Content>
</TeamMentor_Article>