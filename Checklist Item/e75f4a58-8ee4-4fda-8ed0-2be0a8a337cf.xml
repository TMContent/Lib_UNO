<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-2017093455" Content_Hash="613330835">
  <Metadata>
    <Id>e75f4a58-8ee4-4fda-8ed0-2be0a8a337cf</Id>
    <Id_History>e75f4a58-8ee4-4fda-8ed0-2be0a8a337cf,d16200a7-f8ab-43c2-9a77-7da29974b3ca,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Locks Are Used with Mutexes to Avoid Deadlocks</Title>
    <Category>Concurrency</Category>
    <Phase>Implementation</Phase>
    <Technology>Technology Independent</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Locks Are Used with Mutexes to Avoid Deadlocks</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## What to Check For ##

Verify that locks are used with mutexes, instead of manual locking and unlocking.

## Why ##

Using `std::lock_guard` makes it simpler to prevent deadlocks, because it unlocks mutexes automaticaly when a function exits.

## How to Check ##

Use the following steps to check if locks are used with mutexes:

1. **Locate mutexes.** Search code for declarations of `std::mutex` objects and their subsequent use to make sure mutexes are being used.

2. **Verify that locks are used.** Locate functions that use mutexes and make sure they use `std::lock_guard` instead of calling `lock()` and `unlock()`.

## How to Fix ##

Perform the following actions to use locks with mutexes:

1. **Identify unsafe code.** Search for code that manually locks and unlocks mutexes by calling `lock()` and `unlock()` functions.

2. **Add locks.** Add locks to functions that manually `lock()` and `unlock()` mutexes by declaring them in a manner such as `const std::lock_guard<std::mutex>(mutex);`

3. **Remove old code.** Remove calls to `lock()` and `unlock()` from the functions where a lock is now being used.


## Solution Example ##

In the following example, a lock is being used with the mutex. Notice that nothing else is necessary to assure concurrency when using a lock. Yes, it really is that simple.

    static std::mutex mutex;
    
    void function(){
    
    const std::lock_guard<std::mutex>(mutex);
    
    //do stuff
    }


## Additional Resources ##

For more information about using locks with mutexes, see [https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management](https://www.securecoding.cert.org/confluence/display/cplusplus/CON02-CPP.+Use+lock+classes+for+mutex+management)
]]></Data>
  </Content>
</TeamMentor_Article>