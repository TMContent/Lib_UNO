<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="830329510" Content_Hash="1191567133">
  <Metadata>
    <Id>0c8d81d6-3808-47d9-9f77-1869cd76a67b</Id>
    <Id_History>c7e3ea7d-a8fa-44d0-880e-a6059873bc16,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Exception Details Are Logged on the Server</Title>
    <Category>Error and Exception Management</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Exception Details Are Logged on the Server</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that exceptions are logged to the server to allow further analysis and debugging.</p>
  <h1>Why</h1>
  <p>Malicious attacks may result in application exceptions. Exceptions contain critical information on problems which occur in production systems.&amp;nbsp;Logging them will help track down problems faster. </p>
  <h1>How to Check</h1>
  <p>Ensure that&amp;nbsp;your application uses structured exception handling and employs a global error handler. See:</p>
  <ul>
    <li>
      <a href="/article/4d3f994b-3be7-4e3d-8183-e213612cf5c4">Checklist Item: A Global Exception Handler is used for Unhandled Exceptions</a>
      <li>
        <a href="/article/bc10306c-f37c-4780-a096-847070ae67da">Checklist Item: Structured Exception Handling is Used</a>
      </li>
    </li>
  </ul>
  <p>Ensure that in all exception handlers and the global error handler, code exists to log exception details to the server.&amp;nbsp;Code will be similar to this:</p>
  <pre>    //get reference to the source of the exception chain<br />    Exception ex = Server.GetLastError().GetBaseException();<br />     // log the details of the exception and page state to the<br />    // event log.<br />    EventLog.WriteEntry("My Web Application",<br />      "MESSAGE: " &amp;#43; ex.Message &amp;#43;<br />       "\nSOURCE: " &amp;#43; ex.Source,<br />       EventLogEntryType.Error);</pre>
  <h1>How to Fix</h1>
  <p>You should log all exceptions in the event log to record them for tracking and later analysis.&amp;nbsp;Event logging should occur in <strong>Try</strong>/<strong>Catch</strong>/<strong>Finally</strong> blocks in code as well as in the global error handler. Use code similar to the following:</p>
  <pre>&lt;&amp;#37;&amp;#64; Application Language="C#" &amp;#37;&gt;<br /> &lt;&amp;#37;&amp;#64; Import Namespace="System.Diagnostics" &amp;#37;&gt;<br />  &lt;script language="C#" runat="server"&gt;<br /> void Application_Error(object sender, EventArgs e)<br /> &amp;#123;<br />    //get reference to the source of the exception chain<br />    Exception ex = Server.GetLastError().GetBaseException();<br />     // log the details of the exception and page state to the<br />    // event log.<br />    EventLog.WriteEntry("My Web Application",<br />      "MESSAGE: " &amp;#43; ex.Message &amp;#43;<br />       "\nSOURCE: " &amp;#43; ex.Source,<br />       EventLogEntryType.Error);<br />     // Optional e-mail or other notification here...<br /> &amp;#125;<br />   &lt;/script&gt;</pre>
  <h1>Problem Example</h1>
  <p>An ASP.NET application is under attack by a malicious user. One side effect of the attack is a set of application exceptions when connecting to and retrieving data from the database.&amp;nbsp;Unfortunately the application doesn't log exception details to the server, so this debugging and auditing information is lost forever.</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application is under attack by a malicious user. One side effect of the attack is a set of application exceptions when connecting to and retrieving data from the database.&amp;nbsp;Fortunately the application logs exception details to the server, so this debugging and auditing information is discovered by the site admin and delivered to the development team for further analysis.</p>
  <pre>&lt;&amp;#37;&amp;#64; Application Language="C#" &amp;#37;&gt;<br /> &lt;&amp;#37;&amp;#64; Import Namespace="System.Diagnostics" &amp;#37;&gt;<br />  &lt;script language="C#" runat="server"&gt;<br /> void Application_Error(object sender, EventArgs e)<br /> &amp;#123;<br />    //get reference to the source of the exception chain<br />    Exception ex = Server.GetLastError().GetBaseException();<br />     // log the details of the exception and page state to the<br />    // event log.<br />    EventLog.WriteEntry("My Web Application",<br />      "MESSAGE: " &amp;#43; ex.Message &amp;#43;<br />       "\nSOURCE: " &amp;#43; ex.Source,<br />       EventLogEntryType.Error);<br />     // Optional e-mail or other notification here...<br /> &amp;#125;<br />   &lt;/script&gt;</pre>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/201ecd28-c916-4c83-92ea-7416fbf52987">Log Exception Details to the Server</a>
      <li>
        <a href="/article/2e16a65a-25d2-4ea9-a513-e020d2408241">Checklist Item: Global Error Handlers are Used to Catch Unhandled Exceptions</a>
        <li>
          <a href="/article/bc10306c-f37c-4780-a096-847070ae67da">Checklist Item: Structured Exception Handling is Used</a>
          <li>
            <a href="/article/b24a7dd0-a01a-4cbb-8559-6d566f54bd6c">Checklist Item: Health Monitoring is Used for Logging and Auditing Events</a>
            <li>
              <a href="/article/8d30acbe-f771-40fa-976d-3c5376d7bf08">Checklist Item: Sensitive User Data is Not Logged </a>
            </li>
          </li>
        </li>
      </li>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>