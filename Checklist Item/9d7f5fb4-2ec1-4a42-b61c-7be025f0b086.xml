<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="429184794" Content_Hash="1662866458">
  <Metadata>
    <Id>9d7f5fb4-2ec1-4a42-b61c-7be025f0b086</Id>
    <Id_History>594169a2-376f-4023-a0cb-b35ba5e703ba,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>View State Is Encrypted If It Contains Sensitive Data</Title>
    <Category>Session Management</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 3.5</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>View State Is Encrypted If It Contains Sensitive Data</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>What to Check For</h1>
  <p>If sensitive information must be stored in ViewState,&amp;nbsp;verify that&amp;nbsp;it is encrypted</p>
  <h1>Why</h1>
  <p>ViewState is protected against tampering by default with an HMAC integrity check, and&amp;nbsp;SSL can be used to protect ViewState on the network.&amp;nbsp;However, unless ViewState encryption is used, any sensitive data stored in ViewState is vulnerable on the local machine.</p>
  <h1>How to Check</h1>
  <p>The easiest way to check if ViewState encryption is turned on is to review the HTML source returned by your application on the client-side and scan for the VIEWSTATE hidden field:</p>
  <pre>&lt;form name="testForm" method="post" action="viewstate.aspx" id="testForm"&gt;<br />&amp;#9;&lt;input type="hidden" name="__VIEWSTATE"<br /></pre>
  <p>If ViewState is not encrypted you will see all of the server control properties in plain text.&amp;nbsp; If it is encrypted you will see only encrypted data:</p>
  <pre>&lt;form name="testForm" method="post" action="viewstate.aspx" id="testForm"&gt;<br />&amp;#9;&lt;input type="hidden" name="__VIEWSTATE" <br />value="dDwxNTgzOTU2ODA7dDw7bDxpPDE&amp;#43;Oz47bDx0PDtsPGk8MT47PjtsPHQ8QDA8cDxwP<br />Gw8UGFnZUNvdW50O18hSXRlbUNvdW50O18hRGF0YVNvdXJjZUl0ZW1Db3VudDtEYXRhS2V5c<br />zs&amp;#43;O2w8aTwxPjtpPDg&amp;#43;O2k8OD47bDw&amp;#43;Oz4&amp;#43;Oz47Ozs7Ozs7OztAMDxAMDxwPGw8SGVhZGVyVG<br />V4dDtEYXRhRmllbGQ7U29ydEV4cHJlc3Npb247UmVhZE9ubHk7PjtsPHB1Yl9pZDtwdWJfaWQ<br />7cHViX2lkO288Zj47Pj47Ozs7PjtAMDxwPGw8SGVhZGVyVGV4dDtEYXRhRmllbGQ7U29ydEV4<br />cHJlc3Npb247UmVhZE9ubHk7PjtsPHB1Yl9uYW1lO3B1Yl9uYW1lO3B1Yl9uYW1lO288Zj47P<br />j47Ozs7PjtAMDxwPGw8SGVhZGVyVGV4dDtEYXRhRmllbGQ7U29ydEV4cHJlc3Npb247UmVhZE<br />9ubHk7PjtsPGNpdHk7Y2l0eTtjaXR5O288Zj47Pj47Ozs7PjtAMDxwPGw8SGVhZGVyVGV4dDt<br />EYXRhRmllbGQ7U29ydEV4cHJlc3Npb247UmVhZE9ubHk7PjtsPHN0YXRlO3N0YXRlO3N0YXR<br />lO288Zj47Pj47Ozs7PjtAMDxwPGw8SGVhZGVyVGV4dDtEYXRhRmllbGQ7U29ydEV4cHJlc3Np<br />b247UmVhZE9ubHk7PjtsPGNvdW50cnk7Y291bnRyeTtjb3VudHJ5O288Zj47Pj47Ozs7Pjs&amp;#43;O<br />z47bDxpPDA&amp;#43;Oz47bDx0PDtsPGk8MT47aTwyPjtpPDM&amp;#43;O2k8ND47aTw1PjtpPDY&amp;#43;O2k8Nz47aT<br />w4Pjs&amp;#43;O2w8dDw7bDxpPDA&amp;#43;O2k8MT47aTwyPjtpPDM&amp;#43;O2k8ND47PjtsPHQ8cDxwPGw8VGV4dDs<br />&amp;#43;O2w8MDczNjs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cDxwPGw8VGV4dDs&amp;#43;O2w8TmV3IE1vb24gQm9va3M7Pj47Pjs7<br />Pjt0PHA8cDxsPFRleHQ7PjtsPEJvc3Rvbjs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cDxwPGw8VGV4dDs&amp;#43;O2w8TUE7P<br />j47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPFVTQTs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;Oz4&amp;#43;O3Q8O2w8aTwwPjtpPDE&amp;#43;O2<br />k8Mj47aTwzPjtpPDQ&amp;#43;Oz47bDx0PHA8cDxsPFRleHQ7PjtsPDA4Nzc7Pj47Pjs7Pjt0PHA8cD<br />xsPFRleHQ7PjtsPEJpbm5ldCAmIEhhcmRsZXk7Pj47Pjs7Pjt0PH_u56 ?cDxsPFRleHQ7Pjt<br />sPFdhc2hpbmd0b247Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPERDOz4&amp;#43;Oz47Oz47dDxwPHA8<br />bDxUZXh0Oz47bDxVU0E7Pj47Pjs7Pjs&amp;#43;Pjt0PDtsPGk8MD47aTwxPjtpPDI&amp;#43;O2k8Mz47aTw0P<br />js&amp;#43;O2w8dDxwPHA8bDxUZXh0Oz47bDwxMzg5Oz4&amp;#43;Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxBbG<br />dvZGF0YSBJbmZvc3lzdGVtczs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cDxwPGw8VGV4dDs&amp;#43;O2w8QmVya2VsZXk7Pj4<br />7Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPENBOz4&amp;#43;Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxVU0E7<br />Pj47Pjs7Pjs&amp;#43;Pjt0PDtsPGk8MD47aTwxPjtpPDI&amp;#43;O2k8Mz47aTw0Pjs&amp;#43;O2w8dDxwPHA8bDxUZ<br />Xh0Oz47bDwxNjIyOz4&amp;#43;Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxGaXZlIExha2VzIFB1Ymxpc2<br />hpbmc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPENoaWNhZ287Pj47Pjs7Pjt0PHA8cDxsPFR<br />leHQ7PjtsPElMOz4&amp;#43;Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxVU0E7Pj47Pjs7Pjs&amp;#43;Pjt0PDts<br />PGk8MD47aTwxPjtpPDI&amp;#43;O2k8Mz47aTw0Pjs&amp;#43;O2w8dDxwPHA8bDxUZXh0Oz47bDwxNzU2Oz4&amp;#43;O<br />z47Oz47dDxwPHA8bDxUZXh0Oz47bDxSYW1vbmEgUHVibGlzaGVyczs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cDxwPG<br />w8VGV4dDs&amp;#43;O2w8RGFsbGFzOz4&amp;#43;Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxUWDs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q<br />8cDxwPGw8VGV4dDs&amp;#43;O2w8VVNBOz4&amp;#43;Oz47Oz47Pj47dDw7bDxpPDA&amp;#43;O2k8MT47aTwyPjtpPDM&amp;#43;<br />O2k8ND47PjtsPHQ8cDxwPGw8VGV4dDs&amp;#43;O2w8OTkwMTs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cDxwPGw8VGV4dDs&amp;#43;O<br />2w8R0dHJkc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPE3DvG5jaGVuOz4&amp;#43;Oz47Oz47dDxwPH<br />A8bDxUZXh0Oz47bDwmbmJzcFw7Oz4&amp;#43;Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxHZXJtYW55Oz4<br />&amp;#43;Oz47Oz47Pj47dDw7bDxpPDA&amp;#43;O2k8MT47aTwyPjtpPDM&amp;#43;O2k8ND47PjtsPHQ8cDxwPGw8VGV4<br />dDs&amp;#43;O2w8OTk1Mjs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cDxwPGw8VGV4dDs&amp;#43;O2w8U2Nvb3RuZXkgQm9va3M7Pj47P<br />js7Pjt0PHA8cDxsPFRleHQ7PjtsPE5ldyBZb3JrOz4&amp;#43;Oz47Oz47dDxwPHA8bDxUZXh0Oz47bD<br />xOWTs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cDxwPGw8VGV4dDs&amp;#43;O2w8VVNBOz4&amp;#43;Oz47Oz47Pj47dDw7bDxpPDA&amp;#43;O2k<br />8MT47aTwyPjtpPDM&amp;#43;O2k8ND47PjtsPHQ8cDxwPGw8VGV4dDs&amp;#43;O2w8OTk5OTs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8<br />cDxwPGw8VGV4dDs&amp;#43;O2w8THVjZXJuZSBQdWJsaXNoaW5nOz4&amp;#43;Oz47Oz47dDxwPHA8bDxUZXh0O<br />z47bDxQYXJpczs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cDxwPGw8VGV4dDs&amp;#43;O2w8Jm5ic3BcOzs&amp;#43;Pjs&amp;#43;Ozs&amp;#43;O3Q8cD<br />xwPGw8VGV4dDs&amp;#43;O2w8RnJhbmNlOz4&amp;#43;Oz47Oz47Pj47Pj47Pj47Pj47Pj47Pg==" /&gt;</pre>
  <h1>How to Fix</h1>
  <p>To enable ViewState encryption use the following steps:</p>
  <ol>
    <li>Check that the <b>viewStateEncryptionMode</b> attribute of the <b>&lt;pages&gt;</b> element is set to <b>Always</b>: <pre>&lt;pages ... viewStateEncryptionMode="Always" ... /&gt;</pre><p>If you do not want every page to used encrypted ViewState, check that the <b>viewStateEncryptionMode</b> attribute of the <b>&lt;pages&gt;</b> element is set to <b>Auto</b>: </p><pre>&lt;pages ... viewStateEncryptionMode="Auto" ... /&gt;   </pre><p>Then, from within your code, call the <b>RegisterRequiresViewStateEncryption</b> method:</p><pre>Page.RegisterRequiresViewStateEncryption();</pre><li>Specify the encryption algorithm to use on the <b>validation</b> attribute: <pre>&lt;machineKey ... validation="AES" ... /&gt;</pre><p>The <b>validation</b> attribute is overloaded and can be used to specify either the hashing algorithm or the encryption algorithm.&amp;nbsp;You can specify either <b>3DES</b> or <b>AES</b>. Because <b>AES</b> offers larger key sizes (128 bits, 192 bits, or 256 bits) than <b>3DES</b> (56 bits), it is considered more secure and should be used.</p><li>Review the <b>decryptionKey</b> attribute of the <b>&lt;machineKey&gt;</b> element: <pre>&lt;machineKey decryptionKey="AutoGenerate,IsolateApps" ... /&gt;</pre><p>Unless your application is installed in a Web farm, you should leave the <b>decryptionKey</b> attribute with the default values as shown in the example.</p></li></li></li>
  </ol>
  <h1>Problem Example</h1>
  <p>An ASP.NET application contains a server-side control that a user will fill in with social security number. The ViewState is protected from tampering by default due to the fact it is integrity checked with HMACS, and the application's developer knows that social security information is sensitive, so he requires SSL for the form post. This protects the information on the network; however, since ViewState is not encrypted, the social security information is visible on the user's computer to anyone who has access to the machine.</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application contains a server-side control that a user will fill in with social security number.&amp;nbsp;The ViewState is protected from tampering by default due to the fact it is integrity checked with HMACS, and the application's developer knows that social security information is sensitive, so he requires SSL for the form post to protect the information on the network. In addition, in&amp;nbsp;order to protect the information on the user's machine, ViewState is encrypted using ASP.NET ViewState encryption. </p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on ASP.NET Tracing, see <a href="http://msdn.microsoft.com/en-us/library/bb386420.aspx">ASP.NET Tracing&amp;nbsp;Overview </a>&amp;nbsp;on MSDN.</li>
  </ul>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/c63569b1-5373-4bb8-ac34-08db76346c18">Guideline: Encrypt ViewStates that Contain Sensitive Data</a>
      <li>
        <a href="/article/b4b49e15-eb5d-46b0-b56d-231ca447c053">Avoid Storing Sensitive Data in ViewState</a>
      </li>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
  </Content>
</TeamMentor_Article>