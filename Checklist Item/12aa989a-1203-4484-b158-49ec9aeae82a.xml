<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1327380101" Content_Hash="-44236046">
  <Metadata>
    <Id>12aa989a-1203-4484-b158-49ec9aeae82a</Id>
    <Id_History>456eca8f-630f-408c-8182-87d34985b4e3,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Membership Providers Are Used Instead of Custom Authentication</Title>
    <Category>Forms Authentication</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Membership Providers Are Used Instead of Custom Authentication</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>ASP.NET 2.0</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Check to ensure ASP.NET membership providers are used to authenticate your users.</p>
  <h1>Why</h1>The membership feature helps protect credentials, can enforce strong passwords, and provides consistent APIs for user validation and secure user management.&amp;nbsp; The membership feature also automatically creates the authentication ticket for you.&amp;nbsp; <h1>How to Check</h1><p>To check if your application is using Membership Providers, use the following steps:</p><ol><li><div>Check your web.config or machine.config file for a &lt;<strong>membership</strong>&gt; section.</div></li><li><div>Within the &lt;<strong>membership</strong>&gt; section check that there is a &lt;<b>providers</b>&gt; section configured to the provider supporting your application's users.</div></li><li><div>Check&amp;nbsp;that the &lt;<strong>connectionStrings</strong>&gt; section contains connection information to the store pointed to in the &lt;<b>providers</b>&gt; section.</div></li><li><div>Check that the <strong>defaultProvider</strong> attribute on the &lt;<b>membership</b>&gt; element points to your chosen provider.</div></li><li><div>Ensure that your application uses the Membership API or the <strong>Login</strong> controls to authenticate users.</div></li></ol><p>For example, a properly set up configuration file for a <strong>SqlMembershipProvider</strong> would look like:</p><pre>&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name="MySqlConnection" connectionString="Data Source=MySqlServer;<br />		Initial Catalog=aspnetdb;Integrated Security=SSPI;" /&gt;<br />&lt;/connectionStrings&gt;<br />&lt;system.web&gt;<br />...<br />&amp;nbsp; &lt;membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;clear /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name="SqlProvider" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type="System.Web.Security.SqlMembershipProvider" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName="MySqlConnection"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName="MyApplication"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; enablePasswordRetrieval="false"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; enablePasswordReset="true"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; requiresQuestionAndAnswer="true"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; requiresUniqueEmail="true"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; passwordFormat="Hashed" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/providers&gt;<br />&amp;nbsp; &lt;/membership&gt;<br /></pre><h1>How to Fix</h1><p>The membership feature has built-in providers for user stores including SQL Server, Active Directory, and Active Directory Application Mode (ADAM).&amp;nbsp; If you want to use an existing user store, such as a non-Active Directory LDAP directory, or a user store on another platform, create a custom membership provider inheriting from the <b>MembershipProvider</b> abstract base class.&amp;nbsp; By doing this, your application can still benefit from using the standard membership features and API and login controls.&amp;nbsp; </p><p />To configure membership, you need to define a connection string to point to the provider store and configure your provider definition in the Web.config file. <p /><b>To configure membership:</b><ol><li>Configure your application for forms authentication by setting<b></b>&lt;<b>authentication mode="Forms"/</b>&gt; </li><li>Add a connection string to the &lt;<b>connectionStrings/</b>&gt; section to point to your user store. If you are using the <b>ActiveDirectoryMembershipProvider</b>, this is a Lightweight Directory Access Protocol (LDAP) query string pointing to your user container in Active Directory or ADAM. If you are using the <b>SqlMembershipProvider</b>, this is a database connection string that points to your user store database. </li><li>Add a &lt;<b>membership</b>&gt;<b></b>section to configure your chosen membership provider. </li><li>Configure the specific provider by creating a<b></b>&lt;<b>providers</b>&gt; section beneath the &lt;<b>membership</b>&gt;<b></b>element in your application's Web.config. The membership system supports a number of different providers: </li><li>If your user accounts are in Active Directory or ADAM, use the <b>ActiveDirectoryMembershipProvider</b>. </li><li>If your user accounts are in SQL Server, use <b>SqlMembershipProvider</b>. </li><li>If your user accounts are in a store other than those previously listed, create a custom membership provider by inheriting from the <b>MembershipProvider</b> base class. </li><li>Set the <b>defaultProvider</b> attribute on the &lt;<b>membership</b>&gt; element to your chosen provider. </li></ol><p>To validate and manage users, use the Membership API (for example, <b>Membership.CreateUser </b>and <b>Membership.ValidateUser</b>) or use the <b>Login</b> controls, which automatically use your membership configuration. </p><hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>