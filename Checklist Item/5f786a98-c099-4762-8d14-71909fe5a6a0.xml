<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="354035656" Content_Hash="1723479488">
  <Metadata>
    <Id>5f786a98-c099-4762-8d14-71909fe5a6a0</Id>
    <Id_History>5f786a98-c099-4762-8d14-71909fe5a6a0,144428ee-bbe1-4e07-bdd3-f00b116cd9e4,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>Logging Is Centralized</Title>
    <Category>Auditing and Logging</Category>
    <Phase>Design</Phase>
    <Technology>PHP</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Logging Is Centralized</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority />
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>PHP</li>
  </ul>
  <h1>What to Check For</h1>
  <p>Verify that logging is centralized.</p>
  <h1>Why</h1>
  <p>A centralized logging subsystem is simpler to maintain and implement correctly.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to verify that logging is centralized:</p>
  <ol>
    <li>
      <p>
        <strong>Identify the logging subsystem.</strong> The logging subsystem should provide an API that allows generating log entries from application code. Make a list of functions that may be used to generate log entries.</p>
      <li>
        <p>
          <strong>Examine log entries.</strong> Find out where log entries are stored and examine them. This should give you clues about the functionality of the logging subsystem.</p>
        <li>
          <p>
            <strong>Review code.</strong> Find code that generates log entries. Make sure this code uses the centralized logging subsystem.</p>
        </li>
      </li>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Perform the following actions to centralize logging: </p>
  <ol>
    <li>
      <p>
        <strong>Identify existing logging functionality.</strong> Examine the application architecture to identify logging facilities, such as the logging API and where audit trails are actually stored. Make a list of APIs used to log events, document how to use them, and where they store logs.</p>
      <li>
        <p>
          <strong>Design the logging subsystem.</strong> Design and implement a class or library specifically for logging. When designing the logging subsystem, consider sending logs to a remote log server. Consider the following factors when designing the logging subsystem:</p>
        <ul>
          <li>Log throttling <li>Logging important event details for both successful and failed operations <li>Logging important security operations <li>Logging important business operations <li>Monitoring the use of privileged accounts <li>Logging user management events <li>Avoiding including sensitive information in logs <li>Logging unusual activity <li>Sending logs to a centralized server </li></li></li></li></li></li></li></li></li>
        </ul>
        <li>
          <p>
            <strong>Implement the logging subsystem.</strong> Write code that generates log entries according to your design. Use PHP's <em>trigger_error()</em> function in conjunction with a custom error handler, which uses <em>error_log()</em>. </p>
          <li>
            <p>
              <strong>Use the logging subsystem.</strong> Use the logging class or library whenever logs are generated. If earlier code exists that generates log entries, replace it with calls to the new logging subsystem API.</p>
          </li>
        </li>
      </li>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about the <em>error_log</em> function, see <a href="http://www.php.net/manual/en/function.error-log.php">http://www.php.net/manual/en/function.error-log.php</a></li>
  </ul>]]></Data>
  </Content>
</TeamMentor_Article>