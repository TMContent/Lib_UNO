<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="442251811" Content_Hash="-1519693353">
  <Metadata>
    <Id>42f4b565-14f7-42f4-8c5a-0f78f357e4c0</Id>
    <Id_History>42f4b565-14f7-42f4-8c5a-0f78f357e4c0,a274bdb4-2c69-41fe-82c4-aa02bec654eb,</Id_History>
    <Library_Id>be5273b1-d682-4361-99d9-6234f2d47eb7</Library_Id>
    <Title>All Database Input Is Validated</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>All Database Input Is Validated</DirectLink>
    <Tag>SQLi, SQL, SQL Injection</Tag>
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="markdown">
    <Data><![CDATA[## Applies To ##

* Java applications that use databases


## What to Check For ##

Ensure that all input passed to the database is validated.


## Why ##

Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities that would allow an attacker to gain unauthorized access to sensitive data.


## How to Check ##

Use the following steps to check if all input passed to database is validated:

1. **Identify database entry points.** Identify all locations within your application that interface with the database servers. Potential sources of input include:
    - URL based parameters
    - Form based parameters
    - Hidden fields
    - Cookies
    - Local filesystem
    - Javascript variables

2. **Trace data from source to sink.** Trace each source of input from the immediate source, through your application and to the backend database.

3. **Identify validation routines.** Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.

4. **Ensure quality of validators.** Validation routines should check for length, range, format and type. The validator should first check for good data via whitelisting and then for known malicious data via blacklisting. Do not rely on client-side validation alone as it can be bypassed easily.

5. **Ensure that parameterized queries are used.** Verify that all database transactions are handled using PreparedStatement objects.


## How to Fix ##

To properly validate input passed to database:

1. **Identify database entry points.** Identify all locations within your application that interface with the database servers. Potential sources of input include:
    - URL-based parameters
    - Form-based parameters
    - Hidden fields
    - Cookies
    - Local filesystem
    - Javascript variables

2. **Create a set of validators.** Build a set of validators that work with the database-specific language. Determine the appropriate validation at each validator. Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the component. Place the validators along the database entry points. All data should pass through the validators before transmitted to the database servers.

3. **Use type safe SQL parameters in queries.** Stored procedures and parameterized queries improve your application's robustness against SQL injection based attacks.


## Problem Example ##

The following code allows the user to query a database. Unfortunately, the application fails to validate the user's input and does not use parameterized APIs for data accesss. The result is that an attacker can access the backend database on behalf of the application through the use of SQL injection.

	public void doGet(HttpServletRequest request,
		 HttpServletResponse response) throws ServletException, IOException{
		 PrintWriter out = response.getWriter();
		 String query = request.getParameter("query");
		 String retData = "";

		 // The application fails to validate the user-supplied
		 // query before submitting it to the database server
		 retData = queryDB(query);

		 ...

		 out.flush();
		 out.close();
	}


## Solution Example ##

The following code allows the user to query a database. Because the application validates the user's input, it is much more difficult for an attacker to access the backend database through a SQL injection attack. Data validation is only one layer in a defense-in-depth paradigm; make sure to use parameterized APIs for data access as well.

	public void doGet(HttpServletRequest request,
		 HttpServletResponse response) throws ServletException, IOException{
		 PrintWriter out = response.getWriter();
		 String query = request.getParameter("query");
		 String retData = "";

		 // The application validates the user-supplied query
		 // before submitting it to the database server
		 if (validateQuery(query))
		 {
			  retData = queryDB(query);

			  ...

		 }

		 out.flush();
		 out.close();
	}


	public boolean validateQuery(String input){

		  // The input can be only of numeric characters
		  String goodPattern = "[0-9]++";

		  Pattern p = Pattern.compile(goodPattern);
		  Matcher m = p.matcher(input);

		  if(!m.matches())
		  {
				return false;
		  }

		  return true;
	}]]></Data>
  </Content>
</TeamMentor_Article>