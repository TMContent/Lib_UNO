<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="1855194979" Content_Hash="-36815321">
  <Metadata>
    <Id>678c7c25-1879-48b0-adf9-0beb33528dc9</Id>
    <Id_History>ae510169-4aee-49e6-b2ee-2a4501bf9807,</Id_History>
    <Library_Id>ea854894-8e16-46c8-9c61-737ef46d7e82</Library_Id>
    <Title>Application Avoids File Name And Path Input</Title>
    <Category>Input and Data Validation</Category>
    <Phase>Implementation</Phase>
    <Technology>ASP.NET 2.0</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Application Avoids File Name And Path Input</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>J.D. Meier, Alex Mackman, Blaine Wastell, Prashant Bansode, Andy Wigley, Kishore Gopalan</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="Html">
    <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 2.0</li>
  </ul>
  <h1>What to Check For</h1>
  <p>Unless absolutely necessary, the application should not accept file names or file paths as input.</p>
  <h1>Why</h1>
  <p>Malicious file input can be used to coerce your application into accessing arbitrary files and resources.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to check for this problem:</p>
  <h2>1. Find all sources of input in your application</h2>
  <p>During design time identify all of the potential sources of input to your application. Scour the source code to discover sources of input that may have been missed in the design.&amp;nbsp; Compile a list that you can use in the following steps.</p>
  <h2>2. Determine if any source of input provides file or path information</h2>
  <p>Examine each source of input and determine if it is used to generate a file name or file path.&amp;nbsp;Look not only for sources of input that provide full paths or file names but also for user input that could be used to modify the internal generation of paths and file names.</p>
  <h1>How to Fix</h1>
  <p>If user control over file paths or file names is not absolutely necessary, remove the responsible code from the application.</p>
  <p>If the functionality is critical to the proper working of the application then validate the input for directory traversal and canonicalization attacks:</p>
  <h2>1. Check File Names</h2>
  <p>Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate.&amp;nbsp; When checking file names, obtain the full name of the file by using the <b>System.IO.Path.GetFullPath</b> method. </p>
  <h2>2. Check File Paths</h2>
  <p>If you use <b>MapPath</b> to map a supplied virtual path to a physical path on the server, use the overloaded <b>Request.MapPath</b> method that accepts a <b>bool</b> parameter so that you can prevent cross-application mapping. The following code example shows this technique. </p>
  <pre>
    <pre>try<br />{<br />  string mappedPath = Request.MapPath( inputPath.Text,<br />                                       Request.ApplicationPath, false);<br />}<br />catch (HttpException)<br />{<br />  // Cross-application mapping attempted<br />}</pre>
  </pre>
  <p>The final <b>false</b> parameter prevents cross-application mapping.&amp;nbsp; This means that a user cannot successfully supply a path that contains ".." to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <b>HttpException</b>. </p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <div>
        <a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGHT000003.asp">How To: Protect From Injection Attacks in ASP.NET</a>
      </div>
    </li>
    <li>
      <div>
        <a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGHT000001.asp">How To: Use Regular Expressions to Constrain Input in ASP.NET</a>
      </div>
    </li>
    <li>
      <div>
        <a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGHT000004.asp">How To: Prevent Cross-Site Scripting in ASP.NET</a>
      </div>
    </li>
    <li>
      <div>
        <a href="http://msdn.microsoft.com/library/en-us/dnpag2/html/PAGHT000002.asp">How To: Protect From SQL Injection in ASP.NET</a>
      </div>
    </li>
  </ul>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
  </Content>
</TeamMentor_Article>