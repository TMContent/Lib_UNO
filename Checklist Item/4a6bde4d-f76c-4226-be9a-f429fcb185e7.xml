<?xml version="1.0"?>
<TeamMentor_Article Metadata_Hash="-301923744" Content_Hash="1706020224">
  <Metadata>
    <Id>4a6bde4d-f76c-4226-be9a-f429fcb185e7</Id>
    <Id_History>d74fe6bf-387f-4ff1-9edb-d0275eedffc0,</Id_History>
    <Library_Id>c4b9cb6a-4561-4451-9b6c-4e59d73584f6</Library_Id>
    <Title>Passwords Are Stored Securely</Title>
    <Category>Cryptographic Storage</Category>
    <Phase>Implementation</Phase>
    <Technology>Java</Technology>
    <Type>Checklist Item</Type>
    <DirectLink>Passwords Are Stored Securely</DirectLink>
    <Tag />
    <Security_Demand />
    <Author />
    <Priority>2</Priority>
    <Status />
    <Source>SI</Source>
  </Metadata>
  <Content Sanitized="true" DataType="wikitext">
    <Data><![CDATA[==Applies To==

* Java

==What to Check For==

Verify that iterative hashing is used to protect stored passwords.

==Why==

Storing hashes instead of plain-text passwords assures that an attacker cannot easily recover the passwords if he gains access to the password files. Adding salt to hashed files makes hashes much harder to break with dictionary attacks. Hashing should be applied multiple times to make hashing take longer and thus increase the computational resources required to attack the hashes. Iterative hashing applies a hashing function multiple times to a password and a salt, drastically increasing the time required to perform dictionary attacks.

==When==

Use iterative hashing when storing passwords.

==How to Check==

To verify that iterative hashing is used to secure stored passwords:

# **Identify code that stores passwords.** Find code that stores passwords. Search for {{{ SecretKeyFactory }}} to find code that hashes stored passwords. If searching for {{{ SecretKeyFactory }}} does not find the code that is used to store passwords, review the application to find the code that stores passwords.
# **Examine code that stores passwords.** Review code that stores passwords to make sure it uses {{{ SecretKeyFactory }}} with the {{{ PBKDF2WithHmacSHA256 }}} algorithm to store passwords and that multiple iterations are used. If that API is not used, then make sure that the password is hashed iteratively at least ten times using a strong hashing algorithm.

==How to Fix==

The following steps show how to use iterative hashing:

# **Define password storage requirements.** Most applications with a database back-end store the passwords in a database table. Another option is to store the passwords in files. If your application implements the policy of preventing users from entering previously used passwords, then the salted hashes of the previously used passwords have to be stored also. If the amount of the previously used passwords that cannot be used is configurable, it is recommended to use a separate table or file to store the hashes and salts of the previously used passwords.
# **Generate a random salt value.** Each bit of salt doubles the memory and computational requirements for dictionary attacks. Recommended salt lengths are 64-bit or more. Use a random number generator of your choice to generate a random number of required size. Use this number as the salt.
# **Hash the password and the salt using multiple iterations.** Use the {{{ SecretKeyFactory }}} API with the {{{ PBKDF2WithHmacSHA256 }}} algorithm to hash and salt the password using multiple iterations. The amount of iterations has to be the same when storing the password and when checking the password during authentication.
# **Store the hash and the salt.** Store the hash in the file or database of your choosing. It is important to store both the hash and the salt, because the salt will have to be used when comparing user entered passwords to the hashed value.
# **Implement password verification.** During authentication, the password entered by the user should be checked against the value calculated using PBKDF2. To do this, retrieve the hash value and the salt from password storage. Use PBKDF2 to calculate a value based on user input and the stored salt and compare the resulting string against the stored hash. If the resulting hash is the same as the stored hash, the user has entered the correct password.

**Note:** Never store the user credentials or their hashes on the client side (e.g. in cookies, hidden fields, etc.). Use sessions when there is a need to track the user or store their hashed credentials. 

==Solution Example==

The following code validates the user based on a given username and password. It calculated the PBKDF2 using the password and salt. Then it compares the username and the produced hash against the hash stored in the backend database. Therefore, the password is not stored in the database.

{{{

public boolean validateUser(String user, char[] pass)
	
{
	try {
		...
		byte[] storedPassHash;
		byte[] salt;
		// set storedPassHash and salt to values from database
		byte[] passHash = hashCredentials(pass, salt);
		return Arrays.equals(passHash, storedPassHash);
	} catch (NoSuchAlgorithmException nsae) {
		// Add the appropriate logging and exception handling mechanisms
		return false;
	} catch (InvalidKeySpecException ikse) {
		// Add the appropriate logging and exception handling mechanisms
		return false;
	}
}

public String hashCredentials(char[] pass, byte[] salt)
       throws NoSuchAlgorithmException, InvalidKeySpecException
{
	String algorithm = “PBKDF2WithHmacSHA1”;
	int derivedKeyLength = 160;
	int iterations = 10000;

	KeySpec spec = newPBEKeySpec(pass, salt, iterations, derivedKeyLength);
	SecreyKeyFactory skf = SecreyKeyFactory.getInstance(algorithm);

	Return skf.generateSecret(spec).getEncoded();
} 

}}}

==Additional Resources==

* For more information about the SecretKeyFactory API and PBKDF2WithHmacSHA1, see http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecreyKeyFactory]]></Data>
  </Content>
</TeamMentor_Article>